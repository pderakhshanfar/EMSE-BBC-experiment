/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 01:45:23 GMT 2020
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSortedMap;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.FieldCleanupPass;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TypeInference;
import com.google.javascript.jscomp.graph.DiGraph;
import com.google.javascript.jscomp.graph.LinkedDirectedGraph;
import com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.UnionType;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeInference_ESTest extends TypeInference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONAEray", "org.json.JSONAEray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      Scope scope1 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec((String) null);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("7Qz", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      linkedFlowScope1.createChildFlowScope();
      LinkedFlowScope linkedFlowScope3 = new LinkedFlowScope(linkedFlowScope1);
      LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(135, 55, 2116);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 135
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.TRUE;
      codingConvention_AssertionFunctionSpec0.getAssertedType(node0, jSTypeRegistry0);
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.TRUE;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      Node node1 = new Node(144, 32, 15);
      immutableSortedMap0.lowerEntry("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair");
      typeInference0.branchedFlowThrough(node0, linkedFlowScope2);
      typeInference0.createEntryLattice();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 144
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSOArGray", "org.json.JSOArGray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Element", codingConvention_AssertionFunctionSpec0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      immutableSortedMap0.navigableKeySet();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      linkedFlowScope2.createChildFlowScope();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("org.json.JSOArGray");
      linkedFlowScope1.createChildFlowScope();
      Node node1 = new Node(101, 400000, 30);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.json.JSONArray");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_TRUE;
      controlFlowGraph0.connectIfNotFound(node0, controlFlowGraph_Branch0, node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node((-448), 2146, 2);
      ReverseAbstractInterpreter reverseAbstractInterpreter1 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter1, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedList<FlowScope> linkedList0 = new LinkedList<FlowScope>();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SCRIPT 1 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000615] [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000616] [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000617] does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec2 = new CodingConvention.AssertionFunctionSpec("Object#Key");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Element", codingConvention_AssertionFunctionSpec2);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Scope scope1 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      linkedFlowScope0.createChildFlowScope();
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(120, 123, 8);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSOArGray", "org.json.JSOArGray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, true);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Element", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(118, 52, 4095);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference1.createEntryLattice();
      typeInference0.flowThrough(node1, linkedFlowScope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // VAR 52 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("\"=3)T]O=g]A'Uv5B");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"=3)T]O=g]A'Uv5B");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("l:u*[w.;c%<u3yL", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(64, 15, 4095);
      LinkedList<FlowScope> linkedList0 = new LinkedList<FlowScope>();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      LinkedDirectedGraph.createWithEdgeAnnotations();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Key", jSTypeNative0);
      ImmutableMap.builder();
      linkedFlowScope0.equals(codingConvention_AssertionFunctionSpec1);
      Node node1 = new Node(103, 36, (-124));
      typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      // Undeclared exception!
      try { 
        typeInference1.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DEC : number does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      ControlFlowGraph<Node> controlFlowGraph1 = typeInference0.getCfg();
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph1, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap1);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      Node node1 = new Node(152, 145, 114);
      // Undeclared exception!
      try { 
        typeInference1.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DEBUGGER 145 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.jon.JONArray", "org.jon.JONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Key");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Element", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("f|O?d(u");
      linkedFlowScope1.createChildFlowScope();
      Node node1 = new Node(5, 32768, 400000);
      FlowScope flowScope1 = typeInference0.createEntryLattice();
      typeInference0.branchedFlowThrough(node0, flowScope1);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 5
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.json.JSONArray");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(16, 50, 123);
      Node node2 = new Node(142, node0, node0, node1, 32, 158);
      node2.getDirectives();
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 142
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("3uMpYzVB", codingConvention_AssertionFunctionSpec0);
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_FALSE;
      controlFlowGraph0.isConnected(node0, (ControlFlowGraph.Branch) controlFlowGraph_Branch0, node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      linkedFlowScope2.createChildFlowScope();
      Node node1 = new Node(151, 57, 50);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 151
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("3uMpYzVB", codingConvention_AssertionFunctionSpec0);
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_FALSE;
      controlFlowGraph0.isConnected(node0, (ControlFlowGraph.Branch) controlFlowGraph_Branch0, node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      Node node1 = new Node(151, 57, 50);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 151
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(38, 33, 4);
      typeInference0.createEntryLattice();
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      // Undeclared exception!
      try { 
        typeInference0.flowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 33 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      compiler0.getTypeRegistry();
      Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("x;4");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("msg.modify.sealed", codingConvention_AssertionFunctionSpec1);
      Scope scope1 = Scope.createLatticeBottom(node0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_TRUE;
      controlFlowGraph0.isConnected(node0, (ControlFlowGraph.Branch) controlFlowGraph_Branch0, node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      linkedFlowScope1.createChildFlowScope();
      LinkedFlowScope linkedFlowScope3 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope linkedFlowScope4 = LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope4.createChildFlowScope();
      Node node1 = new Node(83, 12, 48);
      Node node2 = new Node(55, node1, node0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 55
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      LinkedDirectedGraph.createWithEdgeAnnotations();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(55, 8, (-976));
      TypeInference typeInference2 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedList<FlowScope> linkedList0 = new LinkedList<FlowScope>();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 55
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSOArGray", "org.json.JSOArGray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Element", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(132, 56, 2717);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      codingConvention_AssertionFunctionSpec0.getAssertedType(node0, jSTypeRegistry0);
      Node node2 = new Node(4, node0, node0, node0, 281, 138);
      node1.getDirectives();
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RETURN 281 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.json.JSONArray");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      LinkedFlowScope linkedFlowScope3 = LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope3.createChildFlowScope();
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope4 = new LinkedFlowScope(linkedFlowScope3);
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("com.google.javascript.jscomp.TypeInference$1");
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(125, 131, 4983);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BLOCK 131 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = new Node(125, 15, 38);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BLOCK 15 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSOArGray", "org.json.JSOArGray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      compiler0.getTopScope();
      LinkedFlowScope.createEntryLattice((Scope) null);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(127, 51, (-768));
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 127
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      LinkedDirectedGraph.createWithEdgeAnnotations();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Key", jSTypeNative0);
      ImmutableMap.builder();
      linkedFlowScope0.equals(codingConvention_AssertionFunctionSpec1);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = new Node(127, 40, 29);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 127
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("org.json.JSONArray");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
      ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope0.equals(immutableSortedMap0);
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(133, 43, 46);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 133
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("org.json.JSONArray");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope0.equals(immutableSortedMap0);
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(133, 43, 46);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 133
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(30, node0, 4, 47);
      node1.toString();
      googleCodingConvention0.getClassesDefinedByCall(node1);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      codingConvention_AssertionFunctionSpec0.getAssertedType(node0, jSTypeRegistry0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      typeInference0.flowThrough(node1, linkedFlowScope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      Node node2 = new Node(82, 2, 82);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      // Undeclared exception!
      try { 
        typeInference1.branchedFlowThrough(node2, flowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 82
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(57, 400000, (-4772));
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      compiler0.getRoot();
      // Undeclared exception!
      try { 
        typeInference0.flowThrough((Node) null, linkedFlowScope1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("FZZ B-e$nO");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = new Node(147, 49, (-56));
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GETTER_DEF does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.BOTH;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, true);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      linkedFlowScope0.createChildFlowScope();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node1 = new Node(29, 1, 54);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec((String) null);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("f|O?d(u", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      linkedFlowScope2.createChildFlowScope();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec((String) null);
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(29, 15, 30);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      Node node1 = new Node(115, 54, 109);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      // Undeclared exception!
      try { 
        typeInference1.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FOR 54 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = new Node(115, 54, 109);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      // Undeclared exception!
      try { 
        typeInference1.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FOR 54 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(30, node0, 4, 47);
      node1.toString();
      googleCodingConvention0.getClassesDefinedByCall(node1);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      codingConvention_AssertionFunctionSpec0.getAssertedType(node0, jSTypeRegistry0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      typeInference0.flowThrough(node1, linkedFlowScope0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Key", jSTypeNative0);
      linkedFlowScope0.equals(codingConvention_AssertionFunctionSpec1);
      linkedFlowScope0.createChildFlowScope();
      linkedFlowScope0.createChildFlowScope();
      immutableSortedMap0.keySet();
      Node node2 = new Node(130, 3, 29);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      compiler0.getTypeRegistry();
      codingConvention_AssertionFunctionSpec0.getAssertedType(node0, jSTypeRegistry0);
      Node node1 = new Node(30, node0, node0, node0, 142, 100);
      node1.getDirectives();
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      typeInference0.branchedFlowThrough(node0, linkedFlowScope1);
      typeInference0.branchedFlowThrough(node0, linkedFlowScope1);
      System.setCurrentTimeMillis((-5053L));
      typeInference0.createEntryLattice();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NEW 142 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(123, 38, 4831);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference1.createEntryLattice();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 123
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(123, 38, 4831);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference1.createEntryLattice();
      FlowScope flowScope1 = typeInference1.flowThrough(node0, flowScope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 123
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      Scope scope2 = Scope.createGlobalScope(node0);
      assertNotNull(scope2);
      assertNotSame(scope2, scope0);
      assertNotSame(scope2, scope1);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(scope2.isGlobal());
      assertEquals(0, scope2.getVarCount());
      assertFalse(scope2.isLocal());
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      FlowScope flowScope1 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(flowScope1, flowScope0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      FlowScope flowScope2 = flowScope0.createChildFlowScope();
      assertNotNull(flowScope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, flowScope2);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, flowScope1);
      assertNotSame(flowScope0, flowScope2);
      assertNotSame(flowScope2, linkedFlowScope0);
      assertNotSame(flowScope2, flowScope0);
      assertNotSame(flowScope2, flowScope1);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(flowScope0.equals((Object)flowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope2.equals((Object)flowScope1));
      assertTrue(flowScope2.equals((Object)linkedFlowScope0));
      assertTrue(flowScope2.equals((Object)flowScope0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      Node node1 = new Node(116, 37, (-1));
      assertNotNull(node1);
      assertFalse(node1.isCatch());
      assertFalse(node1.isDebugger());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertTrue(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertEquals(116, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.equals((Object)node0));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      FlowScope flowScope3 = typeInference0.createEntryLattice();
      assertNotNull(flowScope3);
      assertNotSame(flowScope3, linkedFlowScope0);
      assertNotSame(flowScope3, flowScope0);
      assertNotSame(flowScope3, flowScope1);
      assertNotSame(flowScope3, flowScope2);
      assertNotSame(node0, node1);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(flowScope3.equals((Object)flowScope2));
      assertTrue(flowScope3.equals((Object)flowScope1));
      assertTrue(flowScope3.equals((Object)flowScope0));
      assertTrue(flowScope3.equals((Object)linkedFlowScope0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference1);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(typeInference1.equals((Object)typeInference0));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      FlowScope flowScope4 = typeInference0.flowThrough(node1, flowScope0);
      assertNotNull(flowScope4);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(flowScope4, flowScope0);
      assertNotSame(flowScope4, linkedFlowScope0);
      assertNotSame(flowScope4, flowScope3);
      assertNotSame(flowScope4, flowScope2);
      assertNotSame(flowScope4, flowScope1);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(typeInference0, typeInference1);
      assertNotSame(linkedFlowScope0, flowScope3);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope4);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, flowScope2);
      assertNotSame(flowScope0, flowScope4);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, flowScope1);
      assertNotSame(flowScope0, flowScope3);
      assertNotSame(flowScope0, flowScope2);
      assertFalse(node1.isCatch());
      assertFalse(node1.isDebugger());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertTrue(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertEquals(116, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertTrue(flowScope4.equals((Object)flowScope2));
      assertTrue(flowScope4.equals((Object)flowScope1));
      assertTrue(flowScope4.equals((Object)flowScope0));
      assertTrue(flowScope4.equals((Object)flowScope3));
      assertTrue(flowScope4.equals((Object)linkedFlowScope0));
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(typeInference0.equals((Object)typeInference1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope3));
      assertTrue(flowScope0.equals((Object)flowScope3));
      assertTrue(flowScope0.equals((Object)flowScope2));
      assertTrue(flowScope0.equals((Object)flowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      assertNotNull(list0);
      assertNotSame(node0, node1);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(typeInference0, typeInference1);
      assertNotSame(linkedFlowScope0, flowScope3);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope4);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, flowScope2);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertTrue(node0.isScript());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(node0.equals((Object)node1));
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(typeInference0.equals((Object)typeInference1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope4));
      assertTrue(linkedFlowScope0.equals((Object)flowScope3));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      System.setCurrentTimeMillis(54);
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      assertSame(booleanLiteralSet0, booleanLiteralSet1);
      assertSame(booleanLiteralSet1, booleanLiteralSet0);
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInc());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInc());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInc());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInc());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInc());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Scope scope2 = Scope.createGlobalScope(node0);
      assertNotNull(scope2);
      assertNotSame(scope2, scope0);
      assertNotSame(scope2, scope1);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInc());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals(0, scope2.getVarCount());
      assertTrue(scope2.isGlobal());
      assertFalse(scope2.isLocal());
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInc());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInc());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      FlowScope flowScope1 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(flowScope1, flowScope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInc());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      FlowScope flowScope2 = flowScope0.createChildFlowScope();
      assertNotNull(flowScope2);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(linkedFlowScope0, flowScope2);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, flowScope2);
      assertNotSame(flowScope0, flowScope1);
      assertNotSame(flowScope2, linkedFlowScope0);
      assertNotSame(flowScope2, flowScope1);
      assertNotSame(flowScope2, flowScope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInc());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)flowScope1));
      assertTrue(flowScope2.equals((Object)flowScope1));
      assertTrue(flowScope2.equals((Object)flowScope0));
      assertTrue(flowScope2.equals((Object)linkedFlowScope0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node1 = new Node(116, 37, (-1));
      assertNotNull(node1);
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertEquals(116, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isInc());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertTrue(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.equals((Object)node0));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      FlowScope flowScope3 = typeInference0.createEntryLattice();
      assertNotNull(flowScope3);
      assertNotSame(flowScope3, flowScope1);
      assertNotSame(flowScope3, linkedFlowScope0);
      assertNotSame(flowScope3, flowScope2);
      assertNotSame(flowScope3, flowScope0);
      assertNotSame(node0, node1);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInc());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertTrue(flowScope3.equals((Object)flowScope0));
      assertTrue(flowScope3.equals((Object)flowScope2));
      assertTrue(flowScope3.equals((Object)flowScope1));
      assertTrue(flowScope3.equals((Object)linkedFlowScope0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference1);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInc());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(typeInference1.equals((Object)typeInference0));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      FlowScope flowScope4 = typeInference0.flowThrough(node1, flowScope0);
      assertNotNull(flowScope4);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(flowScope4, flowScope0);
      assertNotSame(flowScope4, flowScope1);
      assertNotSame(flowScope4, flowScope3);
      assertNotSame(flowScope4, flowScope2);
      assertNotSame(flowScope4, linkedFlowScope0);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(typeInference0, typeInference1);
      assertNotSame(linkedFlowScope0, flowScope2);
      assertNotSame(linkedFlowScope0, flowScope3);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, flowScope4);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, flowScope2);
      assertNotSame(flowScope0, flowScope1);
      assertNotSame(flowScope0, flowScope4);
      assertNotSame(flowScope0, flowScope3);
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertEquals(116, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isInc());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertTrue(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInc());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertTrue(flowScope4.equals((Object)flowScope3));
      assertTrue(flowScope4.equals((Object)linkedFlowScope0));
      assertTrue(flowScope4.equals((Object)flowScope1));
      assertTrue(flowScope4.equals((Object)flowScope2));
      assertTrue(flowScope4.equals((Object)flowScope0));
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(typeInference0.equals((Object)typeInference1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope3));
      assertTrue(linkedFlowScope0.equals((Object)flowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)flowScope3));
      assertTrue(flowScope0.equals((Object)flowScope1));
      assertTrue(flowScope0.equals((Object)flowScope2));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      assertNotNull(list0);
      assertNotSame(node0, node1);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(typeInference0, typeInference1);
      assertNotSame(linkedFlowScope0, flowScope2);
      assertNotSame(linkedFlowScope0, flowScope3);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, flowScope4);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInc());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(node0.equals((Object)node1));
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(typeInference0.equals((Object)typeInference1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope4));
      assertTrue(linkedFlowScope0.equals((Object)flowScope3));
      assertTrue(linkedFlowScope0.equals((Object)flowScope2));
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      System.setCurrentTimeMillis(54);
      List<FlowScope> list1 = typeInference0.branchedFlowThrough(node0, flowScope2);
      assertNotNull(list1);
      assertNotSame(node0, node1);
      assertNotSame(list1, list0);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(typeInference0, typeInference1);
      assertNotSame(linkedFlowScope0, flowScope2);
      assertNotSame(linkedFlowScope0, flowScope3);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, flowScope4);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, flowScope2);
      assertNotSame(flowScope0, flowScope1);
      assertNotSame(flowScope0, flowScope4);
      assertNotSame(flowScope0, flowScope3);
      assertNotSame(flowScope2, linkedFlowScope0);
      assertNotSame(flowScope2, flowScope1);
      assertNotSame(flowScope2, flowScope3);
      assertNotSame(flowScope2, flowScope4);
      assertNotSame(flowScope2, flowScope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInc());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(node0.equals((Object)node1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(typeInference0.equals((Object)typeInference1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope4));
      assertTrue(linkedFlowScope0.equals((Object)flowScope3));
      assertTrue(linkedFlowScope0.equals((Object)flowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)flowScope3));
      assertTrue(flowScope0.equals((Object)flowScope1));
      assertTrue(flowScope0.equals((Object)flowScope4));
      assertTrue(flowScope0.equals((Object)flowScope2));
      assertTrue(flowScope2.equals((Object)flowScope1));
      assertTrue(flowScope2.equals((Object)flowScope3));
      assertTrue(flowScope2.equals((Object)flowScope0));
      assertTrue(flowScope2.equals((Object)linkedFlowScope0));
      assertTrue(flowScope2.equals((Object)flowScope4));
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      assertNotNull(linkedFlowScope2);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      Node node1 = new Node(143, 2, 42);
      assertNotNull(node1);
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIn());
      assertEquals(42, node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertEquals(143, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertEquals(8234, node1.getSourcePosition());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 143
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertEquals(132, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      
      Node node1 = new Node(143, 2, 42);
      assertNotNull(node1);
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(143, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTrue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTry());
      assertFalse(node1.isOr());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isScript());
      assertFalse(node1.isDefaultCase());
      assertEquals(8234, node1.getSourcePosition());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabel());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertEquals(42, node1.getCharno());
      assertFalse(node1.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 143
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      boolean boolean0 = false;
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("\"=3)T]O=g]A'Uv5B");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("\"=3)T]O=g]A'Uv5B", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"=3)T]O=g]A'Uv5B");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("l:u*[w.;c%<u3yL", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("\"=3)T]O=g]A'Uv5B", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("\"=3)T]O=g]A'Uv5B", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope2);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node node1 = new Node(36);
      assertNotNull(node1);
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertEquals(36, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("org.json.JSONArray");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.FALSE;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertSame(booleanLiteralSet1, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet0);
      assertSame(booleanLiteralSet2, booleanLiteralSet1);
      assertEquals(BooleanLiteralSet.FALSE, booleanLiteralSet2);
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet0));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope0, scope1);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      LinkedFlowScope linkedFlowScope2 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope2);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertNotSame(scope0, scope1);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(scope0, scope1);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      FlowScope flowScope1 = linkedFlowScope1.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, flowScope1);
      assertNotSame(flowScope1, linkedFlowScope1);
      assertNotSame(flowScope1, linkedFlowScope2);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(scope0, scope1);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope2));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope1));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Node node1 = new Node(53, 798, 2);
      assertNotNull(node1);
      assertFalse(node1.isIf());
      assertEquals(53, node1.getType());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isTrue());
      assertEquals(798, node1.getLineno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(3268610, node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.equals((Object)node0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      assertNotNull(typeInference1);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(typeInference1.equals((Object)typeInference0));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      FlowScope flowScope2 = typeInference1.createEntryLattice();
      assertNotNull(flowScope2);
      assertNotSame(node0, node1);
      assertSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(typeInference1, typeInference0);
      assertNotSame(flowScope2, linkedFlowScope0);
      assertNotSame(flowScope2, linkedFlowScope2);
      assertNotSame(flowScope2, flowScope0);
      assertNotSame(flowScope2, linkedFlowScope1);
      assertNotSame(flowScope2, flowScope1);
      assertNotSame(scope0, scope1);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(typeInference1.equals((Object)typeInference0));
      assertTrue(flowScope2.equals((Object)linkedFlowScope2));
      assertTrue(flowScope2.equals((Object)flowScope1));
      assertTrue(flowScope2.equals((Object)flowScope0));
      assertTrue(flowScope2.equals((Object)linkedFlowScope0));
      assertTrue(flowScope2.equals((Object)linkedFlowScope1));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      TypeInference typeInference2 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope1, immutableSortedMap0);
      assertNotNull(typeInference2);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertFalse(node0.equals((Object)node1));
      assertFalse(typeInference2.equals((Object)typeInference1));
      assertFalse(typeInference2.equals((Object)typeInference0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      FlowScope flowScope3 = typeInference2.flowThrough(node1, linkedFlowScope1);
      assertNotNull(flowScope3);
      assertNotSame(node0, node1);
      assertSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertNotSame(linkedFlowScope0, flowScope3);
      assertNotSame(linkedFlowScope0, flowScope2);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(linkedFlowScope1, flowScope2);
      assertNotSame(linkedFlowScope1, flowScope3);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, flowScope1);
      assertNotSame(node1, node0);
      assertNotSame(typeInference2, typeInference1);
      assertNotSame(typeInference2, typeInference0);
      assertNotSame(flowScope3, linkedFlowScope0);
      assertNotSame(flowScope3, linkedFlowScope2);
      assertNotSame(flowScope3, flowScope0);
      assertNotSame(flowScope3, linkedFlowScope1);
      assertNotSame(flowScope3, flowScope1);
      assertNotSame(flowScope3, flowScope2);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isScript());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertFalse(node1.isIf());
      assertEquals(53, node1.getType());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isTrue());
      assertEquals(798, node1.getLineno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(3268610, node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node0.equals((Object)node1));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)flowScope1));
      assertTrue(linkedFlowScope1.equals((Object)flowScope2));
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(typeInference2.equals((Object)typeInference1));
      assertFalse(typeInference2.equals((Object)typeInference0));
      assertTrue(flowScope3.equals((Object)linkedFlowScope1));
      assertTrue(flowScope3.equals((Object)flowScope1));
      assertTrue(flowScope3.equals((Object)linkedFlowScope0));
      assertTrue(flowScope3.equals((Object)flowScope2));
      assertTrue(flowScope3.equals((Object)linkedFlowScope2));
      assertTrue(flowScope3.equals((Object)flowScope0));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      
      // Undeclared exception!
      try { 
        typeInference1.branchedFlowThrough(node0, (FlowScope) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      LinkedDirectedGraph<NoObjectType, EnumType> linkedDirectedGraph0 = LinkedDirectedGraph.createWithEdgeAnnotations();
      assertNotNull(linkedDirectedGraph0);
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertTrue(linkedDirectedGraph0.isDirected());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Key", jSTypeNative0);
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Key", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      ImmutableMap.Builder<StringType, UnionType> immutableMap_Builder0 = ImmutableMap.builder();
      assertNotNull(immutableMap_Builder0);
      
      boolean boolean0 = linkedFlowScope0.equals(codingConvention_AssertionFunctionSpec1);
      assertNotSame(codingConvention_AssertionFunctionSpec1, codingConvention_AssertionFunctionSpec0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals("Object#Key", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(boolean0);
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      
      FlowScope flowScope1 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node node1 = new Node(108, 37, (-2253));
      assertNotNull(node1);
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertTrue(node1.isIf());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.isExprResult());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasOneChild());
      assertEquals(108, node1.getType());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.equals((Object)node0));
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      FlowScope flowScope2 = typeInference0.createEntryLattice();
      assertNotNull(flowScope2);
      assertNotSame(node0, node1);
      assertNotSame(flowScope2, flowScope0);
      assertNotSame(flowScope2, linkedFlowScope0);
      assertNotSame(flowScope2, flowScope1);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(node0.equals((Object)node1));
      assertTrue(flowScope2.equals((Object)flowScope0));
      assertTrue(flowScope2.equals((Object)flowScope1));
      assertTrue(flowScope2.equals((Object)linkedFlowScope0));
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      assertNotNull(reorderConstantExpression0);
      
      Node node2 = new Node(53, node1, 55, 51);
      assertNotNull(node2);
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertTrue(node1.isIf());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.isExprResult());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasOneChild());
      assertEquals(108, node1.getType());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertEquals(53, node2.getType());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isString());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThrow());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isInc());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isStringKey());
      assertEquals(225331, node2.getSourcePosition());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isVar());
      assertEquals(51, node2.getCharno());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertEquals(55, node2.getLineno());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, flowScope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 53
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      assertNotNull(linkedFlowScope2);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      LinkedFlowScope linkedFlowScope3 = new LinkedFlowScope(linkedFlowScope1);
      assertNotNull(linkedFlowScope3);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope3.equals((Object)flowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope2));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      FlowScope flowScope1 = linkedFlowScope3.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope3);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, flowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope3);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(linkedFlowScope3, linkedFlowScope0);
      assertNotSame(linkedFlowScope3, flowScope1);
      assertNotSame(linkedFlowScope3, linkedFlowScope1);
      assertNotSame(linkedFlowScope3, flowScope0);
      assertNotSame(linkedFlowScope3, linkedFlowScope2);
      assertNotSame(flowScope1, linkedFlowScope1);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(flowScope1, linkedFlowScope2);
      assertNotSame(flowScope1, linkedFlowScope3);
      assertNotSame(flowScope1, flowScope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope3.equals((Object)flowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope2));
      assertTrue(flowScope1.equals((Object)linkedFlowScope3));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope1));
      assertTrue(flowScope1.equals((Object)linkedFlowScope2));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      Node node1 = new Node(36, 1, 29);
      assertNotNull(node1);
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertEquals(29, node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertEquals(4125, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertEquals(36, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      boolean boolean0 = true;
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_FALSE;
      boolean boolean1 = controlFlowGraph0.isConnected(node0, (ControlFlowGraph.Branch) controlFlowGraph_Branch0, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      assertNotNull(linkedFlowScope2);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      Node node1 = new Node(43, 57, 151);
      assertNotNull(node1);
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertEquals(57, node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.isFalse());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertEquals(151, node1.getCharno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertEquals(43, node1.getType());
      assertEquals(233623, node1.getSourcePosition());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference1);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSetterDef());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(typeInference1.equals((Object)typeInference0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      // Undeclared exception!
      try { 
        typeInference1.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FALSE 57 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.isLocal());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("7~kwYWI7kD{~8");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("7~kwYWI7kD{~8", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("7~kwYWI7kD{~8", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("7~kwYWI7kD{~8", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Scope scope2 = Scope.createGlobalScope(node0);
      assertNotNull(scope2);
      assertNotSame(scope2, scope1);
      assertNotSame(scope2, scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertEquals(0, scope2.getVarCount());
      assertTrue(scope2.isGlobal());
      assertFalse(scope2.isLocal());
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      FlowScope flowScope1 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(flowScope1, flowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Node node1 = new Node(43, 2, 55);
      assertNotNull(node1);
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isOr());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertEquals(55, node1.getCharno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertTrue(node1.isFalse());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertEquals(43, node1.getType());
      assertFalse(node1.isFor());
      assertEquals(8247, node1.getSourcePosition());
      assertFalse(node1.equals((Object)node0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Iterable<Node> iterable0 = node1.children();
      assertNotNull(iterable0);
      assertNotSame(node1, node0);
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isOr());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertEquals(55, node1.getCharno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertTrue(node1.isFalse());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertEquals(43, node1.getType());
      assertFalse(node1.isFor());
      assertEquals(8247, node1.getSourcePosition());
      assertFalse(iterable0.contains(node0));
      assertFalse(node1.equals((Object)node0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      FlowScope flowScope2 = typeInference0.createEntryLattice();
      assertNotNull(flowScope2);
      assertNotSame(flowScope2, flowScope1);
      assertNotSame(flowScope2, linkedFlowScope0);
      assertNotSame(flowScope2, flowScope0);
      assertNotSame(node0, node1);
      assertNotSame(scope0, scope2);
      assertNotSame(scope0, scope1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("7~kwYWI7kD{~8", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertTrue(flowScope2.equals((Object)flowScope0));
      assertTrue(flowScope2.equals((Object)linkedFlowScope0));
      assertTrue(flowScope2.equals((Object)flowScope1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FALSE 2 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertTrue(node0.isScript());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertTrue(node0.isScript());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertTrue(node0.isScript());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.json.JSONArray");
      assertFalse(boolean0);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertTrue(node0.isScript());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap1);
      assertNotSame(immutableSortedMap1, immutableSortedMap0);
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(immutableSortedMap1.equals((Object)immutableSortedMap0));
      
      ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0, "NDR#pc&:f5k^", codingConvention_AssertionFunctionSpec0, "org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableMap0);
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(3, immutableMap0.size());
      
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableMap0);
      assertNotNull(typeInference1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertTrue(node0.isScript());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(3, immutableMap0.size());
      assertFalse(typeInference1.equals((Object)typeInference0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertTrue(node0.isScript());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertTrue(node0.isScript());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope2);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertTrue(node0.isScript());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Node node1 = new Node(50, 4, 536870912);
      assertNotNull(node1);
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertEquals(20479, node1.getSourcePosition());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertEquals(4, node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertEquals(4095, node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(50, node1.getType());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.equals((Object)node0));
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope2);
      assertNotNull(list0);
      assertNotSame(node0, node1);
      assertNotSame(immutableSortedMap0, immutableSortedMap1);
      assertNotSame(typeInference0, typeInference1);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertTrue(node0.isScript());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(immutableSortedMap0.equals((Object)immutableSortedMap1));
      assertFalse(typeInference0.equals((Object)typeInference1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      int int0 = node1.getSourceOffset();
      assertNotSame(node1, node0);
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertEquals(20479, node1.getSourcePosition());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertEquals(4, node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertEquals(4095, node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(50, node1.getType());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertEquals((-1), int0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      LinkedFlowScope linkedFlowScope3 = new LinkedFlowScope(linkedFlowScope2);
      assertNotNull(linkedFlowScope3);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertTrue(node0.isScript());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(node0.equals((Object)node1));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      boolean boolean1 = immutableMap0.equals(linkedFlowScope2);
      assertNotSame(node0, node1);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope0, linkedFlowScope3);
      assertNotSame(linkedFlowScope2, linkedFlowScope3);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertTrue(node0.isScript());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(3, immutableMap0.size());
      assertFalse(boolean1);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec(".");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals(".", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.json.JSONArray");
      assertFalse(boolean0);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals(".", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(".", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      assertNotNull(linkedFlowScope2);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      FlowScope flowScope0 = linkedFlowScope2.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertNotSame(linkedFlowScope2, flowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      Node node1 = new Node(50, 1073741823, 57);
      assertNotNull(node1);
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertEquals(57, node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isNE());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-4039), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertEquals(1048575, node1.getLineno());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(50, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.equals((Object)node0));
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.json.JSONArray");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.FALSE;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet1, booleanLiteralSet0, true);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertSame(booleanLiteralSet1, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet0);
      assertSame(booleanLiteralSet2, booleanLiteralSet1);
      assertEquals(BooleanLiteralSet.FALSE, booleanLiteralSet2);
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet0));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      assertNotNull(linkedFlowScope_FlowScopeJoinOp0);
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope0, scope1);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(scope0, scope1);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      
      FlowScope flowScope1 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(scope0, scope1);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(flowScope1, flowScope0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertFalse(scope0.equals((Object)scope1));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      
      Node node1 = new Node(52, 4095, (-2048));
      assertNotNull(node1);
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertEquals(52, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      FlowScope flowScope2 = typeInference0.flowThrough(node1, flowScope0);
      assertNotNull(flowScope2);
      assertNotSame(node0, node1);
      assertNotSame(scope0, scope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, flowScope2);
      assertNotSame(flowScope0, flowScope2);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, flowScope1);
      assertNotSame(node1, node0);
      assertNotSame(flowScope2, linkedFlowScope0);
      assertNotSame(flowScope2, flowScope1);
      assertNotSame(flowScope2, flowScope0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertEquals(52, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node0.equals((Object)node1));
      assertFalse(scope0.equals((Object)scope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)flowScope1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope2.equals((Object)flowScope0));
      assertTrue(flowScope2.equals((Object)linkedFlowScope0));
      assertTrue(flowScope2.equals((Object)flowScope1));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      FlowScope flowScope3 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope2, true);
      assertNotNull(flowScope3);
      assertNotSame(node0, node1);
      assertNotSame(scope0, scope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, flowScope3);
      assertNotSame(linkedFlowScope0, flowScope2);
      assertNotSame(flowScope0, flowScope2);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, flowScope1);
      assertNotSame(flowScope0, flowScope3);
      assertNotSame(node1, node0);
      assertNotSame(flowScope2, linkedFlowScope0);
      assertNotSame(flowScope2, flowScope1);
      assertNotSame(flowScope2, flowScope0);
      assertSame(flowScope2, flowScope3);
      assertNotSame(flowScope3, flowScope1);
      assertNotSame(flowScope3, linkedFlowScope0);
      assertNotSame(flowScope3, flowScope0);
      assertSame(flowScope3, flowScope2);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertEquals(52, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node0.equals((Object)node1));
      assertFalse(scope0.equals((Object)scope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope1));
      assertTrue(flowScope0.equals((Object)flowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)flowScope1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope2.equals((Object)flowScope0));
      assertTrue(flowScope2.equals((Object)linkedFlowScope0));
      assertTrue(flowScope2.equals((Object)flowScope1));
      assertTrue(flowScope3.equals((Object)linkedFlowScope0));
      assertTrue(flowScope3.equals((Object)flowScope0));
      assertTrue(flowScope3.equals((Object)flowScope1));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // INSTANCEOF : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      LinkedFlowScope linkedFlowScope2 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope2);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      FlowScope flowScope0 = linkedFlowScope2.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertNotSame(linkedFlowScope2, flowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("S.;cw 2f>");
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("S.;cw 2f>", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      FlowScope flowScope1 = linkedFlowScope1.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(flowScope1, linkedFlowScope2);
      assertNotSame(flowScope1, linkedFlowScope1);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, flowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(flowScope1.equals((Object)linkedFlowScope1));
      assertTrue(flowScope1.equals((Object)linkedFlowScope2));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      Node node1 = new Node(52, 57, 139);
      assertNotNull(node1);
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertEquals(139, node1.getCharno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isScript());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVoid());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertEquals(57, node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(233611, node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isStringKey());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertEquals(52, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.equals((Object)node0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // INSTANCEOF 57 : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.json.JSONArray");
      assertFalse(boolean0);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      assertNotNull(linkedFlowScope2);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node1 = new Node(16, 50, 140);
      assertNotNull(node1);
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertEquals(140, node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertEquals(204940, node1.getSourcePosition());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertEquals(50, node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isIn());
      assertEquals(16, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.equals((Object)node0));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = codingConvention_AssertionFunctionSpec0.getAssertedType(node1, jSTypeRegistry0);
      assertNull(jSType0);
      assertNotSame(node1, node0);
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertEquals(140, node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertEquals(204940, node1.getSourcePosition());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertEquals(50, node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isIn());
      assertEquals(16, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node1.equals((Object)node0));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      Node node2 = new Node(140, node0, node0, node1, 32, 158);
      assertNotNull(node2);
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isThrow());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isWith());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNot());
      assertFalse(node2.isHook());
      assertFalse(node2.hasOneChild());
      assertEquals(140, node2.getType());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabel());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDefaultCase());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isVoid());
      assertFalse(node2.isVar());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAdd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isCatch());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isDebugger());
      assertEquals(158, node2.getCharno());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertEquals(131230, node2.getSourcePosition());
      assertFalse(node2.isFor());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertTrue(node2.hasChildren());
      assertEquals(32, node2.getLineno());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      assertFalse(node2.isIn());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertEquals(140, node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertEquals(204940, node1.getSourcePosition());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertEquals(50, node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isIn());
      assertEquals(16, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      Set<String> set0 = node2.getDirectives();
      assertNull(set0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isThrow());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isWith());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNot());
      assertFalse(node2.isHook());
      assertFalse(node2.hasOneChild());
      assertEquals(140, node2.getType());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabel());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDefaultCase());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isVoid());
      assertFalse(node2.isVar());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAdd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isCatch());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isDebugger());
      assertEquals(158, node2.getCharno());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertEquals(131230, node2.getSourcePosition());
      assertFalse(node2.isFor());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertTrue(node2.hasChildren());
      assertEquals(32, node2.getLineno());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      assertFalse(node2.isIn());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssign());
      assertEquals(140, node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertEquals(204940, node1.getSourcePosition());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertEquals(50, node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isIn());
      assertEquals(16, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      LinkedFlowScope linkedFlowScope3 = new LinkedFlowScope(linkedFlowScope2);
      assertNotNull(linkedFlowScope3);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(linkedFlowScope3.equals((Object)flowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope2.equals((Object)flowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 140
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isOr());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isOr());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isOr());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.json.JSONArray");
      assertFalse(boolean0);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isOr());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isOr());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isOr());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      assertNotNull(linkedFlowScope2);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isOr());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isOr());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node1 = new Node(140, node0, node0, node0, 32, 29);
      assertNotNull(node1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isOr());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertEquals(131101, node1.getSourcePosition());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWith());
      assertEquals(29, node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertEquals(140, node1.getType());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isDec());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVar());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertEquals(32, node1.getLineno());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      
      Set<String> set0 = node1.getDirectives();
      assertNull(set0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isOr());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertEquals(131101, node1.getSourcePosition());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWith());
      assertEquals(29, node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertEquals(140, node1.getType());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isDec());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVar());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertEquals(32, node1.getLineno());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      
      LinkedFlowScope linkedFlowScope3 = new LinkedFlowScope(linkedFlowScope2);
      assertNotNull(linkedFlowScope3);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isOr());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertFalse(node0.equals((Object)node1));
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope2.equals((Object)flowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope3.equals((Object)flowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope1));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope2);
      assertNotNull(list0);
      assertNotSame(node0, node1);
      assertNotSame(linkedFlowScope1, linkedFlowScope3);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope3);
      assertNotSame(linkedFlowScope2, flowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isOr());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(node0.equals((Object)node1));
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope2.equals((Object)flowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      System.setCurrentTimeMillis(12);
      FlowScope flowScope1 = typeInference0.createEntryLattice();
      assertNotNull(flowScope1);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(flowScope1, linkedFlowScope1);
      assertNotSame(flowScope1, linkedFlowScope3);
      assertNotSame(flowScope1, linkedFlowScope2);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(node0, node1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isOr());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIf());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertTrue(flowScope1.equals((Object)linkedFlowScope1));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope2));
      assertTrue(flowScope1.equals((Object)linkedFlowScope3));
      assertFalse(node0.equals((Object)node1));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 140
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDec());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDec());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDec());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("\"=3)T]O=g]A'Uv5B");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("\"=3)T]O=g]A'Uv5B", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"=3)T]O=g]A'Uv5B");
      assertFalse(boolean0);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("l:u*[w.;c%<u3yL", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("\"=3)T]O=g]A'Uv5B", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDec());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("\"=3)T]O=g]A'Uv5B", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDec());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDec());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      LinkedFlowScope linkedFlowScope2 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope2);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDec());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDec());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      FlowScope flowScope1 = linkedFlowScope1.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(linkedFlowScope1, flowScope1);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(flowScope1, linkedFlowScope2);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(flowScope1, linkedFlowScope1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDec());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope1));
      assertTrue(flowScope1.equals((Object)linkedFlowScope2));
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      Node node1 = new Node(64, 15, 4095);
      assertNotNull(node1);
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertEquals(15, node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertEquals(4095, node1.getCharno());
      assertFalse(node1.isCall());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertEquals(65535, node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCase());
      assertTrue(node1.isObjectLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isString());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(64, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.equals((Object)node0));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      FlowScope flowScope2 = typeInference0.createEntryLattice();
      assertNotNull(flowScope2);
      assertNotSame(flowScope2, flowScope1);
      assertNotSame(flowScope2, linkedFlowScope2);
      assertNotSame(flowScope2, linkedFlowScope0);
      assertNotSame(flowScope2, linkedFlowScope1);
      assertNotSame(flowScope2, flowScope0);
      assertNotSame(node0, node1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDec());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("\"=3)T]O=g]A'Uv5B", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertTrue(flowScope2.equals((Object)linkedFlowScope0));
      assertTrue(flowScope2.equals((Object)linkedFlowScope2));
      assertTrue(flowScope2.equals((Object)flowScope0));
      assertTrue(flowScope2.equals((Object)flowScope1));
      assertTrue(flowScope2.equals((Object)linkedFlowScope1));
      assertFalse(node0.equals((Object)node1));
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDec());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("\"=3)T]O=g]A'Uv5B", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(typeInference1.equals((Object)typeInference0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      // Undeclared exception!
      try { 
        typeInference1.flowThrough(node1, flowScope2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExprResult());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      boolean boolean0 = false;
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExprResult());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExprResult());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("\"=3)T]O=g]A'Uv5B");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("\"=3)T]O=g]A'Uv5B", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"=3)T]O=g]A'Uv5B");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("l:u*[w.;c%<u3yL", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("\"=3)T]O=g]A'Uv5B", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExprResult());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals("\"=3)T]O=g]A'Uv5B", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExprResult());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExprResult());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope2);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExprResult());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExprResult());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Node node1 = new Node(109, 101, 124);
      assertNotNull(node1);
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertEquals(413820, node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertEquals(101, node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertEquals(109, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDo());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVar());
      assertEquals(124, node1.getCharno());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.equals((Object)node0));
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 109
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("\"=3)T]O=g]A'Uv5B");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("\"=3)T]O=g]A'Uv5B", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"=3)T]O=g]A'Uv5B");
      assertFalse(boolean0);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("l:u*[w.;c%<u3yL", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("\"=3)T]O=g]A'Uv5B", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals("\"=3)T]O=g]A'Uv5B", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope2);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      
      Node node1 = new Node(109, 101, 124);
      assertNotNull(node1);
      assertEquals(413820, node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertEquals(101, node1.getLineno());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertEquals(109, node1.getType());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertEquals(124, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      FlowScope flowScope1 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotNull(flowScope1);
      assertNotSame(node0, node1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(node1, node0);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(flowScope1, linkedFlowScope1);
      assertNotSame(flowScope1, linkedFlowScope2);
      assertNotSame(flowScope1, flowScope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals("\"=3)T]O=g]A'Uv5B", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(413820, node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertEquals(101, node1.getLineno());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertEquals(109, node1.getType());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertEquals(124, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node0.equals((Object)node1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope2));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope1));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 109
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isIf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isIf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isIf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isIf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isIf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isIf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      assertNotNull(linkedFlowScope2);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isIf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node1 = new Node(145, 2, 42);
      assertNotNull(node1);
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isScript());
      assertEquals(145, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isHook());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertEquals(8234, node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDefaultCase());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertEquals(42, node1.getCharno());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isIf());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.equals((Object)node0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 145
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Scope scope2 = Scope.createGlobalScope(node0);
      assertNotNull(scope2);
      assertNotSame(scope2, scope1);
      assertNotSame(scope2, scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertTrue(scope2.isGlobal());
      assertEquals(0, scope2.getVarCount());
      assertFalse(scope2.isLocal());
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      FlowScope flowScope1 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node1 = new Node(145, 38, 8);
      assertNotNull(node1);
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertEquals(8, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertEquals(155656, node1.getSourcePosition());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isFor());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertEquals(145, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertEquals(38, node1.getLineno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssign());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.equals((Object)node0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      assertNotNull(list0);
      assertNotSame(node0, node1);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(node0.equals((Object)node1));
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 145
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean1 = true;
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope2);
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node1 = new Node(8, 38, 112);
      assertNotNull(node1);
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertEquals(38, node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isWhile());
      assertEquals(8, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertEquals(155760, node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIf());
      assertEquals(112, node1.getCharno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope2);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      Node node1 = new Node(8, 38, 112);
      assertNotNull(node1);
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals(112, node1.getCharno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertEquals(38, node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertEquals(155760, node1.getSourcePosition());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertEquals(8, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.equals((Object)node0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("org.json.JSONArray");
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec2 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec2);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec2.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec0));
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec1));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Element", codingConvention_AssertionFunctionSpec2);
      assertNotNull(immutableSortedMap0);
      assertNotSame(codingConvention_AssertionFunctionSpec2, codingConvention_AssertionFunctionSpec0);
      assertNotSame(codingConvention_AssertionFunctionSpec2, codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec2.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec0));
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec1));
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec2.getFunctionName());
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec0));
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      Scope scope2 = Scope.createGlobalScope(node0);
      assertNotNull(scope2);
      assertNotSame(scope2, scope1);
      assertNotSame(scope2, scope0);
      assertEquals(0, scope2.getVarCount());
      assertTrue(scope2.isGlobal());
      assertFalse(scope2.isLocal());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      FlowScope flowScope1 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      Node node1 = new Node(47, (-17), 57);
      assertNotNull(node1);
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertEquals(47, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertTrue(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isScript());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.equals((Object)node0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      FlowScope flowScope2 = typeInference0.createEntryLattice();
      assertNotNull(flowScope2);
      assertNotSame(node0, node1);
      assertNotSame(flowScope2, flowScope0);
      assertNotSame(flowScope2, flowScope1);
      assertNotSame(flowScope2, linkedFlowScope0);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertNotSame(codingConvention_AssertionFunctionSpec2, codingConvention_AssertionFunctionSpec0);
      assertNotSame(codingConvention_AssertionFunctionSpec2, codingConvention_AssertionFunctionSpec1);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec2.getFunctionName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(flowScope2.equals((Object)flowScope0));
      assertFalse(flowScope2.equals((Object)flowScope1));
      assertFalse(flowScope2.equals((Object)linkedFlowScope0));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec0));
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertFalse(linkedFlowScope0.equals((Object)flowScope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope1));
      assertFalse(node0.equals((Object)node1));
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)flowScope1));
      assertFalse(linkedFlowScope1.equals((Object)flowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // REGEXP does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope2);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = new Node(47, (-1690), (-1183));
      assertNotNull(node1);
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isWith());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertEquals(47, node1.getType());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertTrue(node1.isRegExp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.equals((Object)node0));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(typeInference1.equals((Object)typeInference0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      FlowScope flowScope0 = typeInference1.createEntryLattice();
      assertNotNull(flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertNotSame(node0, node1);
      assertNotSame(typeInference1, typeInference0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(typeInference1.equals((Object)typeInference0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      LinkedList<FlowScope> linkedList0 = new LinkedList<FlowScope>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedFlowScope linkedFlowScope3 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope3);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope3.equals((Object)flowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope3);
      assertNotNull(list0);
      assertNotSame(linkedFlowScope3, linkedFlowScope2);
      assertNotSame(linkedFlowScope3, linkedFlowScope0);
      assertNotSame(linkedFlowScope3, flowScope0);
      assertNotSame(linkedFlowScope3, linkedFlowScope1);
      assertNotSame(node0, node1);
      assertNotSame(typeInference0, typeInference1);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope0, linkedFlowScope3);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope3.equals((Object)flowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(typeInference0.equals((Object)typeInference1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      FlowScope flowScope1 = typeInference0.flowThrough(node1, linkedFlowScope1);
      assertNotNull(flowScope1);
      assertNotSame(node0, node1);
      assertNotSame(flowScope1, linkedFlowScope2);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(flowScope1, linkedFlowScope3);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(flowScope1, linkedFlowScope1);
      assertNotSame(typeInference0, typeInference1);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, linkedFlowScope3);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, flowScope1);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(node1, node0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isWith());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertEquals(47, node1.getType());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertTrue(node1.isRegExp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node0.equals((Object)node1));
      assertTrue(flowScope1.equals((Object)linkedFlowScope2));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope1));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope3));
      assertFalse(typeInference0.equals((Object)typeInference1));
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      assertNotNull(jqueryCodingConvention0);
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      assertNotNull(googleCodingConvention1);
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention1.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention1.getExportPropertyFunction());
      assertEquals("window", googleCodingConvention1.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention1.getExportSymbolFunction());
      assertNull(googleCodingConvention1.getDelegateSuperclassName());
      assertFalse(googleCodingConvention1.equals((Object)googleCodingConvention0));
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Key");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Key", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("]HS$*U)QtB", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Key", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals("Object#Key", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      assertNotNull(linkedFlowScope2);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertFalse(scope1.equals((Object)scope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node1 = new Node(48, 400000, 8);
      assertNotNull(node1);
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCast());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertEquals(48, node1.getType());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertEquals(8, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertEquals(1638400008, node1.getSourcePosition());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertEquals(400000, node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 48
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      Scope scope2 = Scope.createGlobalScope(node0);
      assertNotNull(scope2);
      assertNotSame(scope2, scope1);
      assertNotSame(scope2, scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertTrue(scope2.isGlobal());
      assertFalse(scope2.isLocal());
      assertEquals(0, scope2.getVarCount());
      assertFalse(scope2.equals((Object)scope1));
      assertFalse(scope2.equals((Object)scope0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      Node node1 = new Node(48, node0);
      assertNotNull(node1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isSetterDef());
      assertEquals(48, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isName());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 48
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      assertNotNull(jqueryCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      assertNotNull(jqueryCodingConvention1);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", jqueryCodingConvention1.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention1.getExportSymbolFunction());
      assertNull(jqueryCodingConvention1.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", jqueryCodingConvention1.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention1.getGlobalObject());
      assertFalse(jqueryCodingConvention1.equals((Object)jqueryCodingConvention0));
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry1);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", jqueryCodingConvention1.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention1.getExportSymbolFunction());
      assertNull(jqueryCodingConvention1.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", jqueryCodingConvention1.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention1.getGlobalObject());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jqueryCodingConvention0.equals((Object)jqueryCodingConvention1));
      assertFalse(jqueryCodingConvention1.equals((Object)jqueryCodingConvention0));
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("2L5IYt|~^)5L");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("2L5IYt|~^)5L", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec2 = new CodingConvention.AssertionFunctionSpec((String) null);
      assertNotNull(codingConvention_AssertionFunctionSpec2);
      assertNull(codingConvention_AssertionFunctionSpec2.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Element", codingConvention_AssertionFunctionSpec2);
      assertNotNull(immutableSortedMap0);
      assertNotSame(codingConvention_AssertionFunctionSpec2, codingConvention_AssertionFunctionSpec1);
      assertNotSame(codingConvention_AssertionFunctionSpec2, codingConvention_AssertionFunctionSpec0);
      assertNull(codingConvention_AssertionFunctionSpec2.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertNull(codingConvention_AssertionFunctionSpec2.getFunctionName());
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec0));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      
      Scope scope2 = Scope.createGlobalScope(node0);
      assertNotNull(scope2);
      assertNotSame(scope2, scope0);
      assertNotSame(scope2, scope1);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, scope2.getVarCount());
      assertTrue(scope2.isGlobal());
      assertFalse(scope2.isLocal());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      
      FlowScope flowScope1 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(scope0, scope1);
      assertNotSame(scope0, scope2);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      
      Node node1 = new Node(32, 132, (-67));
      assertNotNull(node1);
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertEquals(32, node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.equals((Object)node0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      
      FlowScope flowScope2 = typeInference0.createEntryLattice();
      assertNotNull(flowScope2);
      assertNotSame(node0, node1);
      assertNotSame(flowScope2, flowScope0);
      assertNotSame(flowScope2, linkedFlowScope0);
      assertNotSame(flowScope2, flowScope1);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertNotSame(codingConvention_AssertionFunctionSpec2, codingConvention_AssertionFunctionSpec1);
      assertNotSame(codingConvention_AssertionFunctionSpec2, codingConvention_AssertionFunctionSpec0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertNull(codingConvention_AssertionFunctionSpec2.getFunctionName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(flowScope2.equals((Object)flowScope0));
      assertFalse(flowScope2.equals((Object)linkedFlowScope0));
      assertFalse(flowScope2.equals((Object)flowScope1));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec0));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertTrue(node0.isScript());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(node0.equals((Object)node1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope1));
      assertFalse(linkedFlowScope0.equals((Object)flowScope2));
      assertTrue(linkedFlowScope1.equals((Object)flowScope1));
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertFalse(linkedFlowScope1.equals((Object)flowScope2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope0.equals((Object)scope2));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TYPEOF : string does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Key", jSTypeNative0);
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Key", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      FlowScope flowScope1 = linkedFlowScope1.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, flowScope1);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(flowScope1, linkedFlowScope1);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertTrue(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      Node node1 = new Node(57, 1, (-407));
      assertNotNull(node1);
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertEquals(57, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVar());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isWith());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.equals((Object)node0));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSOArGray", "org.json.JSOArGray");
      assertNotNull(node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Element", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      assertNotNull(linkedFlowScope2);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      FlowScope flowScope0 = linkedFlowScope2.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertNotSame(linkedFlowScope2, flowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("org.json.JSOArGray");
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("org.json.JSOArGray", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      FlowScope flowScope1 = linkedFlowScope1.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(linkedFlowScope1, flowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(flowScope1, linkedFlowScope2);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(flowScope1, linkedFlowScope1);
      assertNotSame(flowScope1, flowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope2));
      assertTrue(flowScope1.equals((Object)linkedFlowScope1));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node1 = new Node(57, 57, 52);
      assertNotNull(node1);
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertEquals(57, node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(57, node1.getType());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertEquals(233524, node1.getSourcePosition());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetterDef());
      assertEquals(52, node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.equals((Object)node0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      FlowScope flowScope2 = typeInference0.createEntryLattice();
      assertNotNull(flowScope2);
      assertNotSame(flowScope2, linkedFlowScope0);
      assertNotSame(flowScope2, linkedFlowScope2);
      assertNotSame(flowScope2, flowScope0);
      assertNotSame(flowScope2, flowScope1);
      assertNotSame(flowScope2, linkedFlowScope1);
      assertNotSame(node0, node1);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertTrue(flowScope2.equals((Object)flowScope0));
      assertTrue(flowScope2.equals((Object)linkedFlowScope2));
      assertTrue(flowScope2.equals((Object)linkedFlowScope1));
      assertTrue(flowScope2.equals((Object)flowScope1));
      assertTrue(flowScope2.equals((Object)linkedFlowScope0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry2 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry2);
      assertSame(jSTypeRegistry2, jSTypeRegistry1);
      assertSame(jSTypeRegistry2, jSTypeRegistry0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry2);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet0);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet2);
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet0));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("!DHrrTKQ=iVlJ7", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      assertNotNull(reverseAbstractInterpreter0);
      assertNotSame(reverseAbstractInterpreter0, semanticReverseAbstractInterpreter0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(reverseAbstractInterpreter0.equals((Object)semanticReverseAbstractInterpreter0));
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(reverseAbstractInterpreter0.equals((Object)semanticReverseAbstractInterpreter0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.isLocal());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.isLocal());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.isLocal());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(scope1.equals((Object)scope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope2);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.isLocal());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertTrue(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(scope1.equals((Object)scope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      Node node1 = new Node(107, 145, 2638);
      assertNotNull(node1);
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertEquals(596558, node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertEquals(107, node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertEquals(145, node1.getLineno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isNull());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThis());
      assertEquals(2638, node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.equals((Object)node0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 107
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isNumber());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isNumber());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isNumber());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("org.json.JSONArray");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.FALSE;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet0);
      assertSame(booleanLiteralSet1, booleanLiteralSet2);
      assertSame(booleanLiteralSet2, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet0);
      assertEquals(BooleanLiteralSet.FALSE, booleanLiteralSet2);
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet0));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isNumber());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isNumber());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope0, scope1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isNumber());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isNumber());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      assertNotNull(linkedFlowScope2);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isNumber());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      LinkedFlowScope linkedFlowScope3 = new LinkedFlowScope(linkedFlowScope1);
      assertNotNull(linkedFlowScope3);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isNumber());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertTrue(node0.isScript());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope1));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      Node node1 = new Node(30, 3597, 3597);
      assertNotNull(node1);
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(30, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertTrue(node1.isNew());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isIf());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertEquals(3597, node1.getLineno());
      assertEquals(14736909, node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertEquals(3597, node1.getCharno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      assertNotNull(jqueryCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      assertNotNull(googleCodingConvention1);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("window", googleCodingConvention1.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention1.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention1.getExportSymbolFunction());
      assertNull(googleCodingConvention1.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention1.getAbstractMethodName());
      assertFalse(googleCodingConvention1.equals((Object)googleCodingConvention0));
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("window", googleCodingConvention1.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention1.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention1.getExportSymbolFunction());
      assertNull(googleCodingConvention1.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention1.getAbstractMethodName());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      assertFalse(googleCodingConvention1.equals((Object)googleCodingConvention0));
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.TRUE;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet0);
      assertSame(booleanLiteralSet1, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet0);
      assertSame(booleanLiteralSet2, booleanLiteralSet1);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet2);
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet0));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("}<", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("window", googleCodingConvention1.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention1.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention1.getExportSymbolFunction());
      assertNull(googleCodingConvention1.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention1.getAbstractMethodName());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      assertFalse(googleCodingConvention1.equals((Object)googleCodingConvention0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      List<DiGraph.DiGraphNode<Node, ControlFlowGraph.Branch>> list0 = (List<DiGraph.DiGraphNode<Node, ControlFlowGraph.Branch>>)controlFlowGraph0.getDirectedPredNodes(node0);
      assertNotNull(list0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("67gB:5=D'2{K?da)Qe", jSTypeNative0);
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("67gB:5=D'2{K?da)Qe", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      boolean boolean1 = linkedFlowScope0.equals((Object) null);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      FlowScope flowScope1 = linkedFlowScope1.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope1, flowScope0);
      assertNotSame(linkedFlowScope1, flowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(flowScope1, linkedFlowScope1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope1));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Node node1 = new Node(30, 118, (-849));
      assertNotNull(node1);
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDo());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVar());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetProp());
      assertEquals(30, node1.getType());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertTrue(node1.isNew());
      assertFalse(node1.isIf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.equals((Object)node0));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      assertNotNull(googleCodingConvention1);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("window", googleCodingConvention1.getGlobalObject());
      assertNull(googleCodingConvention1.getAbstractMethodName());
      assertNull(googleCodingConvention1.getExportPropertyFunction());
      assertNull(googleCodingConvention1.getDelegateSuperclassName());
      assertNull(googleCodingConvention1.getExportSymbolFunction());
      assertFalse(googleCodingConvention1.equals((Object)googleCodingConvention0));
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet1, booleanLiteralSet0, false);
      assertSame(booleanLiteralSet1, booleanLiteralSet0);
      assertSame(booleanLiteralSet1, booleanLiteralSet2);
      assertSame(booleanLiteralSet2, booleanLiteralSet0);
      assertSame(booleanLiteralSet2, booleanLiteralSet1);
      assertSame(booleanLiteralSet0, booleanLiteralSet1);
      assertSame(booleanLiteralSet0, booleanLiteralSet2);
      assertEquals(BooleanLiteralSet.EMPTY, booleanLiteralSet2);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Element", codingConvention_AssertionFunctionSpec1);
      assertNotNull(immutableSortedMap0);
      assertNotSame(codingConvention_AssertionFunctionSpec1, codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope1, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean1 = linkedFlowScope0.equals(jqueryCodingConvention0);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node1 = new Node(37, node0, node0, node0, node0);
      assertNotNull(node1);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNull());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isScript());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertEquals(37, node1.getType());
      assertFalse(node1.isBreak());
      assertTrue(node1.isCall());
      assertFalse(node1.isWith());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      assertNotNull(typeInference1);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      assertFalse(typeInference1.equals((Object)typeInference0));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      List<FlowScope> list0 = typeInference1.branchedFlowThrough(node0, flowScope0);
      assertNotNull(list0);
      assertNotSame(node0, node1);
      assertNotSame(googleCodingConvention0, googleCodingConvention1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertNotSame(codingConvention_AssertionFunctionSpec1, codingConvention_AssertionFunctionSpec0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(typeInference1, typeInference0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(node0.equals((Object)node1));
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertFalse(typeInference1.equals((Object)typeInference0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Key");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet1);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet2);
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet1));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      assertNotNull(linkedFlowScope_FlowScopeJoinOp0);
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      FlowScope flowScope1 = flowScope0.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, flowScope1);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node1 = new Node(51, 30, (-1565));
      assertNotNull(node1);
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertTrue(node1.isIn());
      assertFalse(node1.isDo());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isScript());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertEquals(51, node1.getType());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.equals((Object)node0));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      
      FlowScope flowScope2 = typeInference0.flowThrough(node1, flowScope0);
      assertNotNull(flowScope2);
      assertNotSame(linkedFlowScope0, flowScope2);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, flowScope2);
      assertNotSame(flowScope0, flowScope1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(flowScope2, linkedFlowScope0);
      assertNotSame(flowScope2, flowScope1);
      assertNotSame(flowScope2, flowScope0);
      assertNotSame(scope0, scope1);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertTrue(node1.isIn());
      assertFalse(node1.isDo());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isScript());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertEquals(51, node1.getType());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope1));
      assertTrue(flowScope0.equals((Object)flowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(flowScope2.equals((Object)flowScope0));
      assertTrue(flowScope2.equals((Object)flowScope1));
      assertTrue(flowScope2.equals((Object)linkedFlowScope0));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IN : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      assertNotNull(jqueryCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      assertNotNull(googleCodingConvention1);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention1.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention1.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention1.getAbstractMethodName());
      assertNull(googleCodingConvention1.getDelegateSuperclassName());
      assertEquals("window", googleCodingConvention1.getGlobalObject());
      assertFalse(googleCodingConvention1.equals((Object)googleCodingConvention0));
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet1, booleanLiteralSet0, false);
      assertSame(booleanLiteralSet1, booleanLiteralSet2);
      assertSame(booleanLiteralSet1, booleanLiteralSet0);
      assertSame(booleanLiteralSet2, booleanLiteralSet1);
      assertSame(booleanLiteralSet2, booleanLiteralSet0);
      assertSame(booleanLiteralSet0, booleanLiteralSet2);
      assertSame(booleanLiteralSet0, booleanLiteralSet1);
      assertEquals(BooleanLiteralSet.EMPTY, booleanLiteralSet2);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Element", codingConvention_AssertionFunctionSpec1);
      assertNotNull(immutableSortedMap0);
      assertNotSame(codingConvention_AssertionFunctionSpec1, codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope1, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec2 = new CodingConvention.AssertionFunctionSpec("prototype", jSTypeNative0);
      assertNotNull(codingConvention_AssertionFunctionSpec2);
      assertEquals("prototype", codingConvention_AssertionFunctionSpec2.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(codingConvention_AssertionFunctionSpec2.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      boolean boolean1 = linkedFlowScope0.equals(jqueryCodingConvention0);
      assertNotSame(googleCodingConvention0, googleCodingConvention1);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertFalse(boolean1);
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      assertTrue(boolean1 == boolean0);
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node1 = new Node(37, node0, node0, node0, node0);
      assertNotNull(node1);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(132, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAnd());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertTrue(node1.isCall());
      assertFalse(node1.isNE());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertEquals(37, node1.getType());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertFalse(node1.equals((Object)node0));
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CALL does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      assertNotNull(jqueryCodingConvention0);
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      assertNotNull(googleCodingConvention1);
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention1.getAbstractMethodName());
      assertNull(googleCodingConvention1.getDelegateSuperclassName());
      assertEquals("window", googleCodingConvention1.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention1.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention1.getExportSymbolFunction());
      assertFalse(googleCodingConvention1.equals((Object)googleCodingConvention0));
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Element", codingConvention_AssertionFunctionSpec1);
      assertNotNull(immutableSortedMap0);
      assertNotSame(codingConvention_AssertionFunctionSpec1, codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope1, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean1 = linkedFlowScope0.equals(jqueryCodingConvention0);
      assertNotSame(googleCodingConvention0, googleCodingConvention1);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(scope1, scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = new Node(37, node0, node0, node0, node0);
      assertNotNull(node1);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(132, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertTrue(node1.isCall());
      assertFalse(node1.isOr());
      assertFalse(node1.isInc());
      assertFalse(node1.isName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertEquals(37, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CALL does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet1);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet2);
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet1));
      
      BooleanLiteralSet booleanLiteralSet3 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet4 = booleanLiteralSet2.union(booleanLiteralSet3);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet4);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet3);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet4);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet2);
      assertSame(booleanLiteralSet1, booleanLiteralSet3);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet0);
      assertSame(booleanLiteralSet2, booleanLiteralSet4);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet3);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet3, booleanLiteralSet0);
      assertSame(booleanLiteralSet3, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet3, booleanLiteralSet4);
      assertNotSame(booleanLiteralSet3, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet4, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet4, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet4, booleanLiteralSet3);
      assertSame(booleanLiteralSet4, booleanLiteralSet2);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet4);
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet3));
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet2));
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet2));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet3));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet3.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet3.equals((Object)booleanLiteralSet2));
      assertFalse(booleanLiteralSet4.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet4.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet4.equals((Object)booleanLiteralSet3));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      BooleanLiteralSet booleanLiteralSet5 = TypeInference.getBooleanOutcomes(booleanLiteralSet2, booleanLiteralSet2, false);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet4);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet3);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet5);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet4);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet2);
      assertSame(booleanLiteralSet1, booleanLiteralSet3);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet5);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet0);
      assertSame(booleanLiteralSet2, booleanLiteralSet4);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet3);
      assertSame(booleanLiteralSet2, booleanLiteralSet5);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet1);
      assertSame(booleanLiteralSet5, booleanLiteralSet4);
      assertNotSame(booleanLiteralSet5, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet5, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet5, booleanLiteralSet3);
      assertSame(booleanLiteralSet5, booleanLiteralSet2);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet5);
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet4));
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet3));
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet2));
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet4));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet2));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet3));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet5.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet5.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet5.equals((Object)booleanLiteralSet3));
      
      BooleanLiteralSet booleanLiteralSet6 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet7 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet6, false);
      assertNotSame(booleanLiteralSet7, booleanLiteralSet5);
      assertNotSame(booleanLiteralSet7, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet7, booleanLiteralSet4);
      assertSame(booleanLiteralSet7, booleanLiteralSet6);
      assertNotSame(booleanLiteralSet7, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet7, booleanLiteralSet3);
      assertSame(booleanLiteralSet7, booleanLiteralSet0);
      assertSame(booleanLiteralSet0, booleanLiteralSet7);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet4);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet3);
      assertSame(booleanLiteralSet0, booleanLiteralSet6);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet5);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet6, booleanLiteralSet3);
      assertNotSame(booleanLiteralSet6, booleanLiteralSet5);
      assertNotSame(booleanLiteralSet6, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet6, booleanLiteralSet1);
      assertSame(booleanLiteralSet6, booleanLiteralSet7);
      assertSame(booleanLiteralSet6, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet6, booleanLiteralSet4);
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet7);
      assertFalse(booleanLiteralSet7.equals((Object)booleanLiteralSet5));
      assertFalse(booleanLiteralSet7.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet7.equals((Object)booleanLiteralSet4));
      assertFalse(booleanLiteralSet7.equals((Object)booleanLiteralSet2));
      assertFalse(booleanLiteralSet7.equals((Object)booleanLiteralSet3));
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet4));
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet3));
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet5));
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet2));
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet6.equals((Object)booleanLiteralSet3));
      assertFalse(booleanLiteralSet6.equals((Object)booleanLiteralSet5));
      assertFalse(booleanLiteralSet6.equals((Object)booleanLiteralSet2));
      assertFalse(booleanLiteralSet6.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet6.equals((Object)booleanLiteralSet4));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap1);
      assertNotSame(immutableSortedMap1, immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(immutableSortedMap1.equals((Object)immutableSortedMap0));
      
      Node node1 = compiler0.jsRoot;
      assertNull(node1);
      
      Scope scope1 = Scope.createGlobalScope((Node) null);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope0, scope1);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope2);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node node2 = new Node(12, 16, 151);
      assertNotNull(node2);
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isInc());
      assertFalse(node2.isTrue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isIn());
      assertFalse(node2.isThrow());
      assertEquals(151, node2.getCharno());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isString());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertEquals(12, node2.getType());
      assertEquals(65687, node2.getSourcePosition());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isNew());
      assertEquals(16, node2.getLineno());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isThis());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isParamList());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isScript());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertFalse(node2.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      assertNotNull(typeInference0);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(immutableSortedMap1.equals((Object)immutableSortedMap0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      assertNotNull(node3);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isFunction());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isTrue());
      assertFalse(node3.isTry());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isNull());
      assertFalse(node3.isIf());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isName());
      assertFalse(node3.isNE());
      assertFalse(node3.isFor());
      assertFalse(node3.isCatch());
      assertFalse(node3.isCall());
      assertFalse(node3.isWhile());
      assertFalse(node3.isIn());
      assertFalse(node3.isString());
      assertFalse(node3.isInc());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCast());
      assertFalse(node3.isWith());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertTrue(node3.isParamList());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isScript());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertEquals(83, node3.getType());
      assertFalse(node3.isBreak());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isComma());
      assertFalse(node3.isAssign());
      assertFalse(node3.isThis());
      assertFalse(node3.isReturn());
      assertFalse(node3.isHook());
      assertFalse(node3.isInstanceOf());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isDo());
      assertFalse(node3.isBlock());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isOr());
      assertFalse(node3.isCase());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isArrayLit());
      assertEquals(0, node3.getChildCount());
      assertEquals(0, jSTypeArray0.length);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node3, linkedFlowScope2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, true);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertSame(booleanLiteralSet1, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet0);
      assertSame(booleanLiteralSet2, booleanLiteralSet1);
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet2);
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet0));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap1);
      assertNotSame(immutableSortedMap1, immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(immutableSortedMap1.equals((Object)immutableSortedMap0));
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap1);
      assertNotNull(typeInference0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(immutableSortedMap1.equals((Object)immutableSortedMap0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      FlowScope flowScope1 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      Node node1 = new Node((-501), 1794, 56);
      assertNotNull(node1);
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals(7348280, node1.getSourcePosition());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertEquals(1794, node1.getLineno());
      assertEquals(56, node1.getCharno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertEquals((-501), node1.getType());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      assertNotNull(node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNull());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTypeOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isObjectLit());
      assertTrue(node2.isParamList());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCast());
      assertFalse(node2.isFalse());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertFalse(node2.isTrue());
      assertFalse(node2.isComma());
      assertFalse(node2.isNE());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isThis());
      assertFalse(node2.isScript());
      assertFalse(node2.isDefaultCase());
      assertEquals(83, node2.getType());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("org.json.JSONArray");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet1);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet2);
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet1));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope1, scope0);
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(scope1.equals((Object)scope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      assertNotNull(linkedFlowScope2);
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(scope1.equals((Object)scope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      Node node1 = new Node(33, 53, 2);
      assertNotNull(node1);
      assertEquals(217090, node1.getSourcePosition());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(53, node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertTrue(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWhile());
      assertEquals(33, node1.getType());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.equals((Object)node0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope1);
      assertNotNull(list0);
      assertNotSame(scope1, scope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(node0, node1);
      assertNotSame(scope0, scope1);
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(scope1.equals((Object)scope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      assertNotNull(flowScope0);
      assertNotSame(node0, node1);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(scope0, scope1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(flowScope0.equals((Object)linkedFlowScope0));
      assertFalse(flowScope0.equals((Object)linkedFlowScope2));
      assertFalse(flowScope0.equals((Object)linkedFlowScope1));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      assertNotNull(typeInference1);
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(scope1.isGlobal());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertTrue(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(typeInference1.equals((Object)typeInference0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      // Undeclared exception!
      try { 
        typeInference1.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JOArry", "org.json.JOArry");
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet0);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet2);
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet0));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("V,k", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      assertNotNull(linkedFlowScope2);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      
      Node node1 = new Node(37, 55, 38);
      assertNotNull(node1);
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isObjectLit());
      assertEquals(38, node1.getCharno());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isComma());
      assertEquals(37, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isOr());
      assertEquals(225318, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertEquals(55, node1.getLineno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertTrue(node1.isCall());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.equals((Object)node0));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSOArGray", "org.json.JSOArGray");
      assertNotNull(node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Element", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedFlowScope linkedFlowScope2 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope2);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      FlowScope flowScope0 = linkedFlowScope2.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertNotSame(linkedFlowScope2, flowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node1 = new Node(4, node0, node0, node0, 189, 301);
      assertNotNull(node1);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(774445, node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertEquals(4, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertEquals(189, node1.getLineno());
      assertEquals(301, node1.getCharno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.isReturn());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      LinkedFlowScope linkedFlowScope3 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope3);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertFalse(node0.equals((Object)node1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope3.equals((Object)flowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope1));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope3);
      assertNotNull(list0);
      assertNotSame(node0, node1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope0, linkedFlowScope3);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope3, flowScope0);
      assertNotSame(linkedFlowScope3, linkedFlowScope2);
      assertNotSame(linkedFlowScope3, linkedFlowScope1);
      assertNotSame(linkedFlowScope3, linkedFlowScope0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isScript());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(node0.equals((Object)node1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope3.equals((Object)flowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope1));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RETURN 189 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet1);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet2);
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet1));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope2);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      boolean boolean1 = linkedFlowScope1.equals(node0);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      FlowScope flowScope0 = linkedFlowScope2.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertNotSame(linkedFlowScope2, flowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("");
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      boolean boolean2 = linkedFlowScope2.equals(codingConvention_AssertionFunctionSpec1);
      assertNotSame(codingConvention_AssertionFunctionSpec1, codingConvention_AssertionFunctionSpec0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertNotSame(linkedFlowScope2, flowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals("", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(boolean2);
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope2.equals((Object)flowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      FlowScope flowScope1 = linkedFlowScope2.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(flowScope1, linkedFlowScope2);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(flowScope1, linkedFlowScope1);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
      assertNotSame(linkedFlowScope2, flowScope1);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertNotSame(linkedFlowScope2, flowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope1));
      assertTrue(flowScope1.equals((Object)linkedFlowScope2));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope2.equals((Object)flowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      FlowScope flowScope2 = flowScope0.createChildFlowScope();
      assertNotNull(flowScope2);
      assertNotSame(flowScope0, flowScope2);
      assertNotSame(flowScope0, flowScope1);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(flowScope2, flowScope1);
      assertNotSame(flowScope2, linkedFlowScope0);
      assertNotSame(flowScope2, linkedFlowScope2);
      assertNotSame(flowScope2, flowScope0);
      assertNotSame(flowScope2, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, flowScope2);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
      assertNotSame(linkedFlowScope2, flowScope1);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertNotSame(linkedFlowScope2, flowScope2);
      assertNotSame(linkedFlowScope2, flowScope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals(132, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertTrue(flowScope0.equals((Object)flowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope2));
      assertTrue(flowScope2.equals((Object)linkedFlowScope2));
      assertTrue(flowScope2.equals((Object)linkedFlowScope0));
      assertTrue(flowScope2.equals((Object)linkedFlowScope1));
      assertTrue(flowScope2.equals((Object)flowScope1));
      assertTrue(flowScope2.equals((Object)flowScope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope2.equals((Object)flowScope0));
      assertTrue(linkedFlowScope2.equals((Object)flowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node1 = new Node(54, 148, 37);
      assertNotNull(node1);
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals(148, node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertEquals(54, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertEquals(37, node1.getCharno());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertEquals(606245, node1.getSourcePosition());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      assertNotNull(controlFlowGraph0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("org.json.JSONArray");
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("org.json.JSONArray", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      FlowScope flowScope1 = flowScope0.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, flowScope1);
      assertNotSame(flowScope0, linkedFlowScope1);
      assertNotSame(flowScope1, linkedFlowScope1);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(flowScope1, flowScope0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope0.equals((Object)linkedFlowScope1));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope1));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node1 = new Node(54, 148, 37);
      assertNotNull(node1);
      assertFalse(node1.isLabelName());
      assertEquals(606245, node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertEquals(37, node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertEquals(148, node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertEquals(54, node1.getType());
      assertFalse(node1.isTrue());
      assertFalse(node1.equals((Object)node0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet1);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet2);
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet1));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      BooleanLiteralSet booleanLiteralSet3 = TypeInference.getBooleanOutcomes(booleanLiteralSet2, booleanLiteralSet2, false);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet3);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet3);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet0);
      assertSame(booleanLiteralSet2, booleanLiteralSet3);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet3, booleanLiteralSet0);
      assertSame(booleanLiteralSet3, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet3, booleanLiteralSet1);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet3);
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet2));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet2));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet3.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet3.equals((Object)booleanLiteralSet1));
      
      BooleanLiteralSet booleanLiteralSet4 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet5 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet4, true);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet3);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertSame(booleanLiteralSet0, booleanLiteralSet5);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertSame(booleanLiteralSet0, booleanLiteralSet4);
      assertSame(booleanLiteralSet4, booleanLiteralSet5);
      assertNotSame(booleanLiteralSet4, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet4, booleanLiteralSet3);
      assertNotSame(booleanLiteralSet4, booleanLiteralSet2);
      assertSame(booleanLiteralSet4, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet5, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet5, booleanLiteralSet3);
      assertNotSame(booleanLiteralSet5, booleanLiteralSet1);
      assertSame(booleanLiteralSet5, booleanLiteralSet4);
      assertSame(booleanLiteralSet5, booleanLiteralSet0);
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet5);
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet3));
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet2));
      assertFalse(booleanLiteralSet4.equals((Object)booleanLiteralSet1));
      assertFalse(booleanLiteralSet4.equals((Object)booleanLiteralSet3));
      assertFalse(booleanLiteralSet4.equals((Object)booleanLiteralSet2));
      assertFalse(booleanLiteralSet5.equals((Object)booleanLiteralSet2));
      assertFalse(booleanLiteralSet5.equals((Object)booleanLiteralSet3));
      assertFalse(booleanLiteralSet5.equals((Object)booleanLiteralSet1));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap1);
      assertNotSame(immutableSortedMap1, immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(immutableSortedMap1.equals((Object)immutableSortedMap0));
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(immutableSortedMap0.equals((Object)immutableSortedMap1));
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      Node node1 = compiler0.jsRoot;
      assertNull(node1);
      
      Scope scope1 = Scope.createGlobalScope((Node) null);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope0, scope1);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope2);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertTrue(node0.isScript());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isRegExp());
      assertEquals(132, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      Node node2 = new Node(12, 16, 151);
      assertNotNull(node2);
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isTrue());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertEquals(151, node2.getCharno());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertEquals(12, node2.getType());
      assertFalse(node2.isHook());
      assertFalse(node2.isTry());
      assertFalse(node2.isCase());
      assertEquals(65687, node2.getSourcePosition());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertEquals(16, node2.getLineno());
      assertFalse(node2.equals((Object)node0));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EQ 16 : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap1);
      assertNotSame(immutableSortedMap1, immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(immutableSortedMap1.equals((Object)immutableSortedMap0));
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(immutableSortedMap0.equals((Object)immutableSortedMap1));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      Node node1 = compiler0.jsRoot;
      assertNull(node1);
      
      Scope scope1 = Scope.createGlobalScope((Node) null);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertTrue(scope1.isGlobal());
      assertFalse(scope1.isLocal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope0, scope1);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.equals((Object)scope1));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.equals((Object)scope1));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope2);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.equals((Object)scope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      Node node2 = new Node(12, 16, 151);
      assertNotNull(node2);
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isExprResult());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertEquals(16, node2.getLineno());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertEquals(65687, node2.getSourcePosition());
      assertFalse(node2.isWhile());
      assertEquals(12, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertEquals(151, node2.getCharno());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNE());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isIn());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.equals((Object)node0));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope1);
      assertNotNull(list0);
      assertNotSame(node0, node2);
      assertNotSame(scope0, scope1);
      assertNotSame(immutableSortedMap0, immutableSortedMap1);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(node0.equals((Object)node2));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(immutableSortedMap0.equals((Object)immutableSortedMap1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EQ 16 : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      assertNotNull(jqueryCodingConvention0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      assertNotNull(googleCodingConvention1);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("window", googleCodingConvention1.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention1.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention1.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention1.getExportPropertyFunction());
      assertNull(googleCodingConvention1.getDelegateSuperclassName());
      assertFalse(googleCodingConvention1.equals((Object)googleCodingConvention0));
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Key", jSTypeNative0);
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Key", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      boolean boolean0 = linkedFlowScope0.equals(codingConvention_AssertionFunctionSpec1);
      assertNotSame(codingConvention_AssertionFunctionSpec1, codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Key", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(boolean0);
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedFlowScope linkedFlowScope1 = (LinkedFlowScope)linkedFlowScope0.createChildFlowScope();
      assertNotNull(linkedFlowScope1);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedFlowScope linkedFlowScope2 = (LinkedFlowScope)linkedFlowScope0.createChildFlowScope();
      assertNotNull(linkedFlowScope2);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
      assertNotSame(linkedFlowScope2, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope2.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedFlowScope linkedFlowScope3 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope3);
      assertNotSame(linkedFlowScope3, linkedFlowScope2);
      assertNotSame(linkedFlowScope3, linkedFlowScope0);
      assertNotSame(linkedFlowScope3, linkedFlowScope1);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope3.equals((Object)linkedFlowScope2));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedFlowScope linkedFlowScope4 = (LinkedFlowScope)linkedFlowScope1.createChildFlowScope();
      assertNotNull(linkedFlowScope4);
      assertNotSame(linkedFlowScope1, linkedFlowScope4);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, linkedFlowScope3);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope4, linkedFlowScope3);
      assertNotSame(linkedFlowScope4, linkedFlowScope2);
      assertNotSame(linkedFlowScope4, linkedFlowScope0);
      assertNotSame(linkedFlowScope4, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope4);
      assertNotSame(linkedFlowScope0, linkedFlowScope3);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope4.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope4.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope4.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope4.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedFlowScope linkedFlowScope5 = (LinkedFlowScope)linkedFlowScope1.createChildFlowScope();
      assertNotNull(linkedFlowScope5);
      assertNotSame(linkedFlowScope1, linkedFlowScope4);
      assertNotSame(linkedFlowScope1, linkedFlowScope5);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, linkedFlowScope3);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope5, linkedFlowScope3);
      assertNotSame(linkedFlowScope5, linkedFlowScope2);
      assertNotSame(linkedFlowScope5, linkedFlowScope0);
      assertNotSame(linkedFlowScope5, linkedFlowScope1);
      assertNotSame(linkedFlowScope5, linkedFlowScope4);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope4);
      assertNotSame(linkedFlowScope0, linkedFlowScope3);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope0, linkedFlowScope5);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope4));
      assertTrue(linkedFlowScope5.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope5.equals((Object)linkedFlowScope4));
      assertTrue(linkedFlowScope5.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope5.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope5.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope4));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedFlowScope linkedFlowScope6 = new LinkedFlowScope(linkedFlowScope1);
      assertNotNull(linkedFlowScope6);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope5));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope4));
      assertTrue(linkedFlowScope6.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope6.equals((Object)linkedFlowScope4));
      assertTrue(linkedFlowScope6.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope6.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope6.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope6.equals((Object)linkedFlowScope5));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope4));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope5));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedFlowScope linkedFlowScope7 = (LinkedFlowScope)linkedFlowScope6.createChildFlowScope();
      assertNotNull(linkedFlowScope7);
      assertNotSame(linkedFlowScope1, linkedFlowScope7);
      assertNotSame(linkedFlowScope1, linkedFlowScope4);
      assertNotSame(linkedFlowScope1, linkedFlowScope5);
      assertNotSame(linkedFlowScope1, linkedFlowScope6);
      assertNotSame(linkedFlowScope1, linkedFlowScope2);
      assertNotSame(linkedFlowScope1, linkedFlowScope3);
      assertNotSame(linkedFlowScope1, linkedFlowScope0);
      assertNotSame(linkedFlowScope6, linkedFlowScope3);
      assertNotSame(linkedFlowScope6, linkedFlowScope5);
      assertNotSame(linkedFlowScope6, linkedFlowScope7);
      assertNotSame(linkedFlowScope6, linkedFlowScope1);
      assertNotSame(linkedFlowScope6, linkedFlowScope2);
      assertNotSame(linkedFlowScope6, linkedFlowScope4);
      assertNotSame(linkedFlowScope6, linkedFlowScope0);
      assertNotSame(linkedFlowScope7, linkedFlowScope4);
      assertNotSame(linkedFlowScope7, linkedFlowScope0);
      assertNotSame(linkedFlowScope7, linkedFlowScope2);
      assertNotSame(linkedFlowScope7, linkedFlowScope3);
      assertNotSame(linkedFlowScope7, linkedFlowScope6);
      assertNotSame(linkedFlowScope7, linkedFlowScope5);
      assertNotSame(linkedFlowScope7, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, linkedFlowScope7);
      assertNotSame(linkedFlowScope0, linkedFlowScope4);
      assertNotSame(linkedFlowScope0, linkedFlowScope3);
      assertNotSame(linkedFlowScope0, linkedFlowScope6);
      assertNotSame(linkedFlowScope0, linkedFlowScope2);
      assertNotSame(linkedFlowScope0, linkedFlowScope5);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope5));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope4));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope6));
      assertTrue(linkedFlowScope6.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope6.equals((Object)linkedFlowScope4));
      assertTrue(linkedFlowScope6.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope6.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope6.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope6.equals((Object)linkedFlowScope5));
      assertTrue(linkedFlowScope7.equals((Object)linkedFlowScope5));
      assertTrue(linkedFlowScope7.equals((Object)linkedFlowScope6));
      assertTrue(linkedFlowScope7.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope7.equals((Object)linkedFlowScope4));
      assertTrue(linkedFlowScope7.equals((Object)linkedFlowScope2));
      assertTrue(linkedFlowScope7.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope7.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope3));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope6));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope4));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope5));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope1));
      assertTrue(linkedFlowScope0.equals((Object)linkedFlowScope2));
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node1 = new Node(148, 38, (-3692));
      assertNotNull(node1);
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCast());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals(148, node1.getType());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.equals((Object)node0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SETTER_DEF does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      assertNotNull(jqueryCodingConvention0);
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      assertNotNull(googleCodingConvention1);
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention1.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention1.getExportSymbolFunction());
      assertEquals("window", googleCodingConvention1.getGlobalObject());
      assertNull(googleCodingConvention1.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention1.getAbstractMethodName());
      assertFalse(googleCodingConvention1.equals((Object)googleCodingConvention0));
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      assertEquals(BooleanLiteralSet.EMPTY, booleanLiteralSet0);
      
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node1 = new Node(148, (-3416), 145);
      assertNotNull(node1);
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isSetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertFalse(node1.isInc());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(148, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals("", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(typeInference1.equals((Object)typeInference0));
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertNotSame(node0, node1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertEquals(0, scope0.getVarCount());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertFalse(node0.equals((Object)node1));
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      LinkedList<FlowScope> linkedList0 = new LinkedList<FlowScope>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        typeInference1.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SETTER_DEF does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      assertNotNull(controlFlowGraph0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      assertNotNull(jqueryCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      assertNotNull(googleCodingConvention1);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(googleCodingConvention1.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention1.getExportPropertyFunction());
      assertEquals("window", googleCodingConvention1.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention1.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention1.getAbstractMethodName());
      assertFalse(googleCodingConvention1.equals((Object)googleCodingConvention0));
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotNull(linkedFlowScope0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Key", jSTypeNative0);
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Key", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      boolean boolean0 = linkedFlowScope0.equals(codingConvention_AssertionFunctionSpec1);
      assertNotSame(codingConvention_AssertionFunctionSpec1, codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Key", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertFalse(boolean0);
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      FlowScope flowScope1 = flowScope0.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(flowScope0, flowScope1);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isScript());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(0, scope0.getVarCount());
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      Node node1 = new Node(4, 49, 47);
      assertNotNull(node1);
      assertEquals(49, node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertEquals(47, node1.getCharno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertEquals(4, node1.getType());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.isReturn());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isScript());
      assertEquals(200751, node1.getSourcePosition());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RETURN 49 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      assertNotNull(jqueryCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      assertNotNull(googleCodingConvention1);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(googleCodingConvention1.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention1.getExportSymbolFunction());
      assertEquals("window", googleCodingConvention1.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention1.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention1.getAbstractMethodName());
      assertFalse(googleCodingConvention1.equals((Object)googleCodingConvention0));
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry1);
      assertSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(googleCodingConvention0.equals((Object)googleCodingConvention1));
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, scope0.getVarCount());
      assertFalse(scope0.isLocal());
      assertTrue(scope0.isGlobal());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.TRUE;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      assertSame(booleanLiteralSet1, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet1, booleanLiteralSet0);
      assertNotSame(booleanLiteralSet2, booleanLiteralSet0);
      assertSame(booleanLiteralSet2, booleanLiteralSet1);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet2);
      assertNotSame(booleanLiteralSet0, booleanLiteralSet1);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet2);
      assertFalse(booleanLiteralSet1.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet2.equals((Object)booleanLiteralSet0));
      assertFalse(booleanLiteralSet0.equals((Object)booleanLiteralSet1));
      
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Scope scope2 = Scope.createGlobalScope(node0);
      assertNotNull(scope2);
      assertNotSame(scope2, scope0);
      assertNotSame(scope2, scope1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(scope2.isLocal());
      assertTrue(scope2.isGlobal());
      assertEquals(0, scope2.getVarCount());
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      FlowScope flowScope1 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Node node1 = new Node(7, 43, 51);
      assertNotNull(node1);
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertEquals(7, node1.getType());
      assertFalse(node1.isName());
      assertEquals(51, node1.getCharno());
      assertEquals(43, node1.getLineno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isOr());
      assertEquals(176179, node1.getSourcePosition());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.equals((Object)node0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      
      FlowScope flowScope2 = typeInference0.createEntryLattice();
      assertNotNull(flowScope2);
      assertNotSame(node0, node1);
      assertNotSame(flowScope2, flowScope0);
      assertNotSame(flowScope2, linkedFlowScope0);
      assertNotSame(flowScope2, flowScope1);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertNotSame(scope1, scope2);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(node0.equals((Object)node1));
      assertTrue(flowScope2.equals((Object)linkedFlowScope0));
      assertTrue(flowScope2.equals((Object)flowScope1));
      assertTrue(flowScope2.equals((Object)flowScope0));
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      assertNotNull(linkedFlowScope1);
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(node0.equals((Object)node1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope1));
      assertTrue(linkedFlowScope0.equals((Object)flowScope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)flowScope0));
      assertTrue(linkedFlowScope1.equals((Object)linkedFlowScope0));
      assertTrue(linkedFlowScope1.equals((Object)flowScope1));
      assertTrue(linkedFlowScope1.equals((Object)flowScope2));
      assertFalse(scope1.equals((Object)scope2));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 7
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      assertNotNull(node0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      assertNotNull(controlFlowGraph0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertTrue(scope0.isGlobal());
      assertFalse(scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      
      Scope scope1 = Scope.createGlobalScope(node0);
      assertNotNull(scope1);
      assertNotSame(scope1, scope0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      assertNotNull(codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec1.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec1.equals((Object)codingConvention_AssertionFunctionSpec0));
      
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      assertNotNull(immutableSortedMap0);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope1, immutableSortedMap0);
      assertNotNull(typeInference0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(scope1.equals((Object)scope0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Scope scope2 = Scope.createGlobalScope(node0);
      assertNotNull(scope2);
      assertNotSame(scope2, scope0);
      assertNotSame(scope2, scope1);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(0, scope2.getVarCount());
      assertTrue(scope2.isGlobal());
      assertFalse(scope2.isLocal());
      assertFalse(scope2.equals((Object)scope0));
      assertFalse(scope2.equals((Object)scope1));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      assertNotNull(linkedFlowScope0);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope0);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      FlowScope flowScope1 = linkedFlowScope0.createChildFlowScope();
      assertNotNull(flowScope1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertNotSame(linkedFlowScope0, flowScope1);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope1, flowScope0);
      assertNotSame(flowScope1, linkedFlowScope0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertTrue(linkedFlowScope0.equals((Object)flowScope0));
      assertTrue(flowScope1.equals((Object)linkedFlowScope0));
      assertTrue(flowScope1.equals((Object)flowScope0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node1 = new Node(7, 43, 51);
      assertNotNull(node1);
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertEquals(43, node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertEquals(176179, node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertEquals(7, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertEquals(51, node1.getCharno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.equals((Object)node0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      FlowScope flowScope2 = typeInference0.createEntryLattice();
      assertNotNull(flowScope2);
      assertNotSame(flowScope2, flowScope0);
      assertNotSame(flowScope2, linkedFlowScope0);
      assertNotSame(flowScope2, flowScope1);
      assertNotSame(node0, node1);
      assertNotSame(codingConvention_AssertionFunctionSpec0, codingConvention_AssertionFunctionSpec1);
      assertNotSame(scope1, scope0);
      assertNotSame(scope1, scope2);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals("LinkedGraph", controlFlowGraph0.getName());
      assertTrue(controlFlowGraph0.isDirected());
      assertEquals("Object#Element", codingConvention_AssertionFunctionSpec0.getFunctionName());
      assertFalse(scope1.isLocal());
      assertTrue(scope1.isGlobal());
      assertEquals(0, scope1.getVarCount());
      assertTrue(flowScope2.equals((Object)flowScope1));
      assertTrue(flowScope2.equals((Object)linkedFlowScope0));
      assertTrue(flowScope2.equals((Object)flowScope0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(codingConvention_AssertionFunctionSpec0.equals((Object)codingConvention_AssertionFunctionSpec1));
      assertFalse(scope1.equals((Object)scope0));
      assertFalse(scope1.equals((Object)scope2));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 7
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      BooleanLiteralSet booleanLiteralSet3 = TypeInference.getBooleanOutcomes(booleanLiteralSet2, booleanLiteralSet2, false);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet3);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_PROTOTYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element", jSTypeNative0);
      ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Scope scope1 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      linkedFlowScope1.createChildFlowScope();
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      Node node1 = Node.newString("Object#Key", 49, 57);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      ControlFlowGraph<Node> controlFlowGraph1 = new ControlFlowGraph<Node>(node1, true, false);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph1, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      typeInference1.branchedFlowThrough(node1, flowScope0);
      typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference1.flowThrough(node1, linkedFlowScope0);
      typeInference1.branchedFlowThrough(node1, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, flowScope1);
      
      BooleanLiteralSet booleanLiteralSet4 = BooleanLiteralSet.TRUE;
      BooleanLiteralSet booleanLiteralSet5 = TypeInference.getBooleanOutcomes(booleanLiteralSet4, booleanLiteralSet2, true);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet5);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      linkedFlowScope0.createChildFlowScope();
      Node node1 = Node.newString("com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // STRING com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Key", jSTypeNative0);
      linkedFlowScope0.equals(codingConvention_AssertionFunctionSpec1);
      linkedFlowScope0.createChildFlowScope();
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(130, 3, 29);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      LinkedDirectedGraph.createWithEdgeAnnotations();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Key", jSTypeNative0);
      ImmutableMap.builder();
      linkedFlowScope0.equals(codingConvention_AssertionFunctionSpec1);
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(130, 40, 29);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      BooleanLiteralSet booleanLiteralSet3 = TypeInference.getBooleanOutcomes(booleanLiteralSet2, booleanLiteralSet2, false);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet3);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_PROTOTYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element", jSTypeNative0);
      ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Scope scope1 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      linkedFlowScope1.createChildFlowScope();
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      Node node1 = new Node(39, 38, 57);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      ControlFlowGraph<Node> controlFlowGraph1 = new ControlFlowGraph<Node>(node1, true, false);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph1, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      typeInference1.branchedFlowThrough(node1, flowScope0);
      typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference1.flowThrough(node1, linkedFlowScope0);
      typeInference1.branchedFlowThrough(node1, linkedFlowScope1);
      assertNotSame(linkedFlowScope0, flowScope1);
      
      BooleanLiteralSet booleanLiteralSet4 = BooleanLiteralSet.TRUE;
      BooleanLiteralSet booleanLiteralSet5 = TypeInference.getBooleanOutcomes(booleanLiteralSet4, booleanLiteralSet2, true);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet5);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("\"=3)T]O=g]A'Uv5B");
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = new Node(39, 50, 119);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      // Undeclared exception!
      try { 
        typeInference1.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("goog.getCssName called with unrecognized symbol \"{0}\" in class \"{1}\".");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("goog.getCssName called with unrecognized symbol \"{0}\" in class \"{1}\".", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      linkedFlowScope1.createChildFlowScope();
      Node node1 = new Node(16, (-159), 50);
      typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      typeInference0.createEntryLattice();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GT : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSOArGray", "org.json.JSOArGray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      linkedFlowScope0.createChildFlowScope();
      LinkedFlowScope linkedFlowScope3 = new LinkedFlowScope(linkedFlowScope2);
      LinkedFlowScope linkedFlowScope4 = LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope4.createChildFlowScope();
      Node node1 = new Node(16, 2642, (-668));
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GT : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Key", jSTypeNative0);
      linkedFlowScope0.equals(codingConvention_AssertionFunctionSpec1);
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      FlowScope flowScope1 = linkedFlowScope0.createChildFlowScope();
      LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope2 = flowScope0.createChildFlowScope();
      flowScope1.createChildFlowScope();
      Node node1 = new Node(31, (-32), 54);
      typeInference0.branchedFlowThrough(node0, flowScope2);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DELPROP : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_TRUE;
      controlFlowGraph0.isConnected(node0, (ControlFlowGraph.Branch) controlFlowGraph_Branch0, node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      linkedFlowScope1.createChildFlowScope();
      Node node1 = new Node(31, 122, 56);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      // Undeclared exception!
      try { 
        typeInference1.branchedFlowThrough(node1, linkedFlowScope2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DELPROP 122 : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      Scope scope1 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      flowScope0.createChildFlowScope();
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      FlowScope flowScope1 = flowScope0.createChildFlowScope();
      Node node1 = new Node(154, 1994, 40);
      typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      typeInference0.createEntryLattice();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // STRING_KEY 1994 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      Scope scope1 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      flowScope0.createChildFlowScope();
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      FlowScope flowScope1 = flowScope0.createChildFlowScope();
      Node node1 = new Node(154, 1994, 40);
      typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      typeInference0.createEntryLattice();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // STRING_KEY 1994 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      boolean boolean0 = true;
      boolean boolean1 = true;
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Key", jSTypeNative0);
      linkedFlowScope0.equals(codingConvention_AssertionFunctionSpec1);
      linkedFlowScope0.createChildFlowScope();
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(146, 3, 29);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 146
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Key", jSTypeNative0);
      linkedFlowScope0.equals(codingConvention_AssertionFunctionSpec1);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(146, 3, 29);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 146
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.TRUE;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Scope scope1 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      linkedFlowScope1.createChildFlowScope();
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      Node node1 = new Node(42, 56, 1299);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter1, scope1, immutableSortedMap0);
      typeInference1.branchedFlowThrough(node0, flowScope0);
      typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node1, linkedFlowScope1);
      // Undeclared exception!
      try { 
        typeInference1.branchedFlowThrough(node1, flowScope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // THIS 56 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createLatticeBottom(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("org.json.JSONArray");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Element", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(42, 143, 1570);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // THIS 143 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("S.j\"M^(_V`", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Scope scope1 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      codingConvention_AssertionFunctionSpec0.getAssertedType(node0, jSTypeRegistry0);
      Node node1 = new Node(49, (-3638), 100);
      typeInference0.branchedFlowThrough(node0, linkedFlowScope1);
      BooleanLiteralSet booleanLiteralSet2 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet2, false);
      typeInference0.createEntryLattice();
      typeInference0.flowThrough(node1, linkedFlowScope2);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // THROW does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      LinkedDirectedGraph.createWithEdgeAnnotations();
      compiler0.getTypeRegistry();
      Node node1 = new Node((-2086), node0, node0, node0, node0);
      Scope scope0 = Scope.createGlobalScope(node1);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("3PJ[Cjai?n^|");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of(":4{>SFE'u", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("", jSTypeNative0);
      ImmutableMap.builder();
      linkedFlowScope0.equals((Object) null);
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      Node node2 = new Node(49, (-3598), 32);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, flowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // THROW does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      linkedFlowScope1.equals(node0);
      linkedFlowScope2.createChildFlowScope();
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      Node node1 = new Node(106, (-1444), 1789);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 106
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONAEray", "org.json.JSONAEray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONAEray", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope0.equals(node0);
      linkedFlowScope0.createChildFlowScope();
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(106, (-1444), 2);
      typeInference0.createEntryLattice();
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 106
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSOArGray", "org.json.JSOArGray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Element", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("org.json.JSOArGray");
      FlowScope flowScope1 = linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(38, 4544, 1738);
      typeInference0.branchedFlowThrough(node0, flowScope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 4544 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      boolean boolean0 = true;
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("S.j\"M^(_V`", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Scope scope1 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      Node node1 = new Node(38, 116, 39);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 116 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope linkedFlowScope2 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope3 = new LinkedFlowScope(linkedFlowScope2);
      linkedFlowScope2.equals(compiler0);
      linkedFlowScope3.createChildFlowScope();
      linkedFlowScope3.createChildFlowScope();
      Node node1 = new Node(121, 144, 47);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 121
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = new Node(115, 54, 109);
      Node node2 = new Node(121, 56, 43);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      typeInference0.createEntryLattice();
      LinkedList<FlowScope> linkedList0 = new LinkedList<FlowScope>();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 121
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      Scope scope1 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      FlowScope flowScope1 = flowScope0.createChildFlowScope();
      Node node1 = new Node(46, 4095, 5727);
      typeInference0.branchedFlowThrough(node0, flowScope1);
      typeInference0.createEntryLattice();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SHNE 4095 : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      linkedFlowScope0.createChildFlowScope();
      LinkedFlowScope linkedFlowScope3 = new LinkedFlowScope(linkedFlowScope1);
      linkedFlowScope3.createChildFlowScope();
      Node node1 = new Node(46, 52, 53);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SHNE 52 : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("org.json.JSONArray");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.BOTH;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Scope scope1 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      linkedFlowScope1.createChildFlowScope();
      linkedFlowScope1.createChildFlowScope();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      codingConvention_AssertionFunctionSpec0.getAssertedType(node0, jSTypeRegistry0);
      Node node1 = new Node(129, 1601, 101);
      typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      typeInference0.createEntryLattice();
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      typeInference0.branchedFlowThrough(node0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("org.json.JSONArray");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      linkedFlowScope1.createChildFlowScope();
      linkedFlowScope1.createChildFlowScope();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = new Node(129, 1601, 101);
      typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      typeInference0.createEntryLattice();
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      typeInference0.branchedFlowThrough(node0, flowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope0.createChildFlowScope();
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(56, 38, 8);
      typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.TRUE;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element", jSTypeNative0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      Scope scope1 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      linkedFlowScope1.createChildFlowScope();
      Node node1 = new Node((-860), 1, 2);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -860
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      linkedFlowScope1.createChildFlowScope();
      Node node1 = new Node(4095, 8, 30);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      Node node1 = compiler0.jsRoot;
      Scope.createGlobalScope((Node) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node2 = new Node(12, 16, 151);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough((Node) null, linkedFlowScope1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet1, booleanLiteralSet0, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Element", codingConvention_AssertionFunctionSpec1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec2 = new CodingConvention.AssertionFunctionSpec("prototype", jSTypeNative0);
      linkedFlowScope0.equals(jqueryCodingConvention0);
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(130, 48, 2);
      Node node2 = new Node(37, node0, node1, node1, node1);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, flowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("\"=3)T]O=g]A'Uv5B");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"=3)T]O=g]A'Uv5B");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope0.equals("org.json.JSONArray");
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(32, 49, 0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TYPEOF 49 : string does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JOArry", "org.json.JOArry");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      Node node1 = new Node(15, 55, 38);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LE 55 : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope0.equals(codingConvention_AssertionFunctionSpec0);
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      FlowScope flowScope1 = flowScope0.createChildFlowScope();
      Node node1 = new Node(4, 49, 47);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RETURN 49 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      closureReverseAbstractInterpreter0.getFirst();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Scope scope1 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      Node node1 = new Node(15, 55, 38);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LE 55 : boolean does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      boolean boolean0 = true;
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Key");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Key");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("az", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      linkedFlowScope1.createChildFlowScope();
      Node node1 = new Node(38, 54, 12);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NAME 54 does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.json.JSONArray");
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_TRUE;
      controlFlowGraph0.connectIfNotFound(node0, controlFlowGraph_Branch0, node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("org.json.JSONArray", codingConvention_AssertionFunctionSpec0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-118);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      linkedFlowScope0.createChildFlowScope();
      Node node1 = new Node(140, node0, node0, node0, 32, 158);
      node1.getDirectives();
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node0, linkedFlowScope1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SCRIPT 1 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000615] [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000616] [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000617] does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      closureReverseAbstractInterpreter0.getFirst();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      Scope scope1 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      FlowScope flowScope1 = linkedFlowScope_FlowScopeJoinOp0.apply(flowScope0, (FlowScope) linkedFlowScope1);
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, flowScope1);
      FlowScope flowScope2 = typeInference0.createEntryLattice();
      List<FlowScope> list1 = typeInference0.branchedFlowThrough(node0, flowScope2);
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(30, node0, 4, 47);
      node1.toString();
      googleCodingConvention0.getClassesDefinedByCall(node1);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      codingConvention_AssertionFunctionSpec0.getAssertedType(node0, jSTypeRegistry0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("Object#Key", jSTypeNative0);
      linkedFlowScope0.equals(codingConvention_AssertionFunctionSpec1);
      linkedFlowScope0.createChildFlowScope();
      linkedFlowScope0.createChildFlowScope();
      Node node2 = new Node(130, 3, 29);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableBiMap<String, CodingConvention.AssertionFunctionSpec> immutableBiMap0 = ImmutableBiMap.of("Object#Element", codingConvention_AssertionFunctionSpec0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = jSType0;
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.FALSE;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet2);
      
      Compiler compiler1 = new Compiler();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableBiMap0);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node0, flowScope0);
      FlowScope flowScope2 = typeInference0.flowThrough(node0, flowScope1);
      assertSame(flowScope2, flowScope0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(4, 49, 47);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      assertNotNull(flowScope0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,/3!", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      Scope.createGlobalScope(node0);
      Node node1 = new Node(154, 1994, 40);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.createEntryLattice();
      assertSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      compiler0.getTypeRegistry();
      compiler0.getTypeRegistry();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("iT,2!M", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope0.equals(codingConvention_AssertionFunctionSpec0);
      FlowScope flowScope0 = linkedFlowScope0.createChildFlowScope();
      flowScope0.createChildFlowScope();
      Node node1 = new Node(4, 49, 47);
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("org.json.JSONArray", "org.json.JSONArray");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      Scope scope0 = Scope.createGlobalScope(node0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Element");
      ImmutableBiMap<String, CodingConvention.AssertionFunctionSpec> immutableBiMap0 = ImmutableBiMap.of("Object#Element", codingConvention_AssertionFunctionSpec0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSType0);
      ImmutableBiMap.of(functionType0, enumType0);
      googleCodingConvention0.identifyTypeDeclarationCall(node0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableBiMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node0, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.TRUE;
      boolean boolean0 = false;
      BooleanLiteralSet booleanLiteralSet1 = null;
      // Undeclared exception!
      try { 
        TypeInference.getBooleanOutcomes(booleanLiteralSet0, (BooleanLiteralSet) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("lw[<kH");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.jsRoot;
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      passConfig_PassConfigDelegate0.getTopScope();
      TypeInference typeInference0 = null;
      try {
        typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, (Scope) null, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      Scope scope0 = cleanupPasses0.topScope;
      TypeInference.getBooleanOutcomes(booleanLiteralSet1, booleanLiteralSet1, false);
      Compiler compiler0 = new Compiler();
      TypeInference typeInference0 = null;
      try {
        typeInference0 = new TypeInference(compiler0, (ControlFlowGraph<Node>) null, (ReverseAbstractInterpreter) null, (Scope) null, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.DataFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, true);
      assertSame(booleanLiteralSet0, booleanLiteralSet1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.TRUE;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, true);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      String string0 = "aOqnlAPeOx";
      MockPrintStream mockPrintStream0 = new MockPrintStream("aOqnlAPeOx");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.getCfg();
      // Undeclared exception!
      try { 
        compiler0.getReverseAbstractInterpreter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.TRUE;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      assertSame(booleanLiteralSet1, booleanLiteralSet0);
  }
}
