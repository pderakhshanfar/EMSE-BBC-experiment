* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.jscomp.TypeInference
* Starting Client-0
* Connecting to master process on port 15258
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-112/build/classes
  - subjects/buggy-versions/Closure-112/lib/args4j.jar
  - subjects/buggy-versions/Closure-112/lib/guava.jar
  - subjects/buggy-versions/Closure-112/lib/json.jar
  - subjects/buggy-versions/Closure-112/lib/jsr305.jar
  - subjects/buggy-versions/Closure-112/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-112/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-112/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.TypeInference
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2994
* Using seed 924269199
* Starting evolution
* Initial Number of Goals in DynaMOSA = 886 / 2994
[MASTER] 19:37:41.557 [logback-3] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 19:39:51.448 [logback-3] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 605s and 409 generations, 314404 statements, best individual has fitness: 1769.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 43%
* Total number of goals: 603
* Number of covered goals: 262
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 49%
* Total number of goals: 769
* Number of covered goals: 378
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 25%
* Total number of goals: 821
* Number of covered goals: 208
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 14
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 49%
* Total number of goals: 769
* Number of covered goals: 375
* Generated 140 tests with total length 1720
* Resulting test suite's coverage: 51% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 7%
* Compiling and checking tests
[MASTER] 19:50:04.837 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:50:04.837 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("com.google.javascript.jscomp.AbstractCompiler");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("com.google.javascript.jscomp.AbstractCompiler", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.AbstractCompiler");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
node0.setType(23);
FlowScope flowScope0 = typeInference0.flowThrough(node0, linkedFlowScope0);
assertTrue(flowScope0.equals((Object)linkedFlowScope0));
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 19:50:07.059 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:50:07.060 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("com.google.javascript.jscomp.AbstractCompiler");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("com.google.javascript.jscomp.AbstractCompiler", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.AbstractCompiler");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node1 = new Node(51, node0, node0, node0, node0);
FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
assertNotSame(flowScope1, flowScope0);


[MASTER] 19:50:07.200 [logback-3] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 21
* Writing tests to file
* Writing JUnit test case 'TypeInference_ESTest' to results/Closure-112/com.google.javascript.jscomp.TypeInference/default/tests/9
* Done!

* Computation finished
