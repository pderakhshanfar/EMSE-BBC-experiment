* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.jscomp.TypeInference
* Starting Client-0
* Connecting to master process on port 3655
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-112/build/classes
  - subjects/buggy-versions/Closure-112/lib/args4j.jar
  - subjects/buggy-versions/Closure-112/lib/guava.jar
  - subjects/buggy-versions/Closure-112/lib/json.jar
  - subjects/buggy-versions/Closure-112/lib/jsr305.jar
  - subjects/buggy-versions/Closure-112/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-112/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-112/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.TypeInference
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2994
* Using seed 1257642170
* Starting evolution
* Initial Number of Goals in DynaMOSA = 886 / 2994
[MASTER] 19:37:22.453 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 19:42:54.905 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 19:47:19.671 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 603s and 523 generations, 258541 statements, best individual has fitness: 2290.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 18%
* Total number of goals: 603
* Number of covered goals: 110
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 35%
* Total number of goals: 769
* Number of covered goals: 271
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 6%
* Total number of goals: 821
* Number of covered goals: 48
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 14
* Number of covered goals: 6
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 35%
* Total number of goals: 769
* Number of covered goals: 271
* Generated 101 tests with total length 1012
* Resulting test suite's coverage: 40% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 1%
* Compiling and checking tests
[MASTER] 19:48:24.741 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:24.741 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ";");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
Node node1 = Node.newString(33, ";");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:48:26.893 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:26.893 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(17, "_");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:48:28.647 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:28.647 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "z");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
List<FlowScope> list0 = typeInference0.branchedFlowThrough((Node) null, flowScope0);
assertEquals(0, list0.size());


[MASTER] 19:48:30.133 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:30.134 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(100, "_");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:48:31.603 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:31.604 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(4, "_");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:48:34.602 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:34.603 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(8, "^cFIf~4`U3'1KDi<X[7");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:48:36.579 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:36.579 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, true);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ";");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(12, ";");
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:48:38.200 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:38.200 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(14, "_");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:48:39.907 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:39.908 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(15, "");
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, treeMap0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:48:41.700 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:41.701 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(16, "Overriding @define variable ");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:48:43.527 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:43.527 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(19, "_");
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:48:45.460 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:45.460 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
Node node1 = Node.newString(20, "_");
ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("_");
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("JSC_EMPTY_ROOT_MODULE_ERROR", codingConvention_AssertionFunctionSpec0, "Object#Key", codingConvention_AssertionFunctionSpec0, "", codingConvention_AssertionFunctionSpec0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 19:48:47.532 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:47.533 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(22, "_");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:48:49.451 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:49.451 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(24, "b]");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:48:51.532 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:51.533 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(29, "");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:48:53.650 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:53.650 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createLatticeBottom(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(30, "");
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:48:55.858 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:55.859 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(31, "");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:48:58.687 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:48:58.688 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(32, "_");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:49:01.155 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:49:01.156 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(36, "_");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:49:03.544 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:49:03.544 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(37, "");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:49:05.959 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 19:49:05.960 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "_");
Scope scope0 = Scope.createGlobalScope(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString(39, "_");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 19:49:06.742 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 50
* Writing tests to file
* Writing JUnit test case 'TypeInference_ESTest' to results/Closure-112/com.google.javascript.jscomp.TypeInference/default/tests/2
* Done!

* Computation finished
