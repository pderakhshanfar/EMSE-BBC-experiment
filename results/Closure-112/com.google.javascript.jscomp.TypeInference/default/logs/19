* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: com.google.javascript.jscomp.TypeInference
* Starting Client-0
* Connecting to master process on port 10357
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-112/build/classes
  - subjects/buggy-versions/Closure-112/lib/args4j.jar
  - subjects/buggy-versions/Closure-112/lib/guava.jar
  - subjects/buggy-versions/Closure-112/lib/json.jar
  - subjects/buggy-versions/Closure-112/lib/jsr305.jar
  - subjects/buggy-versions/Closure-112/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-112/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-112/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.TypeInference
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2994
* Using seed 3385111507
* Starting evolution
* Initial Number of Goals in DynaMOSA = 886 / 2994
[MASTER] 01:39:51.049 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 01:41:06.891 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 01:41:36.654 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Search finished after 304s and 102 generations, 41850 statements, best individual has fitness: 2484.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 11%
* Total number of goals: 603
* Number of covered goals: 68
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 24%
* Total number of goals: 769
* Number of covered goals: 182
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 6
* Number of covered goals: 6
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 8%
* Total number of goals: 821
* Number of covered goals: 64
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 14
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 24%
* Total number of goals: 769
* Number of covered goals: 182
* Generated 12 tests with total length 77
* Resulting test suite's coverage: 39% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 1%
* Compiling and checking tests
[MASTER] 01:45:15.282 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 01:45:15.283 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = Node.newString("e3pZjW2O'.");
Node node1 = new Node(101, node0, node0);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(compiler0.externAndJsRoot, true, true);
compiler0.parseTestCode("JSC_FUNCTION_LITERAL_UNDEFINED_THIS");

[MASTER] 01:45:21.820 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:45:21.836 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
Node node0 = compiler0.parseTestCode("JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
List<FlowScope> list0 = typeInference0.branchedFlowThrough((Node) null, flowScope0);
assertEquals(0, list0.size());


[MASTER] 01:45:27.865 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:45:27.867 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
Node node0 = compiler0.parseTestCode("JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_TRUE;
controlFlowGraph0.connectIfNotFound((Node) null, controlFlowGraph_Branch0, (Node) null);
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
typeInference0.branchedFlowThrough((Node) null, flowScope0);

[MASTER] 01:45:33.340 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:45:33.341 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
Node node0 = compiler0.parseTestCode("JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.SYN_BLOCK;
controlFlowGraph0.connectIfNotFound((Node) null, controlFlowGraph_Branch0, (Node) null);
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
List<FlowScope> list0 = typeInference0.branchedFlowThrough((Node) null, flowScope0);
assertEquals(1, list0.size());


[MASTER] 01:45:40.199 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:45:40.207 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
Node node0 = compiler0.parseTestCode("JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node0, linkedFlowScope0);

[MASTER] 01:45:58.379 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:45:58.380 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
Node node0 = compiler0.parseTestCode("JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
node0.putBooleanProp(731, true);
Scope scope0 = Scope.createLatticeBottom(node0);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
FlowScope flowScope0 = typeInference0.createEntryLattice();
typeInference0.branchedFlowThrough(node0, flowScope0);

[MASTER] 01:45:58.382 [logback-1] WARN  TestSuiteGenerator - JUnit checking timed out
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 14
* Writing tests to file
* Writing JUnit test case 'TypeInference_ESTest' to results/Closure-112/com.google.javascript.jscomp.TypeInference/default/tests/19
* Done!

* Computation finished
