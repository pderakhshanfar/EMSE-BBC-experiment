/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:03:05 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.StreamWriteFeature;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.format.InputAccessor;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.json.JsonWriteFeature;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.RawValue;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharConversionException;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectReader_ESTest extends ObjectReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isArray());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.isDouble());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isObject());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isFloat());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isLong());
      assertEquals((short)0, doubleNode0.shortValue());
      assertNotNull(doubleNode0);
      
      Class<Object> class0 = Object.class;
      Object object0 = objectReader0.treeToValue((TreeNode) doubleNode0, class0);
      assertEquals(0.0, object0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isArray());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.isDouble());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isObject());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isFloat());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isLong());
      assertEquals((short)0, doubleNode0.shortValue());
      assertNotNull(object0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertFalse(missingNode0.isFloat());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.booleanValue());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isDouble());
      assertEquals(0, missingNode0.size());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isEmpty());
      assertNotNull(missingNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, false);
      assertFalse(missingNode0.isFloat());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.booleanValue());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isDouble());
      assertEquals(0, missingNode0.size());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isEmpty());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1826);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(byteQuadsCanonicalizer1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-96);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, pipedInputStream0, objectReader0, byteQuadsCanonicalizer1, byteArray0, 1, (byte) (-96), false);
      assertEquals(5, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(missingNode0.isFloat());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.booleanValue());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isDouble());
      assertEquals(0, missingNode0.size());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isEmpty());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-2), (byte)1, (byte)1, (byte) (-96)}, byteArray0);
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        objectReader0._bindAndReadValues((JsonParser) uTF8StreamJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNotNull(deserializationConfig0);
      
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, simpleMixInResolver0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertEquals(0, deserializationConfig1.mixInCount());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertNotNull(deserializationConfig1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      DeserializationConfig deserializationConfig2 = new DeserializationConfig(deserializationConfig1, contextAttributes0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertEquals(0, deserializationConfig1.mixInCount());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertEquals(0, deserializationConfig2.mixInCount());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig2.getRootName());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig1));
      assertNotNull(deserializationConfig2);
      
      ObjectReader objectReader1 = objectReader0._with(deserializationConfig2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(deserializationConfig0, deserializationConfig2);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig2);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNotSame(deserializationConfig2, deserializationConfig0);
      assertNotSame(deserializationConfig2, deserializationConfig1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertEquals(0, deserializationConfig1.mixInCount());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertEquals(0, deserializationConfig2.mixInCount());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig2.getRootName());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DataInput dataInput0 = null;
      // Undeclared exception!
      try { 
        objectReader0.readValue((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider0, defaultDeserializationContext0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(2);
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(2L, doubleNode0.longValue());
      assertEquals(2.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isMissingNode());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.canConvertToLong());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals(2, doubleNode0.intValue());
      assertEquals((short)2, doubleNode0.shortValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(2.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertNotNull(doubleNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, true);
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(2L, doubleNode0.longValue());
      assertEquals(2.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isMissingNode());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.canConvertToLong());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals(2, doubleNode0.intValue());
      assertEquals((short)2, doubleNode0.shortValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(2.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      StringReader stringReader0 = new StringReader("MxKD{_CXtIz");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = '-';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3141), stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 70, 3, true);
      assertEquals(2, charArray0.length);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(2L, doubleNode0.longValue());
      assertEquals(2.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isMissingNode());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.canConvertToLong());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals(2, doubleNode0.intValue());
      assertEquals((short)2, doubleNode0.shortValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(2.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals((-3141), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'\'', '-'}, charArray0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(readerBasedJsonParser0);
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(2, charArray0.length);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(2L, doubleNode0.longValue());
      assertEquals(2.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isMissingNode());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.canConvertToLong());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals(2, doubleNode0.intValue());
      assertEquals((short)2, doubleNode0.shortValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(2.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals((-3141), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'\'', '-'}, charArray0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNull(formatSchema0);
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)objectReader0._considerFilter(readerBasedJsonParser0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(2, charArray0.length);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(2L, doubleNode0.longValue());
      assertEquals(2.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isMissingNode());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.canConvertToLong());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals(2, doubleNode0.intValue());
      assertEquals((short)2, doubleNode0.shortValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(2.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals((-3141), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals((-3141), readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'\'', '-'}, charArray0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(readerBasedJsonParser1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      File file0 = MockFile.createTempFile("<ThMMl&EV]B", "");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("<ThMMl&EV]B0", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/<ThMMl&EV]B0", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      try { 
        objectReader0.readValues(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Conflicting setter definitions for property \"config\": com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params) vs com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params)
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[4];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(4, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(4, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)125;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(4, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.NO_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)0, (byte)111, (byte)68, (byte)122, (byte)1, (byte)125}, byteArray0);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders_Match0);
      
      try { 
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 1)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0001\u0001\u0000oDz\u0001}\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, injectableValues_Std0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("|'RxJko)?", (Object) "|'RxJko)?");
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotNull(injectableValues_Std1);
      
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-179), pipedReader0, objectMapper1, charsToNameCanonicalizer1, charArray0, 0, 2, true);
      assertEquals(0, charArray0.length);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals((-179), readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideStdFeatures((-833), (-4));
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, charArray0.length);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals((-835), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals((-835), readerBasedJsonParser1.getFeatureMask());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser1);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAsTree(readerBasedJsonParser1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(beanProperty_Bogus0);
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertNotNull(javaType0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._prefetchRootDeserializer(javaType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertFalse(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertNotNull(jsonDeserializer0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((byte[]) null, 1, 57343);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ShortNode shortNode0 = ShortNode.valueOf((short)2);
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertEquals(2, shortNode0.intValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isInt());
      assertTrue(shortNode0.isShort());
      assertEquals(2L, shortNode0.longValue());
      assertTrue(shortNode0.canConvertToInt());
      assertEquals(0, shortNode0.size());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isNaN());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.isMissingNode());
      assertEquals((short)2, shortNode0.shortValue());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isObject());
      assertEquals(2.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(2.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isLong());
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isDouble());
      assertNotNull(shortNode0);
      
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, shortNode0, true);
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertEquals(2, shortNode0.intValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isInt());
      assertTrue(shortNode0.isShort());
      assertEquals(2L, shortNode0.longValue());
      assertTrue(shortNode0.canConvertToInt());
      assertEquals(0, shortNode0.size());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isNaN());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.isMissingNode());
      assertEquals((short)2, shortNode0.shortValue());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isObject());
      assertEquals(2.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(2.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isLong());
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isDouble());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      int int0 = 56;
      // Undeclared exception!
      try { 
        objectReader0._inputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertNotNull(jsonParser0);
      
      JsonToken jsonToken0 = objectReader0._initForReading(defaultDeserializationContext_Impl0, jsonParser0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertEquals(JsonToken.START_ARRAY, jsonToken0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(JsonToken.START_ARRAY, jsonParser0.getCurrentToken());
      assertEquals(JsonToken.START_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(3, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(3, jsonParser0.currentTokenId());
      assertTrue(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonToken0.isNumeric());
      assertEquals(3, jsonToken0.id());
      assertTrue(jsonToken0.isStructStart());
      assertFalse(jsonToken0.isBoolean());
      assertFalse(jsonToken0.isStructEnd());
      assertEquals("[", jsonToken0.asString());
      assertFalse(jsonToken0.isScalarValue());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.configure(jsonReadFeature0, true);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8225, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(8225, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder1);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8225, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(8225, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8225, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(8225, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8225, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(8225, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      String string0 = "";
      Class<BinaryNode> class0 = BinaryNode.class;
      ObjectReader objectReader1 = objectMapper0.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile(" for format ", " for format ", (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/experiment/ for format 0 for format ", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(" for format 0 for format ", file0.getName());
      assertEquals("/experiment", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(mockFileInputStream0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser((InputStream) mockFileInputStream0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/experiment/ for format 0 for format ", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(" for format 0 for format ", file0.getName());
      assertEquals("/experiment", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals((-2), mockFileInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        objectReader1._bindAndReadValues((JsonParser) uTF8StreamJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFileInputStream); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      POJONode pOJONode0 = new POJONode(integer0);
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isDouble());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.booleanValue());
      assertNull(pOJONode0.numberType());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isBigInteger());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isMissingNode());
      assertNull(pOJONode0.textValue());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(pOJONode0);
      
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("", (Object) pOJONode0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isDouble());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.booleanValue());
      assertNull(pOJONode0.numberType());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isBigInteger());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isMissingNode());
      assertNull(pOJONode0.textValue());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(injectableValues_Std1);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isDouble());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.booleanValue());
      assertNull(pOJONode0.numberType());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isBigInteger());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isMissingNode());
      assertNull(pOJONode0.textValue());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<List> class0 = List.class;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isDouble());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.booleanValue());
      assertNull(pOJONode0.numberType());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isBigInteger());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isMissingNode());
      assertNull(pOJONode0.textValue());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isConcrete());
      assertNotNull(collectionType0);
      
      CollectionType collectionType1 = collectionType0.withContentTypeHandler("");
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isConcrete());
      assertFalse(collectionType1.isConcrete());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.isAbstract());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.isInterface());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.hasContentType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      
      CollectionType collectionType2 = collectionType1.withValueHandler(objectMapper0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isConcrete());
      assertFalse(collectionType1.isConcrete());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.isAbstract());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.isInterface());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.hasContentType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isJavaLangObject());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.isConcrete());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.isMapLikeType());
      assertTrue(collectionType2.isInterface());
      assertFalse(collectionType2.isPrimitive());
      assertTrue(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isEnumType());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.hasHandlers());
      assertTrue(collectionType2.isAbstract());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isFinal());
      assertFalse(collectionType2.useStaticType());
      assertFalse(collectionType2.isJavaLangObject());
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertNotNull(collectionType2);
      
      CollectionType collectionType3 = collectionType2.withTypeHandler("");
      assertNotSame(collectionType0, collectionType3);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType3);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType3);
      assertNotSame(collectionType3, collectionType1);
      assertNotSame(collectionType3, collectionType2);
      assertNotSame(collectionType3, collectionType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isConcrete());
      assertFalse(collectionType1.isConcrete());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.isAbstract());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.isInterface());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.hasContentType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isJavaLangObject());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.isConcrete());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.isMapLikeType());
      assertTrue(collectionType2.isInterface());
      assertFalse(collectionType2.isPrimitive());
      assertTrue(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isEnumType());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.hasHandlers());
      assertTrue(collectionType2.isAbstract());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isFinal());
      assertFalse(collectionType2.useStaticType());
      assertFalse(collectionType2.isJavaLangObject());
      assertTrue(collectionType3.hasValueHandler());
      assertFalse(collectionType3.isEnumType());
      assertTrue(collectionType3.isCollectionLikeType());
      assertEquals(1, collectionType3.containedTypeCount());
      assertFalse(collectionType3.useStaticType());
      assertTrue(collectionType3.isAbstract());
      assertTrue(collectionType3.hasHandlers());
      assertFalse(collectionType3.isMapLikeType());
      assertFalse(collectionType3.isPrimitive());
      assertFalse(collectionType3.isArrayType());
      assertTrue(collectionType3.hasContentType());
      assertTrue(collectionType3.isInterface());
      assertFalse(collectionType3.isFinal());
      assertFalse(collectionType3.isJavaLangObject());
      assertFalse(collectionType3.isConcrete());
      assertTrue(collectionType3.isContainerType());
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType3.equals((Object)collectionType2));
      assertTrue(collectionType3.equals((Object)collectionType1));
      assertTrue(collectionType3.equals((Object)collectionType0));
      assertNotNull(collectionType3);
      
      // Undeclared exception!
      try { 
        objectReader0.forType((JavaType) collectionType3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 20);
      assertNotNull(bufferedInputStream0);
      
      try { 
        objectReader0.readValues((InputStream) bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Conflicting setter definitions for property \"config\": com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params) vs com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params)
         //  at [Source: (BufferedInputStream); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNotNull(jsonParser0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      assertNotSame(arrayNode0, jsonNode0);
      assertNotSame(jsonNode0, arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(4, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertNotNull(jsonNode0);
      
      Version version0 = objectReader0.version();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(version0.isUnknownVersion());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertFalse(version0.isUknownVersion());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals(2, version0.getMajorVersion());
      assertEquals(0, version0.getPatchLevel());
      assertTrue(version0.isSnapshot());
      assertEquals(10, version0.getMinorVersion());
      assertNotNull(version0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<List> class0 = List.class;
      Class<Integer> class1 = Integer.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isInterface());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isConcrete());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.isArrayType());
      assertNotNull(collectionType0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      byte[] byteArray0 = new byte[0];
      BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0);
      assertNotSame(arrayNode0, jsonNode0);
      assertEquals(0, byteArray0.length);
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.BINARY, binaryNode0.getNodeType());
      assertEquals(0, binaryNode0.size());
      assertFalse(binaryNode0.isFloat());
      assertFalse(binaryNode0.isMissingNode());
      assertFalse(binaryNode0.isLong());
      assertFalse(binaryNode0.isBigInteger());
      assertNull(binaryNode0.textValue());
      assertFalse(binaryNode0.isInt());
      assertFalse(binaryNode0.isBigDecimal());
      assertFalse(binaryNode0.isObject());
      assertNull(binaryNode0.numberType());
      assertFalse(binaryNode0.booleanValue());
      assertFalse(binaryNode0.isIntegralNumber());
      assertFalse(binaryNode0.isShort());
      assertFalse(binaryNode0.isDouble());
      assertFalse(binaryNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, binaryNode0.asToken());
      assertFalse(binaryNode0.isArray());
      assertTrue(binaryNode0.isEmpty());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(arrayNode0.equals((Object)jsonNode0));
      assertNotNull(binaryNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, binaryNode0, true);
      assertEquals(0, byteArray0.length);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.BINARY, binaryNode0.getNodeType());
      assertEquals(0, binaryNode0.size());
      assertFalse(binaryNode0.isFloat());
      assertFalse(binaryNode0.isMissingNode());
      assertFalse(binaryNode0.isLong());
      assertFalse(binaryNode0.isBigInteger());
      assertNull(binaryNode0.textValue());
      assertFalse(binaryNode0.isInt());
      assertFalse(binaryNode0.isBigDecimal());
      assertFalse(binaryNode0.isObject());
      assertNull(binaryNode0.numberType());
      assertFalse(binaryNode0.booleanValue());
      assertFalse(binaryNode0.isIntegralNumber());
      assertFalse(binaryNode0.isShort());
      assertFalse(binaryNode0.isDouble());
      assertFalse(binaryNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, binaryNode0.asToken());
      assertFalse(binaryNode0.isArray());
      assertTrue(binaryNode0.isEmpty());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(arrayNode0.equals((Object)jsonNode0));
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer1, charArray0, 2, 0, true);
      assertEquals(1, charArray0.length);
      assertEquals(0, byteArray0.length);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(JsonNodeType.BINARY, binaryNode0.getNodeType());
      assertEquals(0, binaryNode0.size());
      assertFalse(binaryNode0.isFloat());
      assertFalse(binaryNode0.isMissingNode());
      assertFalse(binaryNode0.isLong());
      assertFalse(binaryNode0.isBigInteger());
      assertNull(binaryNode0.textValue());
      assertFalse(binaryNode0.isInt());
      assertFalse(binaryNode0.isBigDecimal());
      assertFalse(binaryNode0.isObject());
      assertNull(binaryNode0.numberType());
      assertFalse(binaryNode0.booleanValue());
      assertFalse(binaryNode0.isIntegralNumber());
      assertFalse(binaryNode0.isShort());
      assertFalse(binaryNode0.isDouble());
      assertFalse(binaryNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, binaryNode0.asToken());
      assertFalse(binaryNode0.isArray());
      assertTrue(binaryNode0.isEmpty());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertTrue(arrayNode0.equals((Object)jsonNode0));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideFormatFeatures((-972), 3);
      assertNotSame(arrayNode0, jsonNode0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(1, charArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.BINARY, binaryNode0.getNodeType());
      assertEquals(0, binaryNode0.size());
      assertFalse(binaryNode0.isFloat());
      assertFalse(binaryNode0.isMissingNode());
      assertFalse(binaryNode0.isLong());
      assertFalse(binaryNode0.isBigInteger());
      assertNull(binaryNode0.textValue());
      assertFalse(binaryNode0.isInt());
      assertFalse(binaryNode0.isBigDecimal());
      assertFalse(binaryNode0.isObject());
      assertNull(binaryNode0.numberType());
      assertFalse(binaryNode0.booleanValue());
      assertFalse(binaryNode0.isIntegralNumber());
      assertFalse(binaryNode0.isShort());
      assertFalse(binaryNode0.isDouble());
      assertFalse(binaryNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, binaryNode0.asToken());
      assertFalse(binaryNode0.isArray());
      assertTrue(binaryNode0.isEmpty());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(arrayNode0.equals((Object)jsonNode0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser1);
      
      try { 
        objectReader1.readValue((JsonParser) readerBasedJsonParser1, (ResolvedType) collectionType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertArrayEquals(new byte[] {(byte) (-75)}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) uTF8StreamJsonParser0, (JsonParser) uTF8StreamJsonParser0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte) (-75)}, byteArray0);
      assertNotNull(jsonParserSequence0);
      
      JsonParserSequence jsonParserSequence1 = (JsonParserSequence)jsonParserSequence0.skipChildren();
      assertSame(jsonParserSequence0, jsonParserSequence1);
      assertSame(jsonParserSequence1, jsonParserSequence0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertEquals(0, jsonParserSequence1.getFormatFeatures());
      assertFalse(jsonParserSequence1.canParseAsync());
      assertEquals(8193, jsonParserSequence1.getFeatureMask());
      assertFalse(jsonParserSequence1.canReadObjectId());
      assertFalse(jsonParserSequence1.requiresCustomCodec());
      assertFalse(jsonParserSequence1.canReadTypeId());
      assertEquals(2, jsonParserSequence1.containedParsersCount());
      assertArrayEquals(new byte[] {(byte) (-75)}, byteArray0);
      assertNotNull(jsonParserSequence1);
      
      try { 
        objectReader0.readValue((JsonParser) jsonParserSequence1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u00B5': was expecting ('true', 'false' or 'null')
         //  at [Source: (byte[])\"\uFFFD\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonFactory2);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonFactory3);
      
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper2.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      int int0 = 1;
      JsonFactory jsonFactory4 = jsonFactory2.copy();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertNotNull(jsonFactory4);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonGenerator_Feature0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = 'V';
      charArray0[2] = 'p';
      charArray0[3] = 'h';
      charArray0[4] = '$';
      charArray0[5] = '_';
      charArray0[6] = 'X';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper2, charsToNameCanonicalizer0, charArray0, (-1), (-1417), false);
      assertEquals(7, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'S', 'V', 'p', 'h', '$', '_', 'X'}, charArray0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.skipChildren();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(7, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'S', 'V', 'p', 'h', '$', '_', 'X'}, charArray0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(readerBasedJsonParser1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser1, tokenFilter0, false, false);
      assertEquals(7, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'S', 'V', 'p', 'h', '$', '_', 'X'}, charArray0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(filteringParserDelegate0);
      
      try { 
        objectReader0._bindAndClose(filteringParserDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertNotNull(arrayNode0);
      
      ArrayNode arrayNode1 = arrayNode0.insert(1, 1);
      assertSame(arrayNode0, arrayNode1);
      assertSame(arrayNode1, arrayNode0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isEmpty());
      assertEquals(1, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode1.isBigDecimal());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isFloat());
      assertEquals(1, arrayNode1.size());
      assertEquals("", arrayNode1.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isMissingNode());
      assertNull(arrayNode1.textValue());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertNotNull(arrayNode1);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertSame(arrayNode0, arrayNode1);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isEmpty());
      assertEquals(1, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.currentToken());
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      assertNotSame(arrayNode0, jsonNode0);
      assertSame(arrayNode0, arrayNode1);
      assertNotSame(jsonNode0, arrayNode0);
      assertNotSame(jsonNode0, arrayNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isEmpty());
      assertEquals(1, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertEquals(4, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isEmpty());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertEquals("", jsonNode0.asText());
      assertEquals(1, jsonNode0.size());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertTrue(jsonNode0.equals((Object)arrayNode1));
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertNotNull(jsonNode0);
      
      Version version0 = objectReader0.version();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertFalse(version0.isUnknownVersion());
      assertTrue(version0.isSnapshot());
      assertEquals(10, version0.getMinorVersion());
      assertEquals(0, version0.getPatchLevel());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertFalse(version0.isUknownVersion());
      assertEquals(2, version0.getMajorVersion());
      assertNotNull(version0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        objectReader0.readValue(byteArray0, (-327), (-3404));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonNode jsonNode0 = objectReader0.createArrayNode();
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isObject());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonNode0);
      
      ObjectReader objectReader2 = objectMapper0.reader();
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      String string0 = "";
      ObjectReader objectReader3 = objectMapper0.readerForUpdating(objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
      
      MappingIterator<DeserializationConfig> mappingIterator0 = objectReader3.readValues("");
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(mappingIterator0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(15, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertNotNull(jsonFactory1);
      
      try { 
        MockURL.URL("JSON");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: JSON
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(32767);
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertNotNull(arrayNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      MappingIterator<FilteringParserDelegate> mappingIterator0 = objectReader0.readValues((Reader) stringReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertNotNull(mappingIterator0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(287, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8449, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertNotNull(jsonFactory2);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory2.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(287, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8449, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(8449, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNotNull(nonBlockingJsonParser0);
      
      try { 
        objectReader0._bindAndClose(nonBlockingJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.node.ArrayNode`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[5];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      byte[] byteArray0 = new byte[0];
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertNotNull(objectNode0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(set0);
      
      ObjectNode objectNode1 = objectNode0.remove((Collection<String>) set0);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode0, objectNode1);
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.numberType());
      assertEquals(0, objectNode1.size());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertTrue(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isBigDecimal());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(objectNode1);
      
      ObjectNode objectNode2 = objectNode1.put("`typeFromId(DatabindContext,String)", "");
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertEquals(1, objectNode1.size());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isIntegralNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isShort());
      assertEquals(1, objectNode2.size());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(objectNode2);
      assertFalse(set0.contains(""));
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertEquals(1, objectNode1.size());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isIntegralNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isShort());
      assertEquals(1, objectNode2.size());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(jsonParser0);
      assertFalse(set0.contains(""));
      
      JsonNode jsonNode0 = objectReader0._bindAndCloseAsTree(jsonParser0);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertNotSame(objectNode1, jsonNode0);
      assertSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, jsonNode0);
      assertSame(objectNode2, objectNode0);
      assertNotSame(jsonNode0, objectNode1);
      assertNotSame(jsonNode0, objectNode0);
      assertNotSame(jsonNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, jsonNode0);
      assertSame(objectNode0, objectNode2);
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertEquals(1, objectNode1.size());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isIntegralNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isShort());
      assertEquals(1, objectNode2.size());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertTrue(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloat());
      assertEquals(1, jsonNode0.size());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isArray());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(jsonNode0.equals((Object)objectNode2));
      assertTrue(jsonNode0.equals((Object)objectNode1));
      assertTrue(jsonNode0.equals((Object)objectNode0));
      assertNotNull(jsonNode0);
      assertFalse(set0.contains(""));
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders_Match0);
      
      try { 
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      LongNode longNode0 = new LongNode(1095L);
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isFloatingPointNumber());
      assertFalse(longNode0.isDouble());
      assertTrue(longNode0.isIntegralNumber());
      assertEquals(1095, longNode0.intValue());
      assertEquals((short)1095, longNode0.shortValue());
      assertFalse(longNode0.isFloat());
      assertEquals(1095L, longNode0.longValue());
      assertEquals(1095.0F, longNode0.floatValue(), 0.01F);
      assertEquals(1095.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isObject());
      assertTrue(longNode0.isEmpty());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isInt());
      assertNull(longNode0.textValue());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertNotNull(longNode0);
      
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.SCALAR;
      assertEquals(JsonFormat.Shape.SCALAR, jsonFormat_Shape0);
      assertFalse(jsonFormat_Shape0.isStructured());
      assertFalse(jsonFormat_Shape0.isNumeric());
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFormat_Shape0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFormat_Shape0.isStructured());
      assertFalse(jsonFormat_Shape0.isNumeric());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0.readValue((JsonNode) longNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.annotation.JsonFormat$Shape` from number 1095: index value outside legal index range [0..9]
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)34;
      Version version0 = objectReader0.version();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(version0.isSnapshot());
      assertEquals(10, version0.getMinorVersion());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals(0, version0.getPatchLevel());
      assertFalse(version0.isUknownVersion());
      assertEquals(2, version0.getMajorVersion());
      assertFalse(version0.isUnknownVersion());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertNotNull(version0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<List> class1 = List.class;
      Class<List> class2 = List.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1650));
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertNotNull(placeholderForType0);
      
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(placeholderForType0, placeholderForType0, placeholderForType0);
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertNotNull(mapLikeType0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, placeholderForType0);
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertNotNull(referenceType0);
      
      ObjectReader objectReader1 = objectMapper0.readerFor((JavaType) referenceType0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader2 = new ObjectReader(objectReader1, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.rootValueSeparator("");
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder1);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder1);
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectReader objectReader3 = objectReader0._new(objectReader2, jsonFactory1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
      
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class2, class1);
      assertSame(class1, class2);
      assertSame(class2, class1);
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isAbstract());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertNotNull(collectionType0);
      
      BinaryNode binaryNode0 = BinaryNode.valueOf(byteArray0);
      assertEquals(17, byteArray0.length);
      assertFalse(binaryNode0.isBigInteger());
      assertEquals(JsonNodeType.BINARY, binaryNode0.getNodeType());
      assertNull(binaryNode0.textValue());
      assertTrue(binaryNode0.isEmpty());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, binaryNode0.asToken());
      assertFalse(binaryNode0.isBigDecimal());
      assertFalse(binaryNode0.isMissingNode());
      assertFalse(binaryNode0.isShort());
      assertFalse(binaryNode0.isInt());
      assertFalse(binaryNode0.isArray());
      assertNull(binaryNode0.numberType());
      assertFalse(binaryNode0.isObject());
      assertFalse(binaryNode0.booleanValue());
      assertEquals(0, binaryNode0.size());
      assertFalse(binaryNode0.isLong());
      assertFalse(binaryNode0.isIntegralNumber());
      assertFalse(binaryNode0.isDouble());
      assertFalse(binaryNode0.isFloatingPointNumber());
      assertFalse(binaryNode0.isFloat());
      assertNotNull(binaryNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(binaryNode0);
      assertEquals(17, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(binaryNode0.isBigInteger());
      assertEquals(JsonNodeType.BINARY, binaryNode0.getNodeType());
      assertNull(binaryNode0.textValue());
      assertTrue(binaryNode0.isEmpty());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, binaryNode0.asToken());
      assertFalse(binaryNode0.isBigDecimal());
      assertFalse(binaryNode0.isMissingNode());
      assertFalse(binaryNode0.isShort());
      assertFalse(binaryNode0.isInt());
      assertFalse(binaryNode0.isArray());
      assertNull(binaryNode0.numberType());
      assertFalse(binaryNode0.isObject());
      assertFalse(binaryNode0.booleanValue());
      assertEquals(0, binaryNode0.size());
      assertFalse(binaryNode0.isLong());
      assertFalse(binaryNode0.isIntegralNumber());
      assertFalse(binaryNode0.isDouble());
      assertFalse(binaryNode0.isFloatingPointNumber());
      assertFalse(binaryNode0.isFloat());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNotNull(jsonParser0);
      
      try { 
        objectReader0.readValue(jsonParser0, (ResolvedType) collectionType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `java.util.ArrayList` out of VALUE_EMBEDDED_OBJECT token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<Integer> class0 = Integer.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNotNull(objectNode0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(7, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      Class<Object> class1 = Object.class;
      LinkedHashMap linkedHashMap0 = (LinkedHashMap)objectReader1.treeToValue((TreeNode) objectNode0, class1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(7, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(linkedHashMap0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[4] = (byte)34;
      PlaceholderForType placeholderForType0 = objectReader0.readValue(byteArray0);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)34, (byte)34, (byte)34}, byteArray0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNull(placeholderForType0);
      
      // Undeclared exception!
      try { 
        objectReader1._detectBindAndClose(byteArray0, (byte)34, (byte)34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)104;
      byteArray0[8] = (byte)20;
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertNotNull(javaType0);
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertNotNull(collectionLikeType0);
      
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, (TypeBindings) null);
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isFinal());
      assertNotNull(arrayType0);
      
      ArrayType arrayType1 = arrayType0.withTypeHandler((Object) null);
      assertSame(arrayType0, arrayType1);
      assertSame(arrayType1, arrayType0);
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.useStaticType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isJavaLangObject());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.hasHandlers());
      assertNotNull(arrayType1);
      
      ArrayType arrayType2 = arrayType1.withContentValueHandler(javaType0);
      assertNotSame(arrayType2, arrayType0);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType0, arrayType2);
      assertSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType2);
      assertSame(arrayType1, arrayType0);
      assertFalse(arrayType2.isCollectionLikeType());
      assertTrue(arrayType2.isConcrete());
      assertTrue(arrayType2.isContainerType());
      assertFalse(arrayType2.isEnumType());
      assertFalse(arrayType2.isInterface());
      assertEquals(0, arrayType2.containedTypeCount());
      assertTrue(arrayType2.isArrayType());
      assertFalse(arrayType2.hasValueHandler());
      assertFalse(arrayType2.isAbstract());
      assertFalse(arrayType2.isMapLikeType());
      assertFalse(arrayType2.useStaticType());
      assertFalse(arrayType2.isPrimitive());
      assertFalse(arrayType2.isJavaLangObject());
      assertTrue(arrayType2.hasHandlers());
      assertTrue(arrayType2.hasContentType());
      assertTrue(arrayType2.isFinal());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.useStaticType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isJavaLangObject());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.hasHandlers());
      assertTrue(arrayType2.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertNotNull(arrayType2);
      
      // Undeclared exception!
      try { 
        objectReader0.withType((Type) arrayType2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.SimpleType cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)34;
      byteArray0[2] = (byte) (-21);
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertNotNull(objectNode0);
      
      Class<Object> class1 = Object.class;
      LinkedHashMap linkedHashMap0 = (LinkedHashMap)objectReader0.treeToValue((TreeNode) objectNode0, class1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(17, byteArray0.length);
      assertEquals(17, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)34);
      assertEquals(17, byteArray0.length);
      assertEquals(17, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      assertEquals(17, byteArray0.length);
      assertEquals(17, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      MappingIterator<MapType> mappingIterator0 = objectReader0.readValues((InputStream) sequenceInputStream0);
      assertEquals(17, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isInterface());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertNotNull(collectionType0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0);
      
      JsonParser jsonParser1 = objectReader0._considerFilter((JsonParser) null, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonParser1);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) null, (ResolvedType) collectionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.databind.deser.impl.ValueInjector");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = '5';
      charArray0[2] = '[';
      charArray0[3] = 'd';
      charArray0[4] = 'h';
      charArray0[5] = 'd';
      charArray0[6] = ']';
      charArray0[7] = 'l';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 292, 1802, true);
      assertEquals(8, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'*', '5', '[', 'd', 'h', 'd', ']', 'l'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 292
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(159, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(159, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(159, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(159, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<Module> class0 = Module.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(159, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(159, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(byteArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(159, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-50), (byte)1, (byte)75, (byte) (-1)}, byteArray0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(uTF8StreamJsonParser0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertNotNull(collectionType0);
      
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.isInterface());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isConcrete());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isAbstract());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.useStaticType());
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      
      Iterator<NullNode> iterator0 = objectReader0.readValues((JsonParser) uTF8StreamJsonParser0, (ResolvedType) collectionType1);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertEquals(5, byteArray0.length);
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.isInterface());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isConcrete());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isAbstract());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.useStaticType());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(159, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(159, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-50), (byte)1, (byte)75, (byte) (-1)}, byteArray0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(iterator0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = '(';
      charArray0[2] = ')';
      charArray0[3] = '5';
      charArray0[4] = 'D';
      charArray0[5] = 'U';
      charArray0[6] = ':';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0, (int) (byte) (-1), (-951));
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals(7, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(159, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertArrayEquals(new char[] {'B', '(', ')', '5', 'D', 'U', ':'}, charArray0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(readerBasedJsonParser0);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JSON", "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      try { 
        objectReader0.readValue(byteArray0, 3, 347);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Unsupported UCS-4 endianness (3412) detected
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0, (-969), (-969));
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TILC^fNxJ0IwuR");
      assertFalse(boolean0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(jsonNode0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.currentToken());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonParser0);
      
      JsonToken jsonToken0 = objectReader0._initForReading((DeserializationContext) null, jsonParser0);
      assertEquals(JsonToken.NOT_AVAILABLE, jsonToken0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonParser0.currentToken());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals((-1), jsonParser0.currentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals((-1), jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonToken0.isStructStart());
      assertFalse(jsonToken0.isBoolean());
      assertEquals((-1), jsonToken0.id());
      assertNull(jsonToken0.asString());
      assertFalse(jsonToken0.isScalarValue());
      assertFalse(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isNumeric());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      // Undeclared exception!
      try { 
        objectReader0._initForReading(deserializationContext0, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isEmpty());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isEmpty());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      assertNotSame(arrayNode0, jsonNode0);
      assertNotSame(jsonNode0, arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isEmpty());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(4, jsonParser0.currentTokenId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isArray());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertNotNull(jsonNode0);
      
      Version version0 = objectReader0.version();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(version0.isUnknownVersion());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertTrue(version0.isSnapshot());
      assertEquals(0, version0.getPatchLevel());
      assertEquals(2, version0.getMajorVersion());
      assertEquals(10, version0.getMinorVersion());
      assertFalse(version0.isUknownVersion());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertNotNull(version0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<List> class0 = List.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isConcrete());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isInterface());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertNotNull(collectionType0);
      
      BooleanNode booleanNode0 = objectReader0.readValue(jsonParser0, (ResolvedType) collectionType0);
      assertNotSame(arrayNode0, jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isEmpty());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isConcrete());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isInterface());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(arrayNode0.equals((Object)jsonNode0));
      assertNull(booleanNode0);
      
      Iterator<FloatNode> iterator0 = objectReader0.readValues(jsonParser0, (JavaType) collectionType0);
      assertNotSame(arrayNode0, jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isEmpty());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isConcrete());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isInterface());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(arrayNode0.equals((Object)jsonNode0));
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)99;
      ObjectReader[] objectReaderArray0 = new ObjectReader[7];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(7, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMaxInputLookahead(1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(7, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(4, byteArray0.length);
      assertEquals(7, objectReaderArray0.length);
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.WEAK_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)1, (byte)99}, byteArray0);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertNotNull(dataFormatReaders_Match0);
      
      MappingIterator<ObjectReader> mappingIterator0 = objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, false);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(4, byteArray0.length);
      assertEquals(7, objectReaderArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.WEAK_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)1, (byte)99}, byteArray0);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertNotNull(mappingIterator0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.readValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ShortNode shortNode0 = ShortNode.valueOf((short)1042);
      assertFalse(shortNode0.isFloatingPointNumber());
      assertFalse(shortNode0.isFloat());
      assertEquals(1042, shortNode0.intValue());
      assertTrue(shortNode0.canConvertToInt());
      assertEquals((short)1042, shortNode0.shortValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.booleanValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isEmpty());
      assertEquals(1042.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isInt());
      assertEquals(1042L, shortNode0.longValue());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isNaN());
      assertEquals(1042.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isLong());
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.canConvertToLong());
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.isObject());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertNull(shortNode0.textValue());
      assertNotNull(shortNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, shortNode0, true);
      assertFalse(shortNode0.isFloatingPointNumber());
      assertFalse(shortNode0.isFloat());
      assertEquals(1042, shortNode0.intValue());
      assertTrue(shortNode0.canConvertToInt());
      assertEquals((short)1042, shortNode0.shortValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.booleanValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isEmpty());
      assertEquals(1042.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isInt());
      assertEquals(1042L, shortNode0.longValue());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isNaN());
      assertEquals(1042.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isLong());
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.canConvertToLong());
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.isObject());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertNull(shortNode0.textValue());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader(2);
      assertNotNull(pipedReader0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader1 = objectMapper0.reader(contextAttributes0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1791);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = 'E';
      charArray0[2] = '7';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1791, pipedReader0, objectReader1, charsToNameCanonicalizer1, charArray0, 3, 1360, true);
      assertEquals(3, charArray0.length);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertFalse(shortNode0.isFloat());
      assertEquals(1042, shortNode0.intValue());
      assertTrue(shortNode0.canConvertToInt());
      assertEquals((short)1042, shortNode0.shortValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.booleanValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isEmpty());
      assertEquals(1042.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isInt());
      assertEquals(1042L, shortNode0.longValue());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isNaN());
      assertEquals(1042.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isLong());
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.canConvertToLong());
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.isObject());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertNull(shortNode0.textValue());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1791, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'{', 'E', '7'}, charArray0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(3, charArray0.length);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertFalse(shortNode0.isFloat());
      assertEquals(1042, shortNode0.intValue());
      assertTrue(shortNode0.canConvertToInt());
      assertEquals((short)1042, shortNode0.shortValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.booleanValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isEmpty());
      assertEquals(1042.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isInt());
      assertEquals(1042L, shortNode0.longValue());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isNaN());
      assertEquals(1042.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isLong());
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.canConvertToLong());
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.isObject());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertNull(shortNode0.textValue());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1791, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1791, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'{', 'E', '7'}, charArray0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertNotNull(readerBasedJsonParser1);
      
      Class<IntNode> class0 = IntNode.class;
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser1, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertTrue(doubleNode0.isDouble());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.size());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isLong());
      assertNull(doubleNode0.textValue());
      assertEquals((short)0, doubleNode0.shortValue());
      assertFalse(doubleNode0.isShort());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isBigDecimal());
      assertNotNull(doubleNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertTrue(doubleNode0.isDouble());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.size());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isLong());
      assertNull(doubleNode0.textValue());
      assertEquals((short)0, doubleNode0.shortValue());
      assertFalse(doubleNode0.isShort());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNotNull(jsonParser0);
      
      Class<Object> class0 = Object.class;
      Object object0 = objectReader0.treeToValue((TreeNode) doubleNode0, class0);
      assertEquals(0.0, object0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertTrue(doubleNode0.isDouble());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.size());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isLong());
      assertNull(doubleNode0.textValue());
      assertEquals((short)0, doubleNode0.shortValue());
      assertFalse(doubleNode0.isShort());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isBigDecimal());
      assertNotNull(object0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertTrue(doubleNode0.isDouble());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.size());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isLong());
      assertNull(doubleNode0.textValue());
      assertEquals((short)0, doubleNode0.shortValue());
      assertFalse(doubleNode0.isShort());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertNotNull(defaultDeserializationContext0);
      
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      assertEquals(0, javaTypeArray0.length);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertEquals(0, javaTypeArray0.length);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertNotNull(resolvedRecursiveType0);
      
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertEquals(0, javaTypeArray0.length);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertNotNull(javaType0);
      
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParser0, defaultDeserializationContext0, javaType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type VALUE_NUMBER_FLOAT) found after value (bound as `java.lang.Object`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[8];
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      // Undeclared exception!
      try { 
        objectReader0.with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      ObjectReader[] objectReaderArray0 = new ObjectReader[5];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.SOLID_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withOptimalMatch(matchStrength0);
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders1);
      
      ObjectReader objectReader1 = objectReader0.at((JsonPointer) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      MockFile mockFile0 = new MockFile("expected a value", "C-9WDGnjCN+*-");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setReadable(true, true);
      assertFalse(boolean0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/expected a value/C-9WDGnjCN+*-", mockFile0.toString());
      assertEquals("C-9WDGnjCN+*-", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/expected a value", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      File file0 = MockFile.createTempFile(":`E>d|Oz", "3i<@9qqq3>4'AT", (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/expected a value/C-9WDGnjCN+*-", mockFile0.toString());
      assertEquals("C-9WDGnjCN+*-", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/expected a value", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/experiment/expected a value/C-9WDGnjCN+*-/:`E>d|Oz03i<@9qqq3>4'AT", file0.toString());
      assertEquals(":`E>d|Oz03i<@9qqq3>4'AT", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/experiment/expected a value/C-9WDGnjCN+*-", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      
      InputStream inputStream0 = objectReader0._inputStream(file0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(0, inputStream0.available());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/expected a value/C-9WDGnjCN+*-", mockFile0.toString());
      assertEquals("C-9WDGnjCN+*-", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/expected a value", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/experiment/expected a value/C-9WDGnjCN+*-/:`E>d|Oz03i<@9qqq3>4'AT", file0.toString());
      assertEquals(":`E>d|Oz03i<@9qqq3>4'AT", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/experiment/expected a value/C-9WDGnjCN+*-", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(inputStream0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      // Undeclared exception!
      try { 
        objectReader0.withoutFeatures((JsonParser.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("nsit'$?*mc");
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAndReadValues((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'nsit': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: (String)\"nsit'$?*mc\"; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<MissingNode> class0 = MissingNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader1 = objectReader0.with(jsonNodeFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonParser jsonParser0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Float float0 = new Float((-26.7262));
      assertEquals((-26.7262F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      FloatNode floatNode0 = (FloatNode)jsonNodeFactory0.numberNode(float0);
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((-26.726200103759766), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertEquals((-26), floatNode0.intValue());
      assertEquals((-26L), floatNode0.longValue());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.booleanValue());
      assertEquals((-26.7262F), floatNode0.floatValue(), 0.01F);
      assertTrue(floatNode0.isFloat());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigDecimal());
      assertNull(floatNode0.textValue());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals((short) (-26), floatNode0.shortValue());
      assertNotNull(floatNode0);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAndCloseAsTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.springframework.");
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<MapLikeType> class0 = MapLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TextNode textNode0 = new TextNode("mE)lllh");
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isLong());
      assertEquals("mE)lllh", textNode0.asText());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isShort());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isInt());
      assertEquals("mE)lllh", textNode0.textValue());
      assertNotNull(textNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(textNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isLong());
      assertEquals("mE)lllh", textNode0.asText());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isShort());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isInt());
      assertEquals("mE)lllh", textNode0.textValue());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertNotNull(jsonParser0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isLong());
      assertEquals("mE)lllh", textNode0.asText());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isShort());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isInt());
      assertEquals("mE)lllh", textNode0.textValue());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertEquals(0, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertNotNull(jsonParserDelegate0);
      
      boolean boolean1 = jsonParserDelegate0.getValueAsBoolean(false);
      assertFalse(boolean1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isLong());
      assertEquals("mE)lllh", textNode0.asText());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isShort());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isInt());
      assertEquals("mE)lllh", textNode0.textValue());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertEquals(0, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertTrue(boolean1 == boolean0);
      
      MappingIterator<Integer> mappingIterator0 = objectReader0._bindAndReadValues((JsonParser) jsonParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isLong());
      assertEquals("mE)lllh", textNode0.asText());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isShort());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isInt());
      assertEquals("mE)lllh", textNode0.textValue());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(JsonToken.VALUE_STRING, jsonParser0.currentToken());
      assertEquals(JsonToken.VALUE_STRING, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(6, jsonParser0.getCurrentTokenId());
      assertEquals(6, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertEquals(0, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertNotNull(mappingIterator0);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      boolean boolean2 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "org.springframework.");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectReader objectReader1 = objectReader0.withFeatures(jsonParser_FeatureArray0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(2, jsonParser_FeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.readValue((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      assertEquals(0L, doubleNode0.longValue());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.size());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isIntegralNumber());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isArray());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isFloat());
      assertEquals((short)0, doubleNode0.shortValue());
      assertEquals(0, doubleNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isBigDecimal());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.booleanValue());
      assertNotNull(doubleNode0);
      
      try { 
        objectReader0.readValues((Reader) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Conflicting setter definitions for property \"config\": com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params) vs com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params)
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser("JSON");
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(readerBasedJsonParser0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(8193, jsonParserDelegate0.getFeatureMask());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonParserDelegate0);
      
      Class<JsonFormat.Shape> class0 = JsonFormat.Shape.class;
      try { 
        objectReader0.readValue((JsonParser) jsonParserDelegate0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((Double) null);
      assertFalse(valueNode0.isBigInteger());
      assertEquals("null", valueNode0.asText());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isMissingNode());
      assertNull(valueNode0.textValue());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isDouble());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.booleanValue());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isObject());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isLong());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isFloat());
      assertNotNull(valueNode0);
      
      FloatNode floatNode0 = FloatNode.valueOf((-3231.999F));
      assertFalse(floatNode0.isArray());
      assertEquals((-3231.999F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals((short) (-3231), floatNode0.shortValue());
      assertTrue(floatNode0.canConvertToInt());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((-3231), floatNode0.intValue());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isNaN());
      assertEquals((-3231L), floatNode0.longValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.isEmpty());
      assertEquals((-3231.9990234375), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToLong());
      assertNotNull(floatNode0);
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(valueNode0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(valueNode0.isBigInteger());
      assertEquals("null", valueNode0.asText());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isMissingNode());
      assertNull(valueNode0.textValue());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isDouble());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.booleanValue());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isObject());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isLong());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isFloat());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      NullNode nullNode0 = (NullNode)objectReader1.readValue((JsonNode) floatNode0);
      assertSame(valueNode0, nullNode0);
      assertNotSame(objectReader1, objectReader0);
      assertSame(nullNode0, valueNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(valueNode0.isBigInteger());
      assertEquals("null", valueNode0.asText());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isMissingNode());
      assertNull(valueNode0.textValue());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isDouble());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.booleanValue());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isObject());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isLong());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertEquals((-3231.999F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals((short) (-3231), floatNode0.shortValue());
      assertTrue(floatNode0.canConvertToInt());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((-3231), floatNode0.intValue());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isNaN());
      assertEquals((-3231L), floatNode0.longValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.isEmpty());
      assertEquals((-3231.9990234375), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isFloat());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isInt());
      assertEquals("null", nullNode0.asText());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isObject());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isArray());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertTrue(nullNode0.isEmpty());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(nullNode0);
      
      try { 
        MockURI.URI("Class %s not subtype of %s", "Class %s not subtype of %s", "Class %s not subtype of %s", "Class %s not subtype of %s", "Not implemented for ObjectReader");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: Class %s not subtype of %s://Class%20%25s%20not%20subtype%20of%20%25sClass%20%25s%20not%20subtype%20of%20%25s?Class%20%25s%20not%20subtype%20of%20%25s#Not%20implemented%20for%20ObjectReader
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      assertFalse(doubleNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals(0L, doubleNode0.longValue());
      assertNull(doubleNode0.textValue());
      assertEquals((short)0, doubleNode0.shortValue());
      assertTrue(doubleNode0.isDouble());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isInt());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isBigInteger());
      assertNotNull(doubleNode0);
      
      Version version0 = objectMapper0.version();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(version0.isSnapshot());
      assertEquals(10, version0.getMinorVersion());
      assertFalse(version0.isUknownVersion());
      assertEquals(2, version0.getMajorVersion());
      assertEquals(0, version0.getPatchLevel());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertFalse(version0.isUnknownVersion());
      assertNotNull(version0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<List> class0 = List.class;
      Class<DecimalNode> class1 = DecimalNode.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isAbstract());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertNotNull(collectionType0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(byteArray0, (int) (byte)55, 1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertArrayEquals(new byte[] {(byte)1, (byte) (-89), (byte) (-42), (byte)1, (byte)111, (byte)55, (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) uTF8StreamJsonParser0, (ResolvedType) collectionType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 55
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.withRootName("com.fasterxml.jackson.databind.node.NodeCursor$ArrayCursor");
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      assertNotNull(pushbackInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader1.readTree((InputStream) pushbackInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      double double0 = 0.0;
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser(byteArray0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        objectReader0.readTree((JsonParser) uTF8StreamJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u00FF': was expecting ('true', 'false' or 'null')
         //  at [Source: (byte[])\"\uFFFD\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((Double) null);
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isShort());
      assertNull(valueNode0.textValue());
      assertEquals("null", valueNode0.asText());
      assertFalse(valueNode0.isBigDecimal());
      assertTrue(valueNode0.isEmpty());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isIntegralNumber());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isLong());
      assertNotNull(valueNode0);
      
      FloatNode floatNode0 = FloatNode.valueOf((-3231.999F));
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals((-3231.9990234375), floatNode0.doubleValue(), 0.01);
      assertEquals((-3231L), floatNode0.longValue());
      assertTrue(floatNode0.canConvertToInt());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((-3231), floatNode0.intValue());
      assertFalse(floatNode0.isDouble());
      assertEquals((-3231.999F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((short) (-3231), floatNode0.shortValue());
      assertFalse(floatNode0.isBigInteger());
      assertNotNull(floatNode0);
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(floatNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals((-3231.9990234375), floatNode0.doubleValue(), 0.01);
      assertEquals((-3231L), floatNode0.longValue());
      assertTrue(floatNode0.canConvertToInt());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((-3231), floatNode0.intValue());
      assertFalse(floatNode0.isDouble());
      assertEquals((-3231.999F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((short) (-3231), floatNode0.shortValue());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      FloatNode floatNode1 = (FloatNode)objectReader1.readValue((JsonNode) valueNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(floatNode0, floatNode1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(floatNode1, floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isShort());
      assertNull(valueNode0.textValue());
      assertEquals("null", valueNode0.asText());
      assertFalse(valueNode0.isBigDecimal());
      assertTrue(valueNode0.isEmpty());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isIntegralNumber());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isLong());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals((-3231.9990234375), floatNode0.doubleValue(), 0.01);
      assertEquals((-3231L), floatNode0.longValue());
      assertTrue(floatNode0.canConvertToInt());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((-3231), floatNode0.intValue());
      assertFalse(floatNode0.isDouble());
      assertEquals((-3231.999F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((short) (-3231), floatNode0.shortValue());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode1.isDouble());
      assertEquals(0, floatNode1.size());
      assertFalse(floatNode1.isMissingNode());
      assertEquals((-3231), floatNode1.intValue());
      assertTrue(floatNode1.isFloat());
      assertFalse(floatNode1.isLong());
      assertEquals((-3231.999F), floatNode1.floatValue(), 0.01F);
      assertFalse(floatNode1.booleanValue());
      assertFalse(floatNode1.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertFalse(floatNode1.isBigInteger());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertFalse(floatNode1.isIntegralNumber());
      assertFalse(floatNode1.isNaN());
      assertEquals((short) (-3231), floatNode1.shortValue());
      assertTrue(floatNode1.isEmpty());
      assertFalse(floatNode1.isInt());
      assertFalse(floatNode1.isShort());
      assertTrue(floatNode1.canConvertToLong());
      assertFalse(floatNode1.isObject());
      assertEquals((-3231L), floatNode1.longValue());
      assertNull(floatNode1.textValue());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertEquals((-3231.9990234375), floatNode1.doubleValue(), 0.01);
      assertTrue(floatNode1.canConvertToInt());
      assertFalse(floatNode1.isArray());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(floatNode1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      ObjectReader objectReader1 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader0._new(objectReader1, (JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isShort());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isFloat());
      assertEquals((short)0, doubleNode0.shortValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(0, doubleNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertTrue(doubleNode0.canConvertToInt());
      assertNotNull(doubleNode0);
      
      Iterator<JsonNode> iterator0 = doubleNode0.elements();
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isShort());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isFloat());
      assertEquals((short)0, doubleNode0.shortValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(0, doubleNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertTrue(doubleNode0.canConvertToInt());
      assertNotNull(iterator0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isShort());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isFloat());
      assertEquals((short)0, doubleNode0.shortValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(0, doubleNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNotNull(jsonParser0);
      
      Class<Object> class0 = Object.class;
      Object object0 = objectReader0.treeToValue((TreeNode) doubleNode0, class0);
      assertEquals(0.0, object0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isShort());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isFloat());
      assertEquals((short)0, doubleNode0.shortValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(0, doubleNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertTrue(doubleNode0.canConvertToInt());
      assertNotNull(object0);
      
      try { 
        objectReader0.readValues("\"e O(#w,rTEx2yn-a");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Conflicting setter definitions for property \"config\": com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params) vs com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params)
         //  at [Source: (String)\"\"e O(#w,rTEx2yn-a\"; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isLong());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isArray());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertNull(doubleNode0.textValue());
      assertEquals((short)0, doubleNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isShort());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.isEmpty());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isInt());
      assertNotNull(doubleNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isLong());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isArray());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertNull(doubleNode0.textValue());
      assertEquals((short)0, doubleNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isShort());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.isEmpty());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isInt());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNotNull(jsonParser0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      DoubleNode doubleNode1 = (DoubleNode)jsonNodeFactory0.numberNode(double0);
      assertNotSame(doubleNode1, doubleNode0);
      assertFalse(doubleNode1.isIntegralNumber());
      assertFalse(doubleNode1.isNaN());
      assertEquals(0, doubleNode1.intValue());
      assertFalse(doubleNode1.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, doubleNode1.getNodeType());
      assertFalse(doubleNode1.isArray());
      assertTrue(doubleNode1.canConvertToLong());
      assertEquals(0.0, doubleNode1.doubleValue(), 0.01);
      assertEquals(0, doubleNode1.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode1.asToken());
      assertFalse(doubleNode1.isMissingNode());
      assertTrue(doubleNode1.canConvertToInt());
      assertFalse(doubleNode1.isInt());
      assertFalse(doubleNode1.booleanValue());
      assertEquals(0.0F, doubleNode1.floatValue(), 0.01F);
      assertFalse(doubleNode1.isShort());
      assertTrue(doubleNode1.isEmpty());
      assertTrue(doubleNode1.isDouble());
      assertFalse(doubleNode1.isLong());
      assertNull(doubleNode1.textValue());
      assertEquals((short)0, doubleNode1.shortValue());
      assertFalse(doubleNode1.isFloat());
      assertEquals(0L, doubleNode1.longValue());
      assertTrue(doubleNode1.isFloatingPointNumber());
      assertFalse(doubleNode1.isBigDecimal());
      assertFalse(doubleNode1.isObject());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode1.numberType());
      assertTrue(doubleNode1.equals((Object)doubleNode0));
      assertNotNull(doubleNode1);
      
      try { 
        objectReader0.readValue((JsonNode) doubleNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Conflicting setter definitions for property \"config\": com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params) vs com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertNull(doubleNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.isDouble());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isObject());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertFalse(doubleNode0.isBigDecimal());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isFloat());
      assertEquals((short)0, doubleNode0.shortValue());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isLong());
      assertNotNull(doubleNode0);
      
      Iterator<JsonNode> iterator0 = doubleNode0.elements();
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertNull(doubleNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.isDouble());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isObject());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertFalse(doubleNode0.isBigDecimal());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isFloat());
      assertEquals((short)0, doubleNode0.shortValue());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isLong());
      assertNotNull(iterator0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertNull(doubleNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.isDouble());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isObject());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertFalse(doubleNode0.isBigDecimal());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isFloat());
      assertEquals((short)0, doubleNode0.shortValue());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNotNull(jsonParser0);
      
      Class<Object> class0 = Object.class;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)108, (byte)75, (byte)0, (byte)53}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)108, (byte)75, (byte)0, (byte)53}, byteArray0);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.currentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNotNull(filteringParserDelegate0);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAndCloseAsTree(filteringParserDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0L, doubleNode0.longValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertNull(doubleNode0.textValue());
      assertEquals((short)0, doubleNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isFloat());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertNotNull(doubleNode0);
      
      long long0 = doubleNode0.asLong();
      assertEquals(0L, long0);
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0L, doubleNode0.longValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertNull(doubleNode0.textValue());
      assertEquals((short)0, doubleNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isFloat());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      
      Iterator<JsonNode> iterator0 = doubleNode0.elements();
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0L, doubleNode0.longValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertNull(doubleNode0.textValue());
      assertEquals((short)0, doubleNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isFloat());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertNotNull(iterator0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0L, doubleNode0.longValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertNull(doubleNode0.textValue());
      assertEquals((short)0, doubleNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isFloat());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNotNull(jsonParser0);
      
      Class<Object> class0 = Object.class;
      try { 
        objectReader0.readValue(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Conflicting setter definitions for property \"config\": com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params) vs com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      DataInput dataInput0 = null;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)objectReader0._considerFilter(readerBasedJsonParser0, true);
      assertSame(objectMapper0, objectMapper1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(2, readerBasedJsonParser1.getFeatureMask());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(readerBasedJsonParser1);
      
      try { 
        objectReader0._bind(readerBasedJsonParser1, objectMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader1 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      try { 
        objectReader1.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: (byte[])\"\"\u0000\u0000\u0000\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-66);
      MappingIterator<List<PropertyName>> mappingIterator0 = objectReader0.readValues(byteArray0, (int)  (-66), 0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-66)}, byteArray0);
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Conflicting setter definitions for property \"config\": com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params) vs com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params)
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isObject());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isLong());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(0L, doubleNode0.longValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals((short)0, doubleNode0.shortValue());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertNotNull(doubleNode0);
      
      Iterator<JsonNode> iterator0 = doubleNode0.elements();
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isObject());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isLong());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(0L, doubleNode0.longValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals((short)0, doubleNode0.shortValue());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertNotNull(iterator0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isObject());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isLong());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(0L, doubleNode0.longValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals((short)0, doubleNode0.shortValue());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNotNull(jsonParser0);
      
      Class<Object> class0 = Object.class;
      Object object0 = objectReader0.treeToValue((TreeNode) doubleNode0, class0);
      assertEquals(0.0, object0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isObject());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isLong());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(0L, doubleNode0.longValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals((short)0, doubleNode0.shortValue());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertNotNull(object0);
      
      try { 
        objectReader0.readValue("\"L)O\" MJ.I-o");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Conflicting setter definitions for property \"config\": com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params) vs com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params)
         //  at [Source: (String)\"\"L)O\" MJ.I-o\"; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("|)WAED)hN}n", "|)WAED)hN}n");
      assertNotNull(mockFile0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("|)WAED)hN}n");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("|)WAED)hN}n", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("|)WAED)hN}n", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("|)WAED)hN}n", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("|)WAED)hN}n", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("|)WAED)hN}n", jsonFactory2.getRootValueSeparator());
      assertNotNull(jsonFactory2);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory2.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("|)WAED)hN}n", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("|)WAED)hN}n", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("|)WAED)hN}n", jsonFactory2.getRootValueSeparator());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNotNull(nonBlockingJsonParser0);
      
      try { 
        objectReader0.readValues((JsonParser) nonBlockingJsonParser0, (ResolvedType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8257, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8257, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("0>s@m/w!LJKZ8%n+s ");
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals("0>s@m/w!LJKZ8%n+s ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8257, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("0>s@m/w!LJKZ8%n+s ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8257, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("0>s@m/w!LJKZ8%n+s ", jsonFactory2.getRootValueSeparator());
      assertEquals(8257, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory2);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals("0>s@m/w!LJKZ8%n+s ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8257, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(15, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("0>s@m/w!LJKZ8%n+s ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8257, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("0>s@m/w!LJKZ8%n+s ", jsonFactory2.getRootValueSeparator());
      assertEquals(8257, jsonFactory2.getParserFeatures());
      assertEquals(15, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(15, jsonFactory3.getGeneratorFeatures());
      assertEquals(8257, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("0>s@m/w!LJKZ8%n+s ", jsonFactory3.getRootValueSeparator());
      assertNotNull(jsonFactory3);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)98;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-33), (byte) (-15), (byte)16, (byte) (-80), (byte)98}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory3.createParser((InputStream) byteArrayInputStream0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals(5, byteArray0.length);
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(8257, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals("0>s@m/w!LJKZ8%n+s ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8257, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(15, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("0>s@m/w!LJKZ8%n+s ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8257, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("0>s@m/w!LJKZ8%n+s ", jsonFactory2.getRootValueSeparator());
      assertEquals(8257, jsonFactory2.getParserFeatures());
      assertEquals(15, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(15, jsonFactory3.getGeneratorFeatures());
      assertEquals(8257, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("0>s@m/w!LJKZ8%n+s ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-33), (byte) (-15), (byte)16, (byte) (-80), (byte)98}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        objectReader0._verifyNoTrailingTokens(uTF8StreamJsonParser0, (DeserializationContext) null, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x10
         //  at [Source: (ByteArrayInputStream); line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[5];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte)126;
      byteArray0[8] = (byte) (-65);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(9, byteArray0.length);
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertEquals(MatchStrength.NO_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-96), (byte)36, (byte)106, (byte) (-57), (byte)1, (byte) (-92), (byte)126, (byte) (-65)}, byteArray0);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders_Match0);
      
      try { 
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00A0' (code 160)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (byte[])\"\u0000\uFFFD$j\uFFFD\u0001\uFFFD~\uFFFD\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNotNull(arrayNode0);
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("JSON", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("JSON", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNotNull(uRL0);
      
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader1 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)34;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)99;
      try { 
        objectReader1.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: (byte[])\"\"\u0000\u0001c\"; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8225, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature1, true);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(8227, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8227, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8227, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory4 = jsonFactory3.setCharacterEscapes(jsonpCharacterEscapes0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(8227, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8227, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8227, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(8227, jsonFactory4.getParserFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = ':';
      charArray0[2] = '?';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory4.createParser(charArray0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertEquals(3, charArray0.length);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(8227, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8227, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8227, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(8227, jsonFactory4.getParserFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(8227, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertArrayEquals(new char[] {'>', ':', '?'}, charArray0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertNotNull(readerBasedJsonParser0);
      
      Class<BooleanNode> class0 = BooleanNode.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-25));
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      JavaType javaType0 = coreXMLDeserializers_Std0.getValueType();
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNull(javaType0);
      
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, (ResolvedType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('>' (code 62)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (char[])\">:?\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isBigDecimal());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isNaN());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals((short)0, doubleNode0.shortValue());
      assertFalse(doubleNode0.isFloat());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.isDouble());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isObject());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isArray());
      assertNotNull(doubleNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isBigDecimal());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isNaN());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals((short)0, doubleNode0.shortValue());
      assertFalse(doubleNode0.isFloat());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.isDouble());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isObject());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isArray());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertNotNull(jsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParser0, (DeserializationContext) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isFloat());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isBigDecimal());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertNotNull(missingNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(missingNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isFloat());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isBigDecimal());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertNotNull(objectReader0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isFloat());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isBigDecimal());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertNotNull(defaultDeserializationContext0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(95, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonFactory2);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(87, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(87, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(87, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(87, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertNotNull(jsonFactory3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte) (-113);
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser(byteArray0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals(9, byteArray0.length);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(87, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(87, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(87, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(87, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertArrayEquals(new byte[] {(byte)0, (byte)83, (byte)1, (byte)29, (byte)36, (byte) (-26), (byte)0, (byte)49, (byte) (-113)}, byteArray0);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertNotNull(readerBasedJsonParser0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(3, 1666);
      assertNotNull(lRUMap0);
      
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory2, typeFactory1);
      assertNotSame(typeFactory2, typeFactory0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertNotNull(typeFactory2);
      
      Class<List> class0 = List.class;
      Class<BuilderBasedDeserializer> class1 = BuilderBasedDeserializer.class;
      CollectionType collectionType0 = typeFactory2.constructCollectionType(class0, class1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory2, typeFactory1);
      assertNotSame(typeFactory2, typeFactory0);
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isInterface());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isConcrete());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertTrue(collectionType0.isAbstract());
      assertTrue(collectionType0.isContainerType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(typeFactory1.equals((Object)typeFactory2));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertNotNull(collectionType0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isShort());
      assertNull(decimalNode0.textValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isInt());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isFloat());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isDouble());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertNotNull(decimalNode0);
      
      CollectionType collectionType1 = (CollectionType)collectionType0.withContentTypeHandler(decimalNode0);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory2, typeFactory1);
      assertNotSame(typeFactory2, typeFactory0);
      assertNotSame(collectionType0, collectionType1);
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.useStaticType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isInterface());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isAbstract());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isConcrete());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isInterface());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isConcrete());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertTrue(collectionType0.isAbstract());
      assertTrue(collectionType0.isContainerType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isShort());
      assertNull(decimalNode0.textValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isInt());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isFloat());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isDouble());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(typeFactory1.equals((Object)typeFactory2));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertNotNull(collectionType1);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, (JavaType) collectionType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.node.DecimalNode cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(objectReader0));
      
      HashSet<ObjectReader> hashSet1 = new HashSet<ObjectReader>(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertNotNull(hashSet1);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(hashSet1.contains(objectReader0));
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet1);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertTrue(hashSet0.equals((Object)hashSet1));
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertNotNull(dataFormatReaders0);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(hashSet1.contains(objectReader0));
      
      MatchStrength matchStrength0 = MatchStrength.SOLID_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withOptimalMatch(matchStrength0);
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(hashSet1, hashSet0);
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertTrue(hashSet0.equals((Object)hashSet1));
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertNotNull(dataFormatReaders1);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(hashSet1.contains(objectReader0));
      
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withMinimalMatch(matchStrength0);
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(hashSet1, hashSet0);
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertTrue(hashSet0.equals((Object)hashSet1));
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertNotNull(dataFormatReaders2);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(hashSet1.contains(objectReader0));
      
      DataFormatReaders dataFormatReaders3 = dataFormatReaders2.withMaxInputLookahead(64);
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(hashSet1, hashSet0);
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertSame(dataFormatReaders3, dataFormatReaders2);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertTrue(hashSet0.equals((Object)hashSet1));
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertNotNull(dataFormatReaders3);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(hashSet1.contains(objectReader0));
      
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertNotNull(javaType0);
      
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionType collectionType0 = CollectionType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0);
      assertEquals(0, javaTypeArray0.length);
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isContainerType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertNotNull(collectionType0);
      
      CollectionType collectionType1 = collectionType0.withTypeHandler(dataFormatReaders2);
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(hashSet1, hashSet0);
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertEquals(0, javaTypeArray0.length);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isContainerType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.useStaticType());
      assertEquals(0, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isEnumType());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertTrue(hashSet0.equals((Object)hashSet1));
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(hashSet1.contains(objectReader0));
      
      CollectionType collectionType2 = collectionType1.withStaticTyping();
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(hashSet1, hashSet0);
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertEquals(0, javaTypeArray0.length);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isContainerType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.useStaticType());
      assertEquals(0, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType2.isMapLikeType());
      assertEquals(0, collectionType2.containedTypeCount());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.useStaticType());
      assertFalse(collectionType2.isInterface());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isPrimitive());
      assertTrue(collectionType2.isConcrete());
      assertTrue(collectionType2.isCollectionLikeType());
      assertTrue(collectionType2.hasHandlers());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.isContainerType());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isJavaLangObject());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertTrue(hashSet0.equals((Object)hashSet1));
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertNotNull(collectionType2);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(hashSet1.contains(objectReader0));
      
      DataFormatReaders dataFormatReaders4 = dataFormatReaders3.withType(collectionType2);
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(hashSet1, hashSet0);
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders4);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders4);
      assertNotSame(dataFormatReaders2, dataFormatReaders4);
      assertSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertSame(dataFormatReaders3, dataFormatReaders2);
      assertNotSame(dataFormatReaders3, dataFormatReaders4);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(dataFormatReaders4, dataFormatReaders2);
      assertNotSame(dataFormatReaders4, dataFormatReaders1);
      assertNotSame(dataFormatReaders4, dataFormatReaders0);
      assertNotSame(dataFormatReaders4, dataFormatReaders3);
      assertEquals(0, javaTypeArray0.length);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isContainerType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.useStaticType());
      assertEquals(0, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType2.isMapLikeType());
      assertEquals(0, collectionType2.containedTypeCount());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.useStaticType());
      assertFalse(collectionType2.isInterface());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isPrimitive());
      assertTrue(collectionType2.isConcrete());
      assertTrue(collectionType2.isCollectionLikeType());
      assertTrue(collectionType2.hasHandlers());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.isContainerType());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isJavaLangObject());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertTrue(hashSet0.equals((Object)hashSet1));
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertFalse(dataFormatReaders4.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders4.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders4.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders4.equals((Object)dataFormatReaders3));
      assertNotNull(dataFormatReaders4);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(hashSet1.contains(objectReader0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0, (-1027), (int) (byte)106);
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(hashSet1, hashSet0);
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders4);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders4);
      assertEquals(1, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)106}, byteArray0);
      assertTrue(hashSet0.equals((Object)hashSet1));
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders4));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders4));
      assertNotNull(dataFormatReaders_Match0);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(hashSet1.contains(objectReader0));
      
      try { 
        objectReader0._reportUnkownFormat(dataFormatReaders4, dataFormatReaders_Match0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-44);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " with format auto-detection: must be byte- not char-based");
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)32;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (-134));
      assertEquals(8, byteArray0.length);
      assertEquals((-134), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-27), (byte) (-44), (byte)2, (byte)1, (byte)0, (byte)3, (byte)10, (byte)32}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertEquals((-134), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-27), (byte) (-44), (byte)2, (byte)1, (byte)0, (byte)3, (byte)10, (byte)32}, byteArray0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertEquals(8, byteArray0.length);
      assertEquals((-134), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-27), (byte) (-44), (byte)2, (byte)1, (byte)0, (byte)3, (byte)10, (byte)32}, byteArray0);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertNotNull(jsonFactory2);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory0.getParserFeatures());
      assertEquals(23, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(23, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(23, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(23, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertNotNull(jsonFactory3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[2] = (byte)87;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)53;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory3.createParser(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8201, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory0.getParserFeatures());
      assertEquals(23, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(23, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(23, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(23, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertArrayEquals(new byte[] {(byte)3, (byte)0, (byte)0, (byte) (-1), (byte)24, (byte)53}, byteArray0);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertNotNull(uTF8StreamJsonParser0);
      
      objectReader0._verifyNoTrailingTokens(uTF8StreamJsonParser0, (DeserializationContext) null, (JavaType) null);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8201, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertTrue(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory0.getParserFeatures());
      assertEquals(23, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(23, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(23, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(8201, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(23, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertArrayEquals(new byte[] {(byte)3, (byte)0, (byte)0, (byte) (-1), (byte)24, (byte)53}, byteArray0);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(mapType0);
      
      MapType mapType1 = mapType0.withKeyValueHandler(objectMapper0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(mapType1);
      
      MapType mapType2 = mapType1.withKeyType(mapType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType2.isConcrete());
      assertTrue(mapType2.isMapLikeType());
      assertTrue(mapType2.isAbstract());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.useStaticType());
      assertTrue(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.hasHandlers());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType1));
      assertNotNull(mapType2);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._prefetchRootDeserializer(mapType2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType2.isConcrete());
      assertTrue(mapType2.isMapLikeType());
      assertTrue(mapType2.isAbstract());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.useStaticType());
      assertTrue(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.hasHandlers());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType1.equals((Object)mapType2));
      assertFalse(mapType2.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType1));
      assertNull(jsonDeserializer0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Cannot use FormatSchema of type ");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Cannot use FormatSchema of type ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("Cannot use FormatSchema of type ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'h';
      charArray0[2] = 'p';
      charArray0[3] = ';';
      charArray0[4] = 'A';
      charArray0[5] = 'c';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0, 30, 441);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(6, charArray0.length);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Cannot use FormatSchema of type ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("Cannot use FormatSchema of type ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertArrayEquals(new char[] {'c', 'h', 'p', ';', 'A', 'c'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((short) (-20), bigInteger0.shortValue());
      assertEquals((byte) (-20), bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isEmpty());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isShort());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isFloat());
      assertFalse(bigIntegerNode0.booleanValue());
      assertFalse(bigIntegerNode0.isLong());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertEquals((short) (-20), bigInteger0.shortValue());
      assertEquals((byte) (-20), bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertNotNull(bigIntegerNode0);
      
      // Undeclared exception!
      try { 
        objectReader0._bind(readerBasedJsonParser0, bigIntegerNode0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((Double) null);
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isArray());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isDouble());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isMissingNode());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigInteger());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isLong());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.booleanValue());
      assertEquals("null", valueNode0.asText());
      assertNotNull(valueNode0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      Class<Object> class0 = Object.class;
      Object object0 = objectReader0.treeToValue((TreeNode) valueNode0, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isArray());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isDouble());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isMissingNode());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigInteger());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isLong());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.booleanValue());
      assertEquals("null", valueNode0.asText());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      assertFalse(booleanNode0.isIntegralNumber());
      assertNull(booleanNode0.numberType());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.booleanValue());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isFloat());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals("false", booleanNode0.asText());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isShort());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isMissingNode());
      assertNull(booleanNode0.textValue());
      assertNotNull(booleanNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(booleanNode0.isIntegralNumber());
      assertNull(booleanNode0.numberType());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.booleanValue());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isFloat());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals("false", booleanNode0.asText());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isShort());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isMissingNode());
      assertNull(booleanNode0.textValue());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAndCloseAsTree(jsonParser0);
      assertSame(booleanNode0, jsonNode0);
      assertSame(jsonNode0, booleanNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(booleanNode0.isIntegralNumber());
      assertNull(booleanNode0.numberType());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.booleanValue());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isFloat());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals("false", booleanNode0.asText());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isShort());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isMissingNode());
      assertNull(booleanNode0.textValue());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertTrue(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonToken.VALUE_FALSE, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isArray());
      assertEquals("false", jsonNode0.asText());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.asBoolean());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isShort());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.BOOLEAN, jsonNode0.getNodeType());
      assertNotNull(jsonNode0);
      
      Version version0 = objectReader0.version();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, version0.getPatchLevel());
      assertEquals(2, version0.getMajorVersion());
      assertTrue(version0.isSnapshot());
      assertFalse(version0.isUnknownVersion());
      assertFalse(version0.isUknownVersion());
      assertEquals(10, version0.getMinorVersion());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertNotNull(version0);
      
      JsonNode jsonNode1 = objectReader0.createObjectNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonNode1.size());
      assertFalse(jsonNode1.isFloat());
      assertEquals("", jsonNode1.asText());
      assertEquals(JsonToken.START_OBJECT, jsonNode1.asToken());
      assertEquals(JsonNodeType.OBJECT, jsonNode1.getNodeType());
      assertFalse(jsonNode1.isMissingNode());
      assertNull(jsonNode1.textValue());
      assertFalse(jsonNode1.isBigInteger());
      assertTrue(jsonNode1.isObject());
      assertFalse(jsonNode1.booleanValue());
      assertFalse(jsonNode1.isArray());
      assertNull(jsonNode1.numberType());
      assertFalse(jsonNode1.isShort());
      assertFalse(jsonNode1.isInt());
      assertFalse(jsonNode1.isIntegralNumber());
      assertFalse(jsonNode1.isBigDecimal());
      assertTrue(jsonNode1.isEmpty());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertFalse(jsonNode1.isDouble());
      assertFalse(jsonNode1.isLong());
      assertNotNull(jsonNode1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertNotNull(jsonNode0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)1;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, (InputStream) null, objectReader0, byteQuadsCanonicalizer0, byteArray0, 3, 95, true);
      assertEquals(3, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertArrayEquals(new byte[] {(byte)1, (byte)112, (byte)1}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAndReadValues((JsonParser) uTF8StreamJsonParser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      assertEquals(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY, deserializationFeature0);
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(256, deserializationFeature0.getMask());
      
      PriorityQueue<ObjectReader> priorityQueue0 = new PriorityQueue<ObjectReader>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(objectReader0));
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      assertFalse(priorityQueue0.contains(objectReader0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)72;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (-214), (-803));
      assertEquals(8, byteArray0.length);
      assertEquals(0, priorityQueue0.size());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-55), (byte)43, (byte)2, (byte)0, (byte)2, (byte)14, (byte)72}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      assertFalse(priorityQueue0.contains(objectReader0));
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(8, byteArray0.length);
      assertEquals(0, priorityQueue0.size());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-55), (byte)43, (byte)2, (byte)0, (byte)2, (byte)14, (byte)72}, byteArray0);
      assertNull(jsonParser0);
      assertFalse(priorityQueue0.contains(objectReader0));
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertNotNull(jsonParserDelegate0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((JsonParser) jsonParserDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader1 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-1);
      byte byte0 = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)99;
      try { 
        objectReader1.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xff
         //  at [Source: (byte[])\"\"\uFFFD\u0001c\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2698);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream(2698);
      assertEquals(0, pipedInputStream1.available());
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertNotNull(pipedInputStream1);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, pipedInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, pipedInputStream1.available());
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, pipedInputStream1.available());
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      String string0 = "H}YNy>";
      Double double0 = new Double(3142.063372);
      assertEquals(3142.063372, (double)double0, 0.01);
      assertNotNull(double0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((Double) null);
      assertFalse(valueNode0.isBigInteger());
      assertEquals("null", valueNode0.asText());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isFloat());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertTrue(valueNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isLong());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isBigDecimal());
      assertEquals(0, valueNode0.size());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.booleanValue());
      assertNotNull(valueNode0);
      
      try { 
        objectReader0.readValue((JsonNode) valueNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-4), (byte)1, (byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      assertEquals(6, byteArray0.length);
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-4), (byte)1, (byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertNotNull(filteringParserDelegate0);
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertEquals(6, byteArray0.length);
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-4), (byte)1, (byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertNull(formatSchema0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      TreeSet<ObjectReader> treeSet0 = new TreeSet<ObjectReader>();
      assertNotNull(treeSet0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(treeSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      // Undeclared exception!
      try { 
        objectReader0._new((ObjectReader) null, (DeserializationConfig) null, (JavaType) null, (JsonDeserializer<Object>) null, (Object) null, (FormatSchema) null, injectableValues_Std0, dataFormatReaders0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)75, (byte)15);
      assertEquals(3, byteArray0.length);
      assertEquals((-72), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)15, (byte)75, (byte)15}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertEquals((-72), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)15, (byte)75, (byte)15}, byteArray0);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(objectMapper0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(objectReader0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isShort());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isArray());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isNaN());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloat());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(0, bigIntegerNode0.size());
      assertNotNull(bigIntegerNode0);
      
      JsonNode jsonNode0 = bigIntegerNode0.path(1418);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isShort());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isArray());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isNaN());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloat());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.booleanValue());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertNotNull(jsonNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(jsonNode0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isShort());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isArray());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isNaN());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloat());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.booleanValue());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParser0, (DeserializationContext) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertNotNull(arrayNode0);
      
      TextNode textNode0 = arrayNode0.textNode(" ");
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isMissingNode());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.booleanValue());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isObject());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isBigDecimal());
      assertEquals(" ", textNode0.textValue());
      assertFalse(textNode0.isDouble());
      assertEquals(" ", textNode0.asText());
      assertFalse(textNode0.isFloat());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isLong());
      assertNotNull(textNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, textNode0, false);
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isMissingNode());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.booleanValue());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isObject());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isBigDecimal());
      assertEquals(" ", textNode0.textValue());
      assertFalse(textNode0.isDouble());
      assertEquals(" ", textNode0.asText());
      assertFalse(textNode0.isFloat());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isLong());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1566), pipedReader0, objectReader0, charsToNameCanonicalizer1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isMissingNode());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.booleanValue());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isObject());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isBigDecimal());
      assertEquals(" ", textNode0.textValue());
      assertFalse(textNode0.isDouble());
      assertEquals(" ", textNode0.asText());
      assertFalse(textNode0.isFloat());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isLong());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals((-1566), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideStdFeatures(0, 1);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isMissingNode());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.booleanValue());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isObject());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isBigDecimal());
      assertEquals(" ", textNode0.textValue());
      assertFalse(textNode0.isDouble());
      assertEquals(" ", textNode0.asText());
      assertFalse(textNode0.isFloat());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isLong());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals((-1566), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals((-1566), readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser1);
      
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser1, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      DoubleNode doubleNode0 = (DoubleNode)jsonNodeFactory0.numberNode(double0);
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isObject());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertFalse(doubleNode0.isInt());
      assertEquals(0, doubleNode0.size());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isNaN());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(0L, doubleNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isFloat());
      assertEquals((short)0, doubleNode0.shortValue());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isIntegralNumber());
      assertNotNull(doubleNode0);
      
      try { 
        objectReader0.readValue((JsonNode) doubleNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      HashMap<String, BinaryNode> hashMap0 = new HashMap<String, BinaryNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNotNull(objectNode0);
      
      Stack<JsonNode> stack0 = new Stack<JsonNode>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      List<JsonNode> list0 = objectNode0.findValues("n\"jyHH0)}SQa8 ", (List<JsonNode>) stack0);
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, list0);
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertNotNull(arrayNode0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      IntNode intNode0 = (IntNode)arrayNode0.numberNode(byte0);
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(intNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertTrue(intNode0.isInt());
      assertEquals(0L, intNode0.longValue());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isShort());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(0.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isNaN());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isLong());
      assertEquals(0.0F, intNode0.floatValue(), 0.01F);
      assertEquals(0, intNode0.size());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(0, intNode0.intValue());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isIntegralNumber());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isMissingNode());
      assertEquals((short)0, intNode0.shortValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.canConvertToInt());
      assertNotNull(intNode0);
      
      Class<Object> class0 = Object.class;
      Integer integer0 = (Integer)objectReader1.treeToValue((TreeNode) intNode0, class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, (int)integer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(intNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertTrue(intNode0.isInt());
      assertEquals(0L, intNode0.longValue());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isShort());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(0.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isNaN());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isLong());
      assertEquals(0.0F, intNode0.floatValue(), 0.01F);
      assertEquals(0, intNode0.size());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(0, intNode0.intValue());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isIntegralNumber());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isMissingNode());
      assertEquals((short)0, intNode0.shortValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(integer0);
      
      StringReader stringReader0 = new StringReader("WRAP_ROOT_VALUE");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readValues((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'WRAP_ROOT_VALUE': was expecting ('true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 31]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((byte[]) null, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      assertEquals(DeserializationFeature.UNWRAP_ROOT_VALUE, deserializationFeature0);
      assertEquals(262144, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializationFeature0, false);
      assertEquals(262144, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(262144, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-2976), (Reader) null, objectReader0, charsToNameCanonicalizer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(262144, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals((-2976), readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideFormatFeatures((-2976), 1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(262144, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals((-2976), readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals((-2976), readerBasedJsonParser1.getFeatureMask());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(readerBasedJsonParser1);
      
      MissingNode missingNode0 = (MissingNode)objectReader0._bindAsTree(readerBasedJsonParser1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(262144, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals((-2976), readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertTrue(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertTrue(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals((-2976), readerBasedJsonParser1.getFeatureMask());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.booleanValue());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.isDouble());
      assertTrue(missingNode0.isEmpty());
      assertEquals(0, missingNode0.size());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertTrue(missingNode0.isMissingNode());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(missingNode0);
      
      MissingNode missingNode1 = (MissingNode)objectReader0.readTree((Reader) null);
      assertSame(missingNode1, missingNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(missingNode1.textValue());
      assertFalse(missingNode1.isBigInteger());
      assertEquals(JsonNodeType.MISSING, missingNode1.getNodeType());
      assertFalse(missingNode1.isFloat());
      assertEquals("", missingNode1.asText());
      assertFalse(missingNode1.isBigDecimal());
      assertEquals(0, missingNode1.size());
      assertFalse(missingNode1.isObject());
      assertFalse(missingNode1.booleanValue());
      assertNull(missingNode1.numberType());
      assertFalse(missingNode1.isShort());
      assertFalse(missingNode1.isInt());
      assertFalse(missingNode1.isArray());
      assertFalse(missingNode1.isLong());
      assertFalse(missingNode1.isIntegralNumber());
      assertFalse(missingNode1.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode1.asToken());
      assertTrue(missingNode1.isMissingNode());
      assertFalse(missingNode1.isFloatingPointNumber());
      assertTrue(missingNode1.isEmpty());
      assertNotNull(missingNode1);
      
      ConcurrentHashMap<Object, ArrayNode> concurrentHashMap0 = new ConcurrentHashMap<Object, ArrayNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectReader objectReader1 = objectReader0.withAttributes(concurrentHashMap0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      Class<FilterInputStream> class0 = FilterInputStream.class;
      ObjectReader objectReader2 = objectReader1.withType(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertNotNull(jsonParser0);
      
      JsonParser jsonParser1 = objectReader0._considerFilter(jsonParser0, false);
      assertSame(jsonParser0, jsonParser1);
      assertSame(jsonParser1, jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser1.getFeatureMask());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertFalse(jsonParser1.canReadTypeId());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertEquals(0, jsonParser1.getCurrentTokenId());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertNull(jsonParser1.getCurrentToken());
      assertNull(jsonParser1.getLastClearedToken());
      assertFalse(jsonParser1.canParseAsync());
      assertNull(jsonParser1.currentToken());
      assertFalse(jsonParser1.isClosed());
      assertEquals(0, jsonParser1.currentTokenId());
      assertFalse(jsonParser1.hasCurrentToken());
      assertFalse(jsonParser1.hasTextCharacters());
      assertFalse(jsonParser1.canReadObjectId());
      assertEquals(0, jsonParser1.getTextOffset());
      assertNotNull(jsonParser1);
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser1);
      assertNotSame(arrayNode0, jsonNode0);
      assertSame(jsonParser0, jsonParser1);
      assertSame(jsonParser1, jsonParser0);
      assertNotSame(jsonNode0, arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(4, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser1.getFeatureMask());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertEquals(4, jsonParser1.getCurrentTokenId());
      assertFalse(jsonParser1.canReadTypeId());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertNull(jsonParser1.getLastClearedToken());
      assertFalse(jsonParser1.canParseAsync());
      assertFalse(jsonParser1.isClosed());
      assertEquals(JsonToken.END_ARRAY, jsonParser1.getCurrentToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser1.currentToken());
      assertTrue(jsonParser1.hasCurrentToken());
      assertFalse(jsonParser1.hasTextCharacters());
      assertFalse(jsonParser1.canReadObjectId());
      assertEquals(0, jsonParser1.getTextOffset());
      assertEquals(4, jsonParser1.currentTokenId());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertEquals(0, jsonNode0.size());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isEmpty());
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(Double.POSITIVE_INFINITY);
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.booleanValue());
      assertTrue(doubleNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals(9223372036854775807L, doubleNode0.longValue());
      assertEquals(0, doubleNode0.size());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isArray());
      assertEquals((short) (-1), doubleNode0.shortValue());
      assertEquals(Integer.MAX_VALUE, doubleNode0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, doubleNode0.doubleValue(), 0.01);
      assertTrue(doubleNode0.isEmpty());
      assertFalse(doubleNode0.isObject());
      assertEquals(Float.POSITIVE_INFINITY, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isIntegralNumber());
      assertNotNull(doubleNode0);
      
      // Undeclared exception!
      try { 
        objectReader0.with((TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.BaseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      assertEquals(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY, deserializationFeature0);
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertNotNull(deserializationConfig0);
      
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertEquals(0, deserializationConfig1.mixInCount());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertNotNull(deserializationConfig1);
      
      ObjectReader objectReader2 = new ObjectReader(objectReader0, deserializationConfig1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertEquals(0, deserializationConfig1.mixInCount());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      try { 
        objectReader2.readValues((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((byte[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      assertEquals(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY, deserializationFeature0);
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(128, jsonReadFeature0.getMask());
      
      JsonNode jsonNode0 = objectReader1.createArrayNode();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      HashMap<String, BinaryNode> hashMap0 = new HashMap<String, BinaryNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((Reader) pipedReader0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAsTree(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      assertEquals(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY, deserializationFeature0);
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(256, deserializationFeature0.getMask());
      
      ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonNode jsonNode0 = objectReader1.createArrayNode();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isMissingNode());
      assertTrue(jsonNode0.isArray());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      HashMap<String, BinaryNode> hashMap0 = new HashMap<String, BinaryNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      // Undeclared exception!
      try { 
        objectReader0.treeToValue((TreeNode) jsonNode0, (Class<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ContextAttributes contextAttributes0 = objectReader0.getAttributes();
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(contextAttributes0);
      
      // Undeclared exception!
      try { 
        objectReader0.with((FormatFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      try { 
        objectReader0.readValue(byteArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Unsupported UCS-4 endianness (3412) detected
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      try { 
        objectReader0._inputStream(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        objectReader0.readValue((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isEmpty());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isEmpty());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(arrayNode0, jsonNode0);
      assertNotSame(jsonNode0, arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isEmpty());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(4, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isFloat());
      assertTrue(jsonNode0.isEmpty());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isInt());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertNotNull(jsonNode0);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      deserializationFeatureArray0[2] = deserializationFeature2;
      ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(3, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      try { 
        objectReader0.readTree((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)36}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)36}, byteArray0);
      assertNotNull(sequenceInputStream0);
      
      try { 
        objectReader0.readValue((InputStream) sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '$': was expecting ('true', 'false' or 'null')
         //  at [Source: (SequenceInputStream); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationConfig deserializationConfig0 = null;
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser("JSON");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNotNull(readerBasedJsonParser0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertNotNull(jsonParserSequence0);
      
      try { 
        objectReader0._bindAsTree(jsonParserSequence0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        objectReader0.withFeatures((DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader(3);
      assertNotNull(pipedReader0);
      
      try { 
        objectReader0.readValues((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((byte[]) null, 0, 1122);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      BaseSettings baseSettings1 = baseSettings0.withPropertyNamingStrategy((PropertyNamingStrategy) null);
      assertSame(baseSettings0, baseSettings1);
      assertSame(baseSettings1, baseSettings0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertNotNull(baseSettings1);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.withoutLocalDefinitions();
      assertNotSame(simpleMixInResolver0, simpleMixInResolver1);
      assertNotSame(simpleMixInResolver1, simpleMixInResolver0);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertNotNull(simpleMixInResolver1);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = objectMapper0._configOverrides;
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings1, stdSubtypeResolver0, simpleMixInResolver1, rootNameLookup0, configOverrides0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getRootName());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertNotNull(deserializationConfig0);
      
      ObjectReader objectReader1 = new ObjectReader(objectMapper0, deserializationConfig0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getRootName());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      byte byte0 = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      try { 
        objectReader1.readValue(byteArray0, 1024, (int)  (-8));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\uFFFD\uFFFD\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-79), (byte)32, (byte)0, (byte)0, (byte)0, (byte) (-53), (byte)1}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      try { 
        objectReader0.readTree((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00B1' (code 177)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (ByteArrayInputStream); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("$jSAUbh$ePC");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValues((Reader) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[5];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectMapper0.reader((FormatSchema) null);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      // Undeclared exception!
      try { 
        objectReader0._reportUndetectableSource((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      assertEquals(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY, deserializationFeature0);
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(128, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      
      JsonNode jsonNode0 = objectReader1.createArrayNode();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isObject());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonReadFeature0, true);
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(128, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      HashMap<String, BinaryNode> hashMap0 = new HashMap<String, BinaryNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      Class<Object> class0 = Object.class;
      ObjectMapper objectMapper1 = (ObjectMapper)objectReader1.treeToValue((TreeNode) jsonNode0, class0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isObject());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectMapper1);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNotNull(nonBlockingJsonParser0);
      
      try { 
        objectReader1._bindAsTree(nonBlockingJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.JsonNode`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("<$CP[~=e0(9nryw{[*");
      assertNotNull(mockFile0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNotNull(nonBlockingJsonParser0);
      
      try { 
        objectReader0.readTree((JsonParser) nonBlockingJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.JsonNode`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      objectMapper0._serializationConfig = null;
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.withoutFeatures((FormatFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(object0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloat());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonNode0);
      
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertNotNull(objectNode0);
      
      ObjectNode objectNode1 = objectNode0.with("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s");
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode1, objectNode0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertTrue(objectNode1.isEmpty());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(0, objectNode1.size());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertNotNull(objectNode1);
      
      ObjectNode objectNode2 = objectNode1.put("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", (Double) null);
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertNotSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isInt());
      assertEquals(1, objectNode2.size());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isMissingNode());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertNotNull(objectNode2);
      
      ObjectNode objectNode3 = objectNode2.put("6rK2404:,y%K1$)0", (-1538.83121903086));
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode3);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode3);
      assertNotSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode3);
      assertNotSame(objectNode2, objectNode0);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode3, objectNode1);
      assertNotSame(objectNode3, objectNode0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isArray());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isMissingNode());
      assertNull(objectNode2.textValue());
      assertNull(objectNode3.numberType());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isEmpty());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isIntegralNumber());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isInt());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isDouble());
      assertEquals("", objectNode3.asText());
      assertEquals(2, objectNode3.size());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isFloat());
      assertNull(objectNode3.textValue());
      assertFalse(objectNode3.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode3.equals((Object)objectNode0));
      assertNotNull(objectNode3);
      
      ObjectNode objectNode4 = objectNode3.put("6rK2404:,y%K1$)0", (-1481.0F));
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode4);
      assertNotSame(objectNode0, objectNode3);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode4);
      assertNotSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode4);
      assertNotSame(objectNode2, objectNode0);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode3, objectNode1);
      assertNotSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode4);
      assertSame(objectNode4, objectNode3);
      assertSame(objectNode4, objectNode1);
      assertNotSame(objectNode4, objectNode0);
      assertSame(objectNode4, objectNode2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isArray());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isMissingNode());
      assertNull(objectNode2.textValue());
      assertNull(objectNode3.numberType());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isEmpty());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isIntegralNumber());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isInt());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isDouble());
      assertEquals("", objectNode3.asText());
      assertEquals(2, objectNode3.size());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isFloat());
      assertNull(objectNode3.textValue());
      assertFalse(objectNode3.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode4.isFloat());
      assertEquals(2, objectNode4.size());
      assertFalse(objectNode4.isBigInteger());
      assertNull(objectNode4.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode4.getNodeType());
      assertFalse(objectNode4.isLong());
      assertFalse(objectNode4.isDouble());
      assertFalse(objectNode4.isFloatingPointNumber());
      assertFalse(objectNode4.isArray());
      assertEquals("", objectNode4.asText());
      assertFalse(objectNode4.isEmpty());
      assertFalse(objectNode4.isIntegralNumber());
      assertFalse(objectNode4.booleanValue());
      assertNull(objectNode4.numberType());
      assertFalse(objectNode4.isMissingNode());
      assertFalse(objectNode4.isShort());
      assertFalse(objectNode4.isInt());
      assertFalse(objectNode4.isBigDecimal());
      assertTrue(objectNode4.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode4.asToken());
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode0.equals((Object)objectNode3));
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode3.equals((Object)objectNode0));
      assertFalse(objectNode4.equals((Object)objectNode0));
      assertNotNull(objectNode4);
      
      ObjectNode objectNode5 = objectNode4.putNull("");
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode4);
      assertNotSame(objectNode0, objectNode3);
      assertNotSame(objectNode0, objectNode5);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode5);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode4);
      assertNotSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode5);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode4);
      assertNotSame(objectNode2, objectNode0);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode3, objectNode1);
      assertNotSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode4);
      assertSame(objectNode3, objectNode5);
      assertSame(objectNode4, objectNode5);
      assertSame(objectNode4, objectNode3);
      assertSame(objectNode4, objectNode1);
      assertNotSame(objectNode4, objectNode0);
      assertSame(objectNode4, objectNode2);
      assertSame(objectNode5, objectNode1);
      assertSame(objectNode5, objectNode3);
      assertNotSame(objectNode5, objectNode0);
      assertSame(objectNode5, objectNode2);
      assertSame(objectNode5, objectNode4);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isMissingNode());
      assertNull(objectNode2.textValue());
      assertNull(objectNode3.numberType());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isEmpty());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isIntegralNumber());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isInt());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isDouble());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isFloat());
      assertNull(objectNode3.textValue());
      assertEquals(3, objectNode3.size());
      assertFalse(objectNode3.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode4.isFloat());
      assertFalse(objectNode4.isBigInteger());
      assertEquals(3, objectNode4.size());
      assertNull(objectNode4.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode4.getNodeType());
      assertFalse(objectNode4.isLong());
      assertFalse(objectNode4.isDouble());
      assertFalse(objectNode4.isFloatingPointNumber());
      assertFalse(objectNode4.isArray());
      assertEquals("", objectNode4.asText());
      assertFalse(objectNode4.isEmpty());
      assertFalse(objectNode4.isIntegralNumber());
      assertFalse(objectNode4.booleanValue());
      assertNull(objectNode4.numberType());
      assertFalse(objectNode4.isMissingNode());
      assertFalse(objectNode4.isShort());
      assertFalse(objectNode4.isInt());
      assertFalse(objectNode4.isBigDecimal());
      assertTrue(objectNode4.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode4.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode5.getNodeType());
      assertNull(objectNode5.textValue());
      assertFalse(objectNode5.isBigInteger());
      assertEquals(3, objectNode5.size());
      assertFalse(objectNode5.isFloat());
      assertFalse(objectNode5.isIntegralNumber());
      assertFalse(objectNode5.isArray());
      assertEquals("", objectNode5.asText());
      assertFalse(objectNode5.isMissingNode());
      assertFalse(objectNode5.isDouble());
      assertFalse(objectNode5.isShort());
      assertFalse(objectNode5.isInt());
      assertFalse(objectNode5.isFloatingPointNumber());
      assertFalse(objectNode5.isLong());
      assertFalse(objectNode5.isEmpty());
      assertTrue(objectNode5.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode5.asToken());
      assertFalse(objectNode5.isBigDecimal());
      assertFalse(objectNode5.booleanValue());
      assertNull(objectNode5.numberType());
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode0.equals((Object)objectNode4));
      assertFalse(objectNode0.equals((Object)objectNode3));
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode3.equals((Object)objectNode0));
      assertFalse(objectNode4.equals((Object)objectNode0));
      assertFalse(objectNode5.equals((Object)objectNode0));
      assertNotNull(objectNode5);
      
      JsonNode jsonNode0 = objectNode5.setAll((Map<String, ? extends JsonNode>) hashMap0);
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, jsonNode0);
      assertNotSame(objectNode0, objectNode4);
      assertNotSame(objectNode0, objectNode3);
      assertNotSame(objectNode0, objectNode5);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode5);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode4);
      assertNotSame(objectNode1, objectNode0);
      assertSame(objectNode1, jsonNode0);
      assertSame(objectNode2, objectNode5);
      assertSame(objectNode2, jsonNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode4);
      assertNotSame(objectNode2, objectNode0);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode3, objectNode1);
      assertNotSame(objectNode3, objectNode0);
      assertSame(objectNode3, jsonNode0);
      assertSame(objectNode3, objectNode4);
      assertSame(objectNode3, objectNode5);
      assertSame(objectNode4, objectNode5);
      assertSame(objectNode4, objectNode3);
      assertSame(objectNode4, objectNode1);
      assertNotSame(objectNode4, objectNode0);
      assertSame(objectNode4, jsonNode0);
      assertSame(objectNode4, objectNode2);
      assertSame(objectNode5, objectNode1);
      assertSame(objectNode5, objectNode3);
      assertNotSame(objectNode5, objectNode0);
      assertSame(objectNode5, objectNode2);
      assertSame(objectNode5, jsonNode0);
      assertSame(objectNode5, objectNode4);
      assertSame(jsonNode0, objectNode2);
      assertSame(jsonNode0, objectNode5);
      assertSame(jsonNode0, objectNode4);
      assertSame(jsonNode0, objectNode1);
      assertSame(jsonNode0, objectNode3);
      assertNotSame(jsonNode0, objectNode0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isMissingNode());
      assertNull(objectNode2.textValue());
      assertNull(objectNode3.numberType());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isEmpty());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isIntegralNumber());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isInt());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isDouble());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isFloat());
      assertNull(objectNode3.textValue());
      assertEquals(3, objectNode3.size());
      assertFalse(objectNode3.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode4.isFloat());
      assertFalse(objectNode4.isBigInteger());
      assertEquals(3, objectNode4.size());
      assertNull(objectNode4.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode4.getNodeType());
      assertFalse(objectNode4.isLong());
      assertFalse(objectNode4.isDouble());
      assertFalse(objectNode4.isFloatingPointNumber());
      assertFalse(objectNode4.isArray());
      assertEquals("", objectNode4.asText());
      assertFalse(objectNode4.isEmpty());
      assertFalse(objectNode4.isIntegralNumber());
      assertFalse(objectNode4.booleanValue());
      assertNull(objectNode4.numberType());
      assertFalse(objectNode4.isMissingNode());
      assertFalse(objectNode4.isShort());
      assertFalse(objectNode4.isInt());
      assertFalse(objectNode4.isBigDecimal());
      assertTrue(objectNode4.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode4.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode5.getNodeType());
      assertNull(objectNode5.textValue());
      assertFalse(objectNode5.isBigInteger());
      assertEquals(3, objectNode5.size());
      assertFalse(objectNode5.isFloat());
      assertFalse(objectNode5.isIntegralNumber());
      assertFalse(objectNode5.isArray());
      assertEquals("", objectNode5.asText());
      assertFalse(objectNode5.isMissingNode());
      assertFalse(objectNode5.isDouble());
      assertFalse(objectNode5.isShort());
      assertFalse(objectNode5.isInt());
      assertFalse(objectNode5.isFloatingPointNumber());
      assertFalse(objectNode5.isLong());
      assertFalse(objectNode5.isEmpty());
      assertTrue(objectNode5.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode5.asToken());
      assertFalse(objectNode5.isBigDecimal());
      assertFalse(objectNode5.booleanValue());
      assertNull(objectNode5.numberType());
      assertEquals("", jsonNode0.asText());
      assertEquals(3, jsonNode0.size());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode0.equals((Object)objectNode4));
      assertFalse(objectNode0.equals((Object)objectNode3));
      assertFalse(objectNode0.equals((Object)objectNode5));
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode3.equals((Object)objectNode0));
      assertFalse(objectNode4.equals((Object)objectNode0));
      assertFalse(objectNode5.equals((Object)objectNode0));
      assertFalse(jsonNode0.equals((Object)objectNode0));
      assertNotNull(jsonNode0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        objectReader0.treeToValue((TreeNode) objectNode3, class0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        objectReader0.without((FormatFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(collectionType0);
      
      ObjectReader objectReader1 = objectReader0.withType((JavaType) collectionType0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValues((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      TextNode textNode0 = TextNode.valueOf((String) null);
      assertNull(textNode0);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate((Object) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      try { 
        objectReader2.readValue("s4g");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 's4g': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"s4g\"; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-61);
      try { 
        objectReader0.readValues(byteArray0, (int)  (-61), (-2324));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\uFFFD\uFFFD\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(arrayNode0, jsonNode0);
      assertNotSame(jsonNode0, arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertEquals(4, jsonParser0.currentTokenId());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertTrue(jsonNode0.isArray());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertNotNull(jsonNode0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1436));
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper1, charsToNameCanonicalizer1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAndCloseAsTree(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(4, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertNotNull(objectNode0);
      
      ObjectNode objectNode1 = objectNode0.put("com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver", false);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertNotNull(objectNode1);
      
      ObjectNode objectNode2 = objectNode1.putObject("com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver");
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isShort());
      assertEquals(0, objectNode2.size());
      assertFalse(objectNode2.booleanValue());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertNull(objectNode2.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertTrue(objectNode2.isEmpty());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isDouble());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertNotNull(objectNode2);
      
      ArrayNode arrayNode0 = objectNode2.withArray("");
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isLong());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.booleanValue());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertNull(objectNode2.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isDouble());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertEquals(4, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isLong());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.booleanValue());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertNull(objectNode2.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isDouble());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertNotNull(jsonParser0);
      
      try { 
        objectReader0.readValue(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<List> class0 = List.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature0);
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(16, jsonReadFeature0.getMask());
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[9];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      objectReaderArray0[7] = objectReader0;
      objectReaderArray0[8] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(9, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(9, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0, (int) (byte)1, (-3228));
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(5, byteArray0.length);
      assertEquals(9, objectReaderArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertNotNull(dataFormatReaders_Match0);
      
      try { 
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\u0001\u0001\u0001\u0001\u0001\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      byte[] byteArray0 = null;
      int int0 = 1005;
      // Undeclared exception!
      try { 
        objectReader0._bind((JsonParser) null, jsonFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)1;
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader2 = objectReader1.forType(class0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      byteArray0[2] = (byte)0;
      try { 
        objectReader0.readValue(byteArray0, (int) 1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 1)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\uFFFD\u0001\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature0);
      assertEquals(16, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[7];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(7, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(7, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)1;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0, (int) (byte)1, 23);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(7, objectReaderArray0.length);
      assertEquals(4, byteArray0.length);
      assertEquals(MatchStrength.NO_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)0, (byte) (-64), (byte)1}, byteArray0);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders_Match0);
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      SerializationConfig serializationConfig0 = null;
      ObjectWriter objectWriter0 = objectMapper0._newWriter((SerializationConfig) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectWriter0.hasPrefetchedSerializer());
      assertNotNull(objectWriter0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      IntNode intNode0 = (IntNode)objectReader0.readTree("1");
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, intNode0.intValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.canConvertToInt());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isNaN());
      assertNull(intNode0.textValue());
      assertEquals(0, intNode0.size());
      assertEquals((short)1, intNode0.shortValue());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isArray());
      assertTrue(intNode0.isEmpty());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(1.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.canConvertToLong());
      assertEquals(1L, intNode0.longValue());
      assertFalse(intNode0.isShort());
      assertEquals(1.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isBigDecimal());
      assertNotNull(intNode0);
      
      try { 
        objectReader0.readValue("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      assertEquals(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY, deserializationFeature0);
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(256, deserializationFeature0.getMask());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.without(deserializationFeature0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      assertEquals(128, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      
      JsonNode jsonNode0 = objectReader1.createArrayNode();
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isMissingNode());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloat());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isDouble());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, jsonReadFeature0, true);
      assertEquals(128, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      try { 
        objectReader0.readTree("\"@LvLC)l&=Cw");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: (String)\"\"@LvLC)l&=Cw\"; line: 1, column: 25]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with(objectReaderArray0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      // Undeclared exception!
      try { 
        dataFormatReaders1.with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      assertEquals(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY, deserializationFeature0);
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      assertEquals(128, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      ObjectReader objectReader1 = null;
      try {
        objectReader1 = new ObjectReader(objectReader0, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((byte[]) null, 70, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<BooleanNode> class0 = BooleanNode.class;
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(9, jsonParser_FeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature0);
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(16, jsonReadFeature0.getMask());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isFloat());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.booleanValue());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isDouble());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isNaN());
      assertNotNull(bigIntegerNode0);
      
      ObjectNode objectNode0 = bigIntegerNode0.findParent("");
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isFloat());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.booleanValue());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isDouble());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isNaN());
      assertNull(objectNode0);
      
      Class<DeserializationConfig> class1 = DeserializationConfig.class;
      // Undeclared exception!
      try { 
        objectReader0.treeToValue((TreeNode) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[5];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.SOLID_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withOptimalMatch(matchStrength0);
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders1);
      
      MockFile mockFile0 = new MockFile("expected a value", "C-9WDGnjCN+*-");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile(":`E>d|Oz", "3i<@9qqq3>4'AT", (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/expected a value", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("/experiment/expected a value/C-9WDGnjCN+*-", mockFile0.toString());
      assertEquals("C-9WDGnjCN+*-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(":`E>d|Oz03i<@9qqq3>4'AT", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/experiment/expected a value/C-9WDGnjCN+*-", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/experiment/expected a value/C-9WDGnjCN+*-/:`E>d|Oz03i<@9qqq3>4'AT", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      
      InputStream inputStream0 = objectReader0._inputStream(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/expected a value", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("/experiment/expected a value/C-9WDGnjCN+*-", mockFile0.toString());
      assertEquals("C-9WDGnjCN+*-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(":`E>d|Oz03i<@9qqq3>4'AT", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/experiment/expected a value/C-9WDGnjCN+*-", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/experiment/expected a value/C-9WDGnjCN+*-/:`E>d|Oz03i<@9qqq3>4'AT", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0, inputStream0.available());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(inputStream0);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(inputStream0);
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(5, objectReaderArray0.length);
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/expected a value", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("/experiment/expected a value/C-9WDGnjCN+*-", mockFile0.toString());
      assertEquals("C-9WDGnjCN+*-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(":`E>d|Oz03i<@9qqq3>4'AT", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/experiment/expected a value/C-9WDGnjCN+*-", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/experiment/expected a value/C-9WDGnjCN+*-/:`E>d|Oz03i<@9qqq3>4'AT", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals((-5), inputStream0.available());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(dataFormatReaders_Match0);
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-102);
      try { 
        objectReader0.readTree(byteArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Invalid UTF-32 character 0x9a408ed2 (above 0x0010ffff) at char #1, byte #7)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ConcurrentHashMap<MapLikeType, BooleanNode> concurrentHashMap0 = new ConcurrentHashMap<MapLikeType, BooleanNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(concurrentHashMap0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes1);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte) (-121);
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Invalid UTF-32 character 0x87c24039 (above 0x0010ffff) at char #1, byte #7)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
      ObjectReader objectReader1 = objectReader0.withFeatures(formatFeatureArray0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, formatFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)3;
      BinaryNode binaryNode0 = BinaryNode.valueOf(byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(binaryNode0.isDouble());
      assertFalse(binaryNode0.isInt());
      assertFalse(binaryNode0.booleanValue());
      assertFalse(binaryNode0.isArray());
      assertNull(binaryNode0.numberType());
      assertFalse(binaryNode0.isObject());
      assertNull(binaryNode0.textValue());
      assertFalse(binaryNode0.isShort());
      assertFalse(binaryNode0.isMissingNode());
      assertFalse(binaryNode0.isBigInteger());
      assertEquals(JsonNodeType.BINARY, binaryNode0.getNodeType());
      assertFalse(binaryNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, binaryNode0.asToken());
      assertTrue(binaryNode0.isEmpty());
      assertFalse(binaryNode0.isIntegralNumber());
      assertEquals(0, binaryNode0.size());
      assertFalse(binaryNode0.isFloatingPointNumber());
      assertFalse(binaryNode0.isFloat());
      assertFalse(binaryNode0.isLong());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-118), (byte)117, (byte) (-1), (byte) (-111), (byte)3}, byteArray0);
      assertNotNull(binaryNode0);
      
      Class<ArrayNode> class0 = ArrayNode.class;
      try { 
        objectReader1.treeToValue((TreeNode) binaryNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.node.ArrayNode` out of VALUE_EMBEDDED_OBJECT token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertNotNull(jsonFactory2);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader1 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader1);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory3);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory3.createNonBlockingByteArrayParser();
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(nonBlockingJsonParser0);
      
      try { 
        objectReader0._bindAndCloseAsTree(nonBlockingJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.JsonNode`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        objectReader0.readValues((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      // Undeclared exception!
      try { 
        objectReader1.readValue((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(arrayNode0, jsonNode0);
      assertNotSame(jsonNode0, arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertEquals(4, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertEquals(0, jsonNode0.size());
      assertNull(jsonNode0.numberType());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isShort());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertNotNull(jsonNode0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(mapType0);
      
      MapType mapType1 = mapType0.withStaticTyping();
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isArrayType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(mapType1);
      
      MapType mapType2 = mapType1.withKeyType(mapType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isArrayType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType2.isAbstract());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.useStaticType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.hasValueHandler());
      assertTrue(mapType2.isInterface());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.hasHandlers());
      assertFalse(mapType2.isConcrete());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType1));
      assertNotNull(mapType2);
      
      ObjectReader objectReader1 = objectReader0.forType((JavaType) mapType2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isArrayType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType2.isAbstract());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.useStaticType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.hasValueHandler());
      assertTrue(mapType2.isInterface());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.hasHandlers());
      assertFalse(mapType2.isConcrete());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertFalse(mapType1.equals((Object)mapType2));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = DecimalNode.valueOf(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertTrue(decimalNode0.isEmpty());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isNaN());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isObject());
      assertNotNull(decimalNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, decimalNode0, false);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertTrue(decimalNode0.isEmpty());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isNaN());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isObject());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertTrue(decimalNode0.isEmpty());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isNaN());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isObject());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-35);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, pipedInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, 646, (byte)0, true);
      assertEquals(3, byteArray0.length);
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(2, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertTrue(decimalNode0.isEmpty());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isNaN());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isObject());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte) (-35)}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = (UTF8StreamJsonParser)objectReader0._considerFilter(uTF8StreamJsonParser0, true);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      assertSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      assertEquals(3, byteArray0.length);
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(2, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(uTF8StreamJsonParser1.canParseAsync());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertNull(uTF8StreamJsonParser1.currentToken());
      assertEquals(0, uTF8StreamJsonParser1.currentTokenId());
      assertFalse(uTF8StreamJsonParser1.isNaN());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser1.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser1.getFormatFeatures());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertEquals(2, uTF8StreamJsonParser1.getFeatureMask());
      assertFalse(uTF8StreamJsonParser1.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertTrue(decimalNode0.isEmpty());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isNaN());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isObject());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte) (-35)}, byteArray0);
      assertNotNull(uTF8StreamJsonParser1);
      
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        objectReader0.readValue((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      JsonFactory jsonFactory0 = objectReader0.getFactory();
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory0);
      
      try { 
        objectReader2.readValues((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      String string0 = "qY\\x;gY3W`u";
      Class<ArrayNode> class0 = ArrayNode.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertNotNull(resolvedRecursiveType0);
      
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("qYx;gY3W`u", (Object) resolvedRecursiveType0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertNotNull(injectableValues_Std1);
      
      ObjectReader objectReader1 = null;
      try {
        objectReader1 = new ObjectReader(objectMapper0, (DeserializationConfig) null, (JavaType) null, pipedReader0, (FormatSchema) null, injectableValues_Std1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(iOContext1);
      
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, (Reader) null, objectMapper0, charsToNameCanonicalizer0, charArray0, 1056, 0, false);
      assertEquals(0, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(readerBasedJsonParser0);
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertNotSame(objectReader0, objectReader1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(0, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNull(formatSchema0);
      
      StringWriter stringWriter0 = new StringWriter(1);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 33, objectReader0, stringWriter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(33, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(writerBasedJsonGenerator0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(127, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(33, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonGeneratorDelegate0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, false, false);
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(127, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(127, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(33, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(filteringGeneratorDelegate0);
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertNotNull(objectNode0);
      
      ObjectNode objectNode1 = objectNode0.put("R\"rbZ9I\"H\"j$", 1589L);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertNotNull(objectNode1);
      
      RawValue rawValue0 = new RawValue("R\"rbZ9I\"H\"j$");
      assertNotNull(rawValue0);
      
      ObjectNode objectNode2 = objectNode1.putRawValue("ES~'&", rawValue0);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isShort());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.textValue());
      assertNotNull(objectNode2);
      
      ObjectNode objectNode3 = objectNode2.put("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", (short)126);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode3, objectNode0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertEquals(3, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(3, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isShort());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.textValue());
      assertEquals(3, objectNode2.size());
      assertNull(objectNode3.numberType());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isEmpty());
      assertFalse(objectNode3.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isBigInteger());
      assertEquals(3, objectNode3.size());
      assertNull(objectNode3.textValue());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isLong());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isDouble());
      assertNotNull(objectNode3);
      
      ShortNode shortNode0 = (ShortNode)objectNode3.path("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s");
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode3, objectNode0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertEquals(3, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(3, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isShort());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.textValue());
      assertEquals(3, objectNode2.size());
      assertNull(objectNode3.numberType());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isEmpty());
      assertFalse(objectNode3.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isBigInteger());
      assertEquals(3, objectNode3.size());
      assertNull(objectNode3.textValue());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isLong());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isDouble());
      assertEquals(126, shortNode0.intValue());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(126.0, shortNode0.doubleValue(), 0.01);
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.isObject());
      assertEquals(126L, shortNode0.longValue());
      assertNull(shortNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertTrue(shortNode0.canConvertToInt());
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.isDouble());
      assertEquals(0, shortNode0.size());
      assertEquals(126.0F, shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isLong());
      assertEquals((short)126, shortNode0.shortValue());
      assertFalse(shortNode0.booleanValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isNaN());
      assertTrue(shortNode0.isEmpty());
      assertNotNull(shortNode0);
      
      // Undeclared exception!
      try { 
        objectReader0.writeTree(writerBasedJsonGenerator0, shortNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("No value type configured for ObjectReader", "\"f^");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/No value type configured for ObjectReader/\"f^", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("\"f^", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/No value type configured for ObjectReader", mockFile0.getParent());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        objectReader0._inputStream(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(arrayNode0, jsonNode0);
      assertNotSame(jsonNode0, arrayNode0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(4, jsonParser0.currentTokenId());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isMissingNode());
      assertTrue(jsonNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isShort());
      assertNull(jsonNode0.textValue());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(object0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)1;
      // Undeclared exception!
      try { 
        objectReader0.readValue(byteArray0, (int) 0, 3750);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)82;
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(byteArray0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(5, byteArray0.length);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertArrayEquals(new byte[] {(byte)3, (byte)0, (byte)3, (byte) (-11), (byte)82}, byteArray0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(readerBasedJsonParser0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      assertEquals(5, byteArray0.length);
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertArrayEquals(new byte[] {(byte)3, (byte)0, (byte)3, (byte) (-11), (byte)82}, byteArray0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(filteringParserDelegate0);
      
      TypeReference<MapType> typeReference0 = (TypeReference<MapType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) filteringParserDelegate0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      String string0 = "No value type configured for ObjectReader";
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.characterEscapes((CharacterEscapes) jsonpCharacterEscapes0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactoryBuilder1);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder1);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      charArray0[1] = 'H';
      charArray0[2] = 't';
      charArray0[3] = ':';
      charArray0[4] = '?';
      charArray0[5] = 'G';
      charArray0[6] = 'Q';
      charArray0[7] = '/';
      charArray0[8] = 't';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertEquals(9, charArray0.length);
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertArrayEquals(new char[] {'Y', 'H', 't', ':', '?', 'G', 'Q', '/', 't'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bind(readerBasedJsonParser0, jsonpCharacterEscapes0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'YHt': was expecting ('true', 'false' or 'null')
         //  at [Source: (char[])\"YHt:?GQ/t\"; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Class<NullNode> class0 = NullNode.class;
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      Class<JsonFormat.Shape> class1 = JsonFormat.Shape.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertNotNull(resolvedRecursiveType0);
      
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0, resolvedRecursiveType0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertNotNull(mapLikeType0);
      
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isFinal());
      assertTrue(mapLikeType1.hasContentType());
      assertTrue(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isInterface());
      assertFalse(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isArrayType());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.isAbstract());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertTrue(mapLikeType1.isConcrete());
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertNotNull(mapLikeType1);
      
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(objectMapper0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertTrue(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertNotNull(javaType0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      ObjectReader objectReader1 = objectMapper0.readerFor((JavaType) mapLikeType1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isFinal());
      assertTrue(mapLikeType1.hasContentType());
      assertTrue(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isInterface());
      assertFalse(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isArrayType());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.isAbstract());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(mapLikeType0.equals((Object)mapLikeType1));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertNotNull(objectReader1);
      
      objectReaderArray0[2] = objectReader1;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[0] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.WEAK_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withOptimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      // Undeclared exception!
      try { 
        dataFormatReaders1.withType(mapLikeType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DataFormatReaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Base64Variant base64Variant0 = null;
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      try { 
        objectReader0._findRootDeserializer(defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("<x?0(");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("<x?0(", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("<x?0(", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals("<x?0(", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      JsonFactory jsonFactory2 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals("<x?0(", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("<x?0(", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(63, jsonFactory2.getGeneratorFeatures());
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(63, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(63, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertNotNull(jsonFactory3);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(63, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(63, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(63, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(63, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectReader0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(63, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(63, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper1);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory3.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(63, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(63, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertNotNull(nonBlockingJsonParser0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser)objectReader0._considerFilter(nonBlockingJsonParser0, true);
      assertSame(nonBlockingJsonParser1, nonBlockingJsonParser0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(nonBlockingJsonParser0, nonBlockingJsonParser1);
      assertFalse(nonBlockingJsonParser1.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser1.getTokenLineNr());
      assertNull(nonBlockingJsonParser1.getLastClearedToken());
      assertEquals(0L, nonBlockingJsonParser1.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser1.canReadObjectId());
      assertTrue(nonBlockingJsonParser1.needMoreInput());
      assertTrue(nonBlockingJsonParser1.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser1.getFeatureMask());
      assertEquals(0, nonBlockingJsonParser1.getFormatFeatures());
      assertNull(nonBlockingJsonParser1.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser1.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser1.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser1.getTextOffset());
      assertNull(nonBlockingJsonParser1.getCurrentName());
      assertFalse(nonBlockingJsonParser1.isClosed());
      assertFalse(nonBlockingJsonParser1.hasCurrentToken());
      assertNull(nonBlockingJsonParser1.currentToken());
      assertEquals(0, nonBlockingJsonParser1.getTextLength());
      assertFalse(nonBlockingJsonParser1.hasTextCharacters());
      assertFalse(nonBlockingJsonParser1.isNaN());
      assertFalse(nonBlockingJsonParser1.canReadTypeId());
      assertEquals(0, nonBlockingJsonParser1.currentTokenId());
      assertEquals(1, nonBlockingJsonParser1.getTokenColumnNr());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(63, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(63, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(nonBlockingJsonParser1);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile("JSON", "JSON");
      assertEquals("/tmp/JSON0JSON", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/tmp", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("JSON0JSON", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValues((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      // Undeclared exception!
      try { 
        objectReader0.readValues(byteArray0, (int)  (-1), 1451);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("<x?0(");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("<x?0(", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("<x?0(", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals("<x?0(", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      JsonFactory jsonFactory2 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals("<x?0(", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(63, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("<x?0(", jsonFactory2.getRootValueSeparator());
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(63, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(63, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertNotNull(jsonFactory3);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl1);
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(63, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(63, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(63, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(63, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectReader0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(63, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(63, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(objectMapper1);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory3.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(63, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(63, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertNotNull(nonBlockingJsonParser0);
      
      try { 
        objectReader0._bindAndClose(nonBlockingJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      JsonFactory jsonFactory0 = objectReader0.getFactory();
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory0);
      
      try { 
        objectReader1.readValue((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      try { 
        objectReader0.readValue((InputStream) sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (SequenceInputStream); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      ObjectReader objectReader1 = objectReader0.withRootName((String) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-152));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature0);
      assertEquals(1, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature0.mappedFeature());
      
      ObjectReader objectReader1 = objectReader0.without((FormatFeature) jsonReadFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature0.mappedFeature());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        objectReader0.readValue("SCALAR");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'SCALAR': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"SCALAR\"; line: 1, column: 13]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader((ObjectReader) null, tokenFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(iOContext1);
      
      char[] charArray0 = new char[8];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, (Reader) null, objectMapper0, charsToNameCanonicalizer0, charArray0, 1056, 0, false);
      assertEquals(8, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(readerBasedJsonParser0);
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertNotSame(objectReader0, objectReader1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(8, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNull(formatSchema0);
      
      StringWriter stringWriter0 = new StringWriter(1);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 33, objectReader0, stringWriter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals("", stringWriter0.toString());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(33, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(writerBasedJsonGenerator0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(127, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals("", stringWriter0.toString());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(33, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonGeneratorDelegate0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, false, false);
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(127, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(127, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals("", stringWriter0.toString());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(33, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(filteringGeneratorDelegate0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withType((JavaType) null);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      MatchStrength matchStrength0 = MatchStrength.SOLID_MATCH;
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders2);
      
      MatchStrength matchStrength1 = MatchStrength.WEAK_MATCH;
      DataFormatReaders dataFormatReaders3 = dataFormatReaders2.withOptimalMatch(matchStrength1);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(matchStrength0, matchStrength1);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(matchStrength1, matchStrength0);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(matchStrength0.equals((Object)matchStrength1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(matchStrength1.equals((Object)matchStrength0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertNotNull(dataFormatReaders3);
      
      ObjectReader objectReader2 = objectReader1.withFormatDetection(dataFormatReaders3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(matchStrength0, matchStrength1);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(matchStrength1, matchStrength0);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(matchStrength0.equals((Object)matchStrength1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(matchStrength1.equals((Object)matchStrength0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      JsonFactory jsonFactory0 = objectReader0.getFactory();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNotNull(jsonFactory0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(7, deserializationFeatureArray0.length);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValues((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      String string0 = "SCALAR";
      // Undeclared exception!
      try { 
        objectReader0.withType((Type) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      byte[] byteArray0 = new byte[0];
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(object0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("SCALAR");
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNotNull(readerBasedJsonParser0);
      
      TypeReference<List<CollectionLikeType>> typeReference0 = (TypeReference<List<CollectionLikeType>>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      Iterator<List<CollectionLikeType>> iterator0 = objectReader0.readValues((JsonParser) readerBasedJsonParser0, typeReference0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(objectMapper0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = objectMapper1.reader((Base64Variant) null);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      assertEquals(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY, deserializationFeature0);
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      
      ObjectReader objectReader2 = objectReader1.withValueToUpdate(tokenFilter0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      ObjectReader objectReader3 = objectReader2.without(deserializationFeature0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader3);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertSame(objectReader3, objectReader2);
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(128, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      
      JsonNode jsonNode0 = objectReader2.createArrayNode();
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader3);
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(jsonNode0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader(3);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      
      HashMap<String, BinaryNode> hashMap0 = new HashMap<String, BinaryNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertEquals("", objectNode0.asText());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertNotNull(objectNode0);
      
      JsonNode jsonNode1 = objectNode0.setAll((Map<String, ? extends JsonNode>) hashMap0);
      assertSame(objectNode0, jsonNode1);
      assertSame(jsonNode1, objectNode0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertEquals("", objectNode0.asText());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertFalse(jsonNode1.isShort());
      assertFalse(jsonNode1.isInt());
      assertFalse(jsonNode1.booleanValue());
      assertNull(jsonNode1.numberType());
      assertFalse(jsonNode1.isMissingNode());
      assertFalse(jsonNode1.isLong());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertFalse(jsonNode1.isDouble());
      assertFalse(jsonNode1.isIntegralNumber());
      assertEquals("", jsonNode1.asText());
      assertFalse(jsonNode1.isArray());
      assertFalse(jsonNode1.isBigInteger());
      assertEquals(0, jsonNode1.size());
      assertFalse(jsonNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, jsonNode1.getNodeType());
      assertNull(jsonNode1.textValue());
      assertFalse(jsonNode1.isBigDecimal());
      assertTrue(jsonNode1.isEmpty());
      assertTrue(jsonNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, jsonNode1.asToken());
      assertNotNull(jsonNode1);
      
      File file0 = MockFile.createTempFile("JSON", "JSON");
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("JSON0JSON", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp/JSON0JSON", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "JSON");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      try { 
        objectReader1.readValues(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("", (Object) "");
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotNull(injectableValues_Std1);
      
      ObjectReader objectReader1 = objectReader0.with((InjectableValues) injectableValues_Std1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ArrayNode> class0 = ArrayNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0._new((ObjectReader) null, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("JSON/No value type configured for ObjectReader");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "JSON");
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("JSON", "No value type configured for ObjectReader");
      assertNotNull(mockFile0);
      
      boolean boolean1 = mockFile0.mkdirs();
      assertFalse(boolean1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/JSON/No value type configured for ObjectReader", mockFile0.toString());
      assertEquals("No value type configured for ObjectReader", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(5L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/JSON", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(boolean1 == boolean0);
      
      try { 
        objectReader0.readValue((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      Class<Object> class0 = Object.class;
      ObjectReader objectReader1 = objectReader0.withType(class0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      ObjectReader objectReader2 = objectReader1.forType(class0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[8];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader2;
      objectReaderArray0[3] = objectReader1;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      objectReaderArray0[7] = objectReader1;
      ObjectReader objectReader3 = objectReader2.withFormatDetection(objectReaderArray0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertEquals(8, objectReaderArray0.length);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader3);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNotNull(objectNode0);
      
      ObjectNode objectNode1 = objectNode0.put("Root name '%s' does not match expected ('%s') for type %s", "Root name '%s' does not match expected ('%s') for type %s");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertNotNull(objectNode1);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains("Root name '%s' does not match expected ('%s') for type %s"));
      
      ObjectNode objectNode2 = objectNode1.retain((Collection<String>) stack0);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isShort());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertEquals(0, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertTrue(objectNode1.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigDecimal());
      assertTrue(objectNode2.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals("", objectNode2.asText());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertEquals(0, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isMissingNode());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertNotNull(objectNode2);
      assertFalse(stack0.contains("Root name '%s' does not match expected ('%s') for type %s"));
      
      ObjectNode objectNode3 = objectNode2.without((Collection<String>) stack0);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode2);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isShort());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertEquals(0, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertTrue(objectNode1.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigDecimal());
      assertTrue(objectNode2.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals("", objectNode2.asText());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertEquals(0, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isMissingNode());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode3.isIntegralNumber());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.booleanValue());
      assertTrue(objectNode3.isEmpty());
      assertNull(objectNode3.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isMissingNode());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.isInt());
      assertEquals(0, objectNode3.size());
      assertNull(objectNode3.textValue());
      assertFalse(objectNode3.isBigInteger());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isLong());
      assertFalse(objectNode3.isFloat());
      assertNotNull(objectNode3);
      assertFalse(stack0.contains("Root name '%s' does not match expected ('%s') for type %s"));
      
      ObjectNode objectNode4 = objectNode3.put("Root name '%s' does not match expected ('%s') for type %s", 0.0);
      assertSame(objectNode0, objectNode4);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode4);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode2, objectNode4);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode4);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode4, objectNode1);
      assertSame(objectNode4, objectNode2);
      assertSame(objectNode4, objectNode3);
      assertSame(objectNode4, objectNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals("", objectNode2.asText());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isEmpty());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isMissingNode());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode3.isEmpty());
      assertFalse(objectNode3.isIntegralNumber());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.booleanValue());
      assertNull(objectNode3.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isMissingNode());
      assertEquals(1, objectNode3.size());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.isInt());
      assertNull(objectNode3.textValue());
      assertFalse(objectNode3.isBigInteger());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isLong());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode4.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode4.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode4.getNodeType());
      assertNull(objectNode4.numberType());
      assertFalse(objectNode4.booleanValue());
      assertEquals("", objectNode4.asText());
      assertFalse(objectNode4.isArray());
      assertFalse(objectNode4.isDouble());
      assertFalse(objectNode4.isIntegralNumber());
      assertFalse(objectNode4.isLong());
      assertFalse(objectNode4.isFloat());
      assertFalse(objectNode4.isFloatingPointNumber());
      assertEquals(1, objectNode4.size());
      assertFalse(objectNode4.isShort());
      assertFalse(objectNode4.isInt());
      assertNull(objectNode4.textValue());
      assertFalse(objectNode4.isBigInteger());
      assertTrue(objectNode4.isObject());
      assertFalse(objectNode4.isMissingNode());
      assertFalse(objectNode4.isEmpty());
      assertNotNull(objectNode4);
      assertFalse(stack0.contains("Root name '%s' does not match expected ('%s') for type %s"));
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode4);
      assertSame(objectNode0, objectNode4);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode4);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode2, objectNode4);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode4);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode4, objectNode1);
      assertSame(objectNode4, objectNode2);
      assertSame(objectNode4, objectNode3);
      assertSame(objectNode4, objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals("", objectNode2.asText());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isEmpty());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isMissingNode());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode3.isEmpty());
      assertFalse(objectNode3.isIntegralNumber());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.booleanValue());
      assertNull(objectNode3.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isMissingNode());
      assertEquals(1, objectNode3.size());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.isInt());
      assertNull(objectNode3.textValue());
      assertFalse(objectNode3.isBigInteger());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isLong());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode4.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode4.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode4.getNodeType());
      assertNull(objectNode4.numberType());
      assertFalse(objectNode4.booleanValue());
      assertEquals("", objectNode4.asText());
      assertFalse(objectNode4.isArray());
      assertFalse(objectNode4.isDouble());
      assertFalse(objectNode4.isIntegralNumber());
      assertFalse(objectNode4.isLong());
      assertFalse(objectNode4.isFloat());
      assertFalse(objectNode4.isFloatingPointNumber());
      assertEquals(1, objectNode4.size());
      assertFalse(objectNode4.isShort());
      assertFalse(objectNode4.isInt());
      assertNull(objectNode4.textValue());
      assertFalse(objectNode4.isBigInteger());
      assertTrue(objectNode4.isObject());
      assertFalse(objectNode4.isMissingNode());
      assertFalse(objectNode4.isEmpty());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNotNull(jsonParser0);
      assertFalse(stack0.contains("Root name '%s' does not match expected ('%s') for type %s"));
      
      try { 
        objectReader0.readValues("b\"iN6sJ.");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'b': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"b\"iN6sJ.\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(objectMapper0);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = objectMapper1.reader((Base64Variant) null);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      assertEquals(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY, deserializationFeature0);
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      
      ObjectReader objectReader2 = objectReader1.withValueToUpdate(tokenFilter0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      ObjectReader objectReader3 = objectReader2.without(deserializationFeature0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader3, objectReader0);
      assertSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertNotNull(objectReader3);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(128, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      
      JsonNode jsonNode0 = objectReader2.createArrayNode();
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader(3);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      
      HashMap<String, BinaryNode> hashMap0 = new HashMap<String, BinaryNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertNotNull(objectNode0);
      
      JsonNode jsonNode1 = objectNode0.setAll((Map<String, ? extends JsonNode>) hashMap0);
      assertSame(objectNode0, jsonNode1);
      assertSame(jsonNode1, objectNode0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(jsonNode1.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, jsonNode1.asToken());
      assertTrue(jsonNode1.isEmpty());
      assertFalse(jsonNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, jsonNode1.getNodeType());
      assertFalse(jsonNode1.isIntegralNumber());
      assertEquals("", jsonNode1.asText());
      assertFalse(jsonNode1.isArray());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertFalse(jsonNode1.isFloat());
      assertFalse(jsonNode1.isLong());
      assertFalse(jsonNode1.isDouble());
      assertFalse(jsonNode1.isMissingNode());
      assertFalse(jsonNode1.booleanValue());
      assertNull(jsonNode1.numberType());
      assertEquals(0, jsonNode1.size());
      assertTrue(jsonNode1.isObject());
      assertNull(jsonNode1.textValue());
      assertFalse(jsonNode1.isInt());
      assertFalse(jsonNode1.isShort());
      assertNotNull(jsonNode1);
      
      Class<Object> class0 = Object.class;
      TokenFilter tokenFilter1 = (TokenFilter)objectReader2.treeToValue((TreeNode) jsonNode1, class0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, jsonNode1);
      assertSame(jsonNode1, objectNode0);
      assertSame(tokenFilter0, tokenFilter1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertSame(tokenFilter1, tokenFilter0);
      assertSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(jsonNode1.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, jsonNode1.asToken());
      assertTrue(jsonNode1.isEmpty());
      assertFalse(jsonNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, jsonNode1.getNodeType());
      assertFalse(jsonNode1.isIntegralNumber());
      assertEquals("", jsonNode1.asText());
      assertFalse(jsonNode1.isArray());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertFalse(jsonNode1.isFloat());
      assertFalse(jsonNode1.isLong());
      assertFalse(jsonNode1.isDouble());
      assertFalse(jsonNode1.isMissingNode());
      assertFalse(jsonNode1.booleanValue());
      assertNull(jsonNode1.numberType());
      assertEquals(0, jsonNode1.size());
      assertTrue(jsonNode1.isObject());
      assertNull(jsonNode1.textValue());
      assertFalse(jsonNode1.isInt());
      assertFalse(jsonNode1.isShort());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeRawValue());
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(tokenFilter1);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(objectMapper0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = objectMapper1.reader((Base64Variant) null);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      assertEquals(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY, deserializationFeature0);
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(256, deserializationFeature0.getMask());
      
      ObjectReader objectReader2 = objectReader1.withValueToUpdate(tokenFilter0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      ObjectReader objectReader3 = objectReader2.without(deserializationFeature0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader3);
      assertSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      assertEquals(128, jsonReadFeature0.getMask());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      
      JsonNode jsonNode0 = objectReader2.createArrayNode();
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader3);
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader(3);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = '\'';
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      assertNotSame(charsToNameCanonicalizer2, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer2, charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer2.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer2.hashSeed());
      assertTrue(charsToNameCanonicalizer2.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer2.size());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer2.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer2.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer2);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 25, pipedReader0, objectMapper0, charsToNameCanonicalizer1, charArray0, 0, 25, true);
      assertEquals(3, charArray0.length);
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(25, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'x', 'x', '\''}, charArray0);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer2));
      assertNotNull(readerBasedJsonParser0);
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer2);
      assertEquals(3, charArray0.length);
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(25, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'x', 'x', '\''}, charArray0);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer2));
      assertNull(formatSchema0);
      
      objectReader3._verifySchemaType((FormatSchema) null);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader3);
      assertSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0.readValues("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isMissingNode());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      
      TextNode textNode0 = new TextNode("Root name '%s' does not match expected ('%s') for type %s");
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isArray());
      assertEquals("Root name '%s' does not match expected ('%s') for type %s", textNode0.asText());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isIntegralNumber());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.booleanValue());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isLong());
      assertEquals("Root name '%s' does not match expected ('%s') for type %s", textNode0.textValue());
      assertFalse(textNode0.isBigDecimal());
      assertTrue(textNode0.isEmpty());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isMissingNode());
      assertNotNull(textNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(jsonNode0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonParser0);
      
      try { 
        objectReader0.readValues(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals("JSON", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("JSON", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("JSON");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte)114;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte)62, (byte)92, (byte)0, (byte)1, (byte) (-18), (byte) (-24), (byte)114}, byteArray0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "-tg");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      try { 
        objectReader0.readValues((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'F': was expecting ('true', 'false' or 'null')
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertNotNull(arrayNode0);
      
      ObjectNode objectNode0 = arrayNode0.addObject();
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isEmpty());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertNotNull(objectNode0);
      
      ObjectNode objectNode1 = objectNode0.with("|");
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode1, objectNode0);
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isEmpty());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isLong());
      assertTrue(objectNode1.isEmpty());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(0, objectNode1.size());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertNotNull(objectNode1);
      
      ObjectNode objectNode2 = objectNode1.put((String) null, (-1259L));
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isEmpty());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertNotNull(objectNode2);
      
      HashMap<String, BinaryNode> hashMap0 = new HashMap<String, BinaryNode>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JsonNode jsonNode0 = objectNode2.setAll((Map<String, ? extends JsonNode>) hashMap0);
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode0, jsonNode0);
      assertSame(objectNode1, jsonNode0);
      assertNotSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, jsonNode0);
      assertSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertSame(jsonNode0, objectNode1);
      assertSame(jsonNode0, objectNode2);
      assertNotSame(jsonNode0, objectNode0);
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isEmpty());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isArray());
      assertEquals("", jsonNode0.asText());
      assertEquals(1, jsonNode0.size());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(jsonNode0.equals((Object)objectNode0));
      assertNotNull(jsonNode0);
      
      Class<Object> class0 = Object.class;
      LinkedHashMap linkedHashMap0 = (LinkedHashMap)objectReader0.treeToValue((TreeNode) jsonNode0, class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode0, jsonNode0);
      assertSame(objectNode1, jsonNode0);
      assertNotSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, jsonNode0);
      assertSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertSame(jsonNode0, objectNode1);
      assertSame(jsonNode0, objectNode2);
      assertNotSame(jsonNode0, objectNode0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isEmpty());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isArray());
      assertEquals("", jsonNode0.asText());
      assertEquals(1, jsonNode0.size());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(1, linkedHashMap0.size());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode0.equals((Object)jsonNode0));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(jsonNode0.equals((Object)objectNode0));
      assertNotNull(linkedHashMap0);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JSON", "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider0, defaultDeserializationContext0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, deserializationFeatureArray0.length);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectReader0);
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.WRITE_NAN_AS_STRINGS;
      assertEquals(JsonWriteFeature.WRITE_NAN_AS_STRINGS, jsonWriteFeature0);
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertEquals(2, jsonWriteFeature0.getMask());
      assertEquals(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS, jsonWriteFeature0.mappedFeature());
      
      ObjectReader objectReader1 = objectReader0.with((FormatFeature) jsonWriteFeature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, deserializationFeatureArray0.length);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertEquals(2, jsonWriteFeature0.getMask());
      assertEquals(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS, jsonWriteFeature0.mappedFeature());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-8);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte) (-8), (-46));
      assertEquals(0, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)63, (byte) (-8), (byte)0, (byte)0}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)63, (byte) (-8), (byte)0, (byte)0}, byteArray0);
      assertNull(jsonParser0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertNotNull(jsonParserDelegate0);
      
      PipedReader pipedReader0 = new PipedReader(64);
      assertNotNull(pipedReader0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      // Undeclared exception!
      try { 
        objectReader0.with(deserializationFeature1, (DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = new FloatNode((-3065.0F));
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isFloat());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isEmpty());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065L), floatNode0.longValue());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isBigInteger());
      assertNotNull(floatNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isFloat());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isEmpty());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065L), floatNode0.longValue());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isBigInteger());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isFloat());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isEmpty());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065L), floatNode0.longValue());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      File file0 = MockFile.createTempFile("JSON", "r6*(H9Ni5K+6C8s");
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/JSON0r6*(H9Ni5K+6C8s", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("JSON0r6*(H9Ni5K+6C8s", file0.getName());
      assertNotNull(file0);
      
      MappingIterator<PlaceholderForType> mappingIterator0 = objectReader0.readValues(file0);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isFloat());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isEmpty());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065L), floatNode0.longValue());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/JSON0r6*(H9Ni5K+6C8s", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("JSON0r6*(H9Ni5K+6C8s", file0.getName());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(mappingIterator0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectReader objectReader2 = objectReader1.without(deserializationFeature0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isFloat());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isEmpty());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065L), floatNode0.longValue());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(objectMapper0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = objectMapper1.reader((Base64Variant) null);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      try { 
        objectReader1._reportUndetectableSource(objectMapper2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type com.fasterxml.jackson.databind.ObjectMapper with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = new FloatNode((-3065.0F));
      assertNull(floatNode0.textValue());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isDouble());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertEquals((-3065L), floatNode0.longValue());
      assertEquals((-3065), floatNode0.intValue());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isInt());
      assertNotNull(floatNode0);
      
      FloatNode floatNode1 = FloatNode.valueOf((-3065.0F));
      assertNotSame(floatNode1, floatNode0);
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertFalse(floatNode1.isBigInteger());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertEquals((-3065.0), floatNode1.doubleValue(), 0.01);
      assertEquals((-3065), floatNode1.intValue());
      assertEquals((-3065L), floatNode1.longValue());
      assertFalse(floatNode1.isShort());
      assertTrue(floatNode1.isFloat());
      assertFalse(floatNode1.isDouble());
      assertFalse(floatNode1.isIntegralNumber());
      assertFalse(floatNode1.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertFalse(floatNode1.isLong());
      assertFalse(floatNode1.isBigDecimal());
      assertFalse(floatNode1.isObject());
      assertNull(floatNode1.textValue());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertFalse(floatNode1.isMissingNode());
      assertTrue(floatNode1.isEmpty());
      assertFalse(floatNode1.isInt());
      assertEquals((-3065.0F), floatNode1.floatValue(), 0.01F);
      assertFalse(floatNode1.isArray());
      assertEquals((short) (-3065), floatNode1.shortValue());
      assertEquals(0, floatNode1.size());
      assertTrue(floatNode1.canConvertToInt());
      assertTrue(floatNode1.canConvertToLong());
      assertFalse(floatNode1.booleanValue());
      assertTrue(floatNode1.equals((Object)floatNode0));
      assertNotNull(floatNode1);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(floatNode1);
      assertNotSame(floatNode1, floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertFalse(floatNode1.isBigInteger());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertEquals((-3065.0), floatNode1.doubleValue(), 0.01);
      assertEquals((-3065), floatNode1.intValue());
      assertEquals((-3065L), floatNode1.longValue());
      assertFalse(floatNode1.isShort());
      assertTrue(floatNode1.isFloat());
      assertFalse(floatNode1.isDouble());
      assertFalse(floatNode1.isIntegralNumber());
      assertFalse(floatNode1.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertFalse(floatNode1.isLong());
      assertFalse(floatNode1.isBigDecimal());
      assertFalse(floatNode1.isObject());
      assertNull(floatNode1.textValue());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertFalse(floatNode1.isMissingNode());
      assertTrue(floatNode1.isEmpty());
      assertFalse(floatNode1.isInt());
      assertEquals((-3065.0F), floatNode1.floatValue(), 0.01F);
      assertFalse(floatNode1.isArray());
      assertEquals((short) (-3065), floatNode1.shortValue());
      assertEquals(0, floatNode1.size());
      assertTrue(floatNode1.canConvertToInt());
      assertTrue(floatNode1.canConvertToLong());
      assertFalse(floatNode1.booleanValue());
      assertTrue(floatNode1.equals((Object)floatNode0));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertFalse(floatNode1.isBigInteger());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertEquals((-3065.0), floatNode1.doubleValue(), 0.01);
      assertEquals((-3065), floatNode1.intValue());
      assertEquals((-3065L), floatNode1.longValue());
      assertFalse(floatNode1.isShort());
      assertTrue(floatNode1.isFloat());
      assertFalse(floatNode1.isDouble());
      assertFalse(floatNode1.isIntegralNumber());
      assertFalse(floatNode1.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertFalse(floatNode1.isLong());
      assertFalse(floatNode1.isBigDecimal());
      assertFalse(floatNode1.isObject());
      assertNull(floatNode1.textValue());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertFalse(floatNode1.isMissingNode());
      assertTrue(floatNode1.isEmpty());
      assertFalse(floatNode1.isInt());
      assertEquals((-3065.0F), floatNode1.floatValue(), 0.01F);
      assertFalse(floatNode1.isArray());
      assertEquals((short) (-3065), floatNode1.shortValue());
      assertEquals(0, floatNode1.size());
      assertTrue(floatNode1.canConvertToInt());
      assertTrue(floatNode1.canConvertToLong());
      assertFalse(floatNode1.booleanValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(floatNode1.equals((Object)floatNode0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.readValues((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature0);
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature0.mappedFeature());
      assertEquals(16, jsonReadFeature0.getMask());
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[7];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(7, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(7, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)1;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0, (int) (byte)1, 2);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(7, objectReaderArray0.length);
      assertEquals(4, byteArray0.length);
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertEquals(MatchStrength.NO_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)1, (byte) (-64), (byte)1}, byteArray0);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders_Match0);
      
      try { 
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 1)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\uFFFD\u0001\uFFFD\u0001\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findTreeDeserializer(defaultDeserializationContext0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(jsonDeserializer0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-1);
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 1)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0001\u0000,{wf\uFFFD\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = new FloatNode((-3065.0F));
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isEmpty());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065L), floatNode0.longValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertNotNull(floatNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isEmpty());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065L), floatNode0.longValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      JsonNode jsonNode0 = objectReader0.readTree("");
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isEmpty());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065L), floatNode0.longValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isArray());
      assertNotNull(jsonNode0);
      
      ObjectReader objectReader1 = objectReader0.withoutAttribute(jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isEmpty());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065L), floatNode0.longValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(objectReader1);
      
      ConcurrentHashMap<CollectionType, ReferenceType> concurrentHashMap0 = new ConcurrentHashMap<CollectionType, ReferenceType>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectReader objectReader2 = objectReader1.withAttributes(concurrentHashMap0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isEmpty());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065L), floatNode0.longValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper2.reader((ContextAttributes) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(6, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider0, defaultDeserializationContext0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectReader0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNull(deserializationConfig0);
      
      // Undeclared exception!
      try { 
        objectReader0._with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0.readTree((Reader) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isArray());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonNode0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      JsonFactory jsonFactory1 = objectReader0.getFactory();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-86);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte)111, (int) (byte)111);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(7, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)111, (byte)61, (byte)12, (byte) (-105), (byte)63, (byte)12, (byte) (-86)}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(7, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)111, (byte)61, (byte)12, (byte) (-105), (byte)63, (byte)12, (byte) (-86)}, byteArray0);
      assertNull(jsonParser0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertNotNull(jsonParserDelegate0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      JsonParser jsonParser1 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(7, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)111, (byte)61, (byte)12, (byte) (-105), (byte)63, (byte)12, (byte) (-86)}, byteArray0);
      assertNull(jsonParser1);
      
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(2, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<ShortNode> class0 = ShortNode.class;
      // Undeclared exception!
      try { 
        objectReader0.readValues((JsonParser) jsonParserDelegate0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[7];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(7, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      Class<Object> class0 = Object.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertNotNull(resolvedRecursiveType0);
      
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0, resolvedRecursiveType0);
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertNotNull(mapLikeType0);
      
      MapLikeType mapLikeType1 = mapLikeType0.withKeyType(resolvedRecursiveType0);
      assertSame(mapLikeType0, mapLikeType1);
      assertSame(mapLikeType1, mapLikeType0);
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType1.hasValueHandler());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.useStaticType());
      assertTrue(mapLikeType1.isJavaLangObject());
      assertFalse(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isArrayType());
      assertFalse(mapLikeType1.isInterface());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isFinal());
      assertTrue(mapLikeType1.hasContentType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isAbstract());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertNotNull(mapLikeType1);
      
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(mapLikeType1);
      assertSame(mapLikeType0, mapLikeType1);
      assertSame(mapLikeType1, mapLikeType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType1.hasValueHandler());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.useStaticType());
      assertTrue(mapLikeType1.isJavaLangObject());
      assertFalse(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isArrayType());
      assertFalse(mapLikeType1.isInterface());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isFinal());
      assertTrue(mapLikeType1.hasContentType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertNotNull(javaType0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withType(javaType0);
      assertSame(mapLikeType0, mapLikeType1);
      assertSame(mapLikeType1, mapLikeType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertSame(resolvedRecursiveType0, javaType0);
      assertEquals(7, objectReaderArray0.length);
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType1.hasValueHandler());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.useStaticType());
      assertTrue(mapLikeType1.isJavaLangObject());
      assertFalse(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isArrayType());
      assertFalse(mapLikeType1.isInterface());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isFinal());
      assertTrue(mapLikeType1.hasContentType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(mapLikeType0, mapLikeType1);
      assertSame(mapLikeType1, mapLikeType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(7, objectReaderArray0.length);
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapLikeType1.hasValueHandler());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.useStaticType());
      assertTrue(mapLikeType1.isJavaLangObject());
      assertFalse(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isArrayType());
      assertFalse(mapLikeType1.isInterface());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isFinal());
      assertTrue(mapLikeType1.hasContentType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withType((Type) class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[3];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature0);
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(16, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      formatFeatureArray0[1] = (FormatFeature) jsonReadFeature0;
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertNotSame(jsonReadFeature1, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature1);
      assertEquals(128, jsonReadFeature1.getMask());
      assertEquals(0, jsonReadFeature1.collectDefaults());
      assertFalse(jsonReadFeature1.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature1.mappedFeature());
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      
      formatFeatureArray0[2] = (FormatFeature) jsonReadFeature1;
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertNotNull(objectNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode0);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonParser0);
      
      JsonParser jsonParser1 = objectReader0.treeAsTokens(objectNode0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(jsonParser1, jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertNull(jsonParser1.getLastClearedToken());
      assertEquals(0, jsonParser1.getFeatureMask());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertEquals(0, jsonParser1.getTextOffset());
      assertFalse(jsonParser1.canReadObjectId());
      assertEquals(0, jsonParser1.currentTokenId());
      assertNull(jsonParser1.getCurrentToken());
      assertFalse(jsonParser1.isClosed());
      assertEquals(0, jsonParser1.getCurrentTokenId());
      assertFalse(jsonParser1.canParseAsync());
      assertFalse(jsonParser1.hasCurrentToken());
      assertFalse(jsonParser1.hasTextCharacters());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertFalse(jsonParser1.canReadTypeId());
      assertNull(jsonParser1.currentToken());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonParser1.equals((Object)jsonParser0));
      assertNotNull(jsonParser1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = new FloatNode((-3065.0F));
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isDouble());
      assertEquals((-3065L), floatNode0.longValue());
      assertFalse(floatNode0.isArray());
      assertEquals((-3065), floatNode0.intValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isInt());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isNaN());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertNotNull(floatNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isDouble());
      assertEquals((-3065L), floatNode0.longValue());
      assertFalse(floatNode0.isArray());
      assertEquals((-3065), floatNode0.intValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isInt());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isNaN());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader2 = objectReader1.with((InjectableValues) injectableValues_Std0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      InjectableValues.Std injectableValues_Std1 = new InjectableValues.Std();
      assertFalse(injectableValues_Std1.equals((Object)injectableValues_Std0));
      assertNotNull(injectableValues_Std1);
      
      ObjectReader objectReader1 = objectReader0.with((InjectableValues) injectableValues_Std1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(injectableValues_Std1, injectableValues_Std0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(injectableValues_Std1.equals((Object)injectableValues_Std0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.at((String) null);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(injectableValues_Std1, injectableValues_Std0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(injectableValues_Std1.equals((Object)injectableValues_Std0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        objectReader0.readValue((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)73;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNotNull(beanProperty_Bogus0);
      
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNotNull(propertyName0);
      
      PropertyName propertyName1 = propertyName0.internSimpleName();
      assertSame(propertyName0, propertyName1);
      assertSame(propertyName1, propertyName0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName1.getNamespace());
      assertFalse(propertyName1.hasNamespace());
      assertTrue(propertyName1.isEmpty());
      assertFalse(propertyName1.hasSimpleName());
      assertEquals("", propertyName1.getSimpleName());
      assertNotNull(propertyName1);
      
      ObjectReader objectReader1 = objectReader0.withRootName(propertyName1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(propertyName0, propertyName1);
      assertSame(propertyName1, propertyName0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName1.getNamespace());
      assertFalse(propertyName1.hasNamespace());
      assertTrue(propertyName1.isEmpty());
      assertFalse(propertyName1.hasSimpleName());
      assertEquals("", propertyName1.getSimpleName());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)4, (byte)126, (byte)1, (byte)73, (byte)1, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndCloseAsTree(byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      StringReader stringReader0 = new StringReader("u[]JGn<Ll!B72");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readValue((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'u': was expecting ('true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature0);
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature0.mappedFeature());
      assertEquals(16, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertNotSame(jsonReadFeature1, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature1);
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature1.mappedFeature());
      assertEquals(0, jsonReadFeature1.collectDefaults());
      assertFalse(jsonReadFeature1.enabledByDefault());
      assertEquals(128, jsonReadFeature1.getMask());
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[6];
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      JsonReadFeature jsonReadFeature2 = JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES;
      assertNotSame(jsonReadFeature2, jsonReadFeature0);
      assertNotSame(jsonReadFeature2, jsonReadFeature1);
      assertEquals(JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature2);
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature2.mappedFeature());
      assertEquals(8, jsonReadFeature2.getMask());
      assertEquals(0, jsonReadFeature2.collectDefaults());
      assertFalse(jsonReadFeature2.enabledByDefault());
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      
      formatFeatureArray0[2] = (FormatFeature) jsonReadFeature0;
      formatFeatureArray0[3] = (FormatFeature) jsonReadFeature0;
      formatFeatureArray0[4] = (FormatFeature) jsonReadFeature0;
      formatFeatureArray0[5] = (FormatFeature) jsonReadFeature1;
      // Undeclared exception!
      try { 
        objectReader0.withFeatures(formatFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      assertEquals(DeserializationFeature.WRAP_EXCEPTIONS, deserializationFeature0);
      assertEquals(32768, deserializationFeature0.getMask());
      assertTrue(deserializationFeature0.enabledByDefault());
      
      ContextAttributes contextAttributes1 = contextAttributes0.withPerCallAttribute(deserializationFeature0, objectMapper0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(32768, deserializationFeature0.getMask());
      assertTrue(deserializationFeature0.enabledByDefault());
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes1);
      
      ConcurrentHashMap<TextNode, FilteringParserDelegate> concurrentHashMap0 = new ConcurrentHashMap<TextNode, FilteringParserDelegate>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ContextAttributes contextAttributes2 = contextAttributes1.withSharedAttributes(concurrentHashMap0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(32768, deserializationFeature0.getMask());
      assertTrue(deserializationFeature0.enabledByDefault());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertNotNull(contextAttributes2);
      
      ContextAttributes contextAttributes3 = contextAttributes2.withoutSharedAttribute(concurrentHashMap0);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertSame(contextAttributes2, contextAttributes3);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertSame(contextAttributes3, contextAttributes2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(32768, deserializationFeature0.getMask());
      assertTrue(deserializationFeature0.enabledByDefault());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes3);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertSame(contextAttributes2, contextAttributes3);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertSame(contextAttributes3, contextAttributes2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(32768, deserializationFeature0.getMask());
      assertTrue(deserializationFeature0.enabledByDefault());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes1.equals((Object)contextAttributes3));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertNotNull(objectReader0);
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(objectReader0));
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      assertFalse(hashSet0.contains(objectReader0));
      
      MatchStrength matchStrength0 = MatchStrength.WEAK_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders1);
      assertFalse(hashSet0.contains(objectReader0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte) (-64);
      byteArray0[8] = (byte)0;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0, 0, (int) (byte) (-64));
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(9, byteArray0.length);
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)1, (byte)1, (byte) (-96), (byte) (-15), (byte)19, (byte) (-64), (byte)0}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      assertFalse(hashSet0.contains(objectReader0));
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      assertEquals(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY, deserializationFeature0);
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(deserializationFeature0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl2);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader2 = objectMapper1.reader((FormatSchema) null);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      boolean boolean0 = objectReader2.isEnabled(mapperFeature0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertTrue(boolean0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(0, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertNotNull(objectNode0);
      
      JsonParser jsonParser0 = objectReader1.treeAsTokens(objectNode0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(0, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertNotNull(jsonParser0);
      
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      MappingIterator<Integer> mappingIterator0 = objectReader1._newIterator(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (JsonDeserializer<?>) jsonDeserializer0, true);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(0, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertNotNull(mappingIterator0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)0;
      JsonNode jsonNode0 = objectReader1.readTree(byteArray0, (int) (byte) (-57), (int) (byte)0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertEquals(8, byteArray0.length);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals("", jsonNode0.asText());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isDouble());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isObject());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertArrayEquals(new byte[] {(byte)71, (byte) (-120), (byte)0, (byte) (-57), (byte) (-38), (byte)0, (byte)80, (byte)0}, byteArray0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonNode jsonNode0 = objectReader0.createObjectNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isIntegralNumber());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isShort());
      assertNull(jsonNode0.textValue());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertNotNull(jsonNode0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      JsonFactory jsonFactory0 = objectReader0.getFactory();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)63;
      byte byte0 = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      byte byte1 = (byte) (-8);
      byteArray0[5] = (byte) (-8);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte) (-8), (-46));
      assertEquals(0, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)63, (byte) (-8), (byte)0, (byte)0}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)63, (byte) (-8), (byte)0, (byte)0}, byteArray0);
      assertNull(jsonParser0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertNotNull(jsonParserDelegate0);
      
      Class<ShortNode> class0 = ShortNode.class;
      Iterator<ShortNode> iterator0 = objectReader0.readValues((JsonParser) null, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(iterator0);
      
      ObjectReader objectReader1 = objectReader0.with((Base64Variant) null);
      assertSame(objectReader1, objectReader0);
      assertSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("JSON", "");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertTrue(jsonNode0.isEmpty());
      assertEquals("", jsonNode0.asText());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      byte[] byteArray0 = new byte[0];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte) (-8), 64);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(jsonParser0);
      
      JsonParser jsonParser1 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(jsonParser1);
      
      Class<ShortNode> class0 = ShortNode.class;
      Iterator<ShortNode> iterator0 = objectReader1.readValues((JsonParser) null, class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(iterator0);
      
      JsonFactory jsonFactory0 = objectReader1.getFactory();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory0);
      
      // Undeclared exception!
      try { 
        objectReader1._bindAsTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader2 = objectReader1.with((ContextAttributes) null);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      byte[] byteArray0 = new byte[0];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte) (-8), 64);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(jsonParser0);
      
      JsonParser jsonParser1 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(jsonParser1);
      
      Class<ShortNode> class0 = ShortNode.class;
      Iterator<ShortNode> iterator0 = objectReader1.readValues((JsonParser) null, class0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(iterator0);
      
      JsonFactory jsonFactory0 = objectReader1.getFactory();
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = new FloatNode((-3065.0F));
      assertFalse(floatNode0.isInt());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isObject());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isFloat());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertEquals((-3065L), floatNode0.longValue());
      assertTrue(floatNode0.isEmpty());
      assertEquals((-3065), floatNode0.intValue());
      assertNotNull(floatNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isInt());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isObject());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isFloat());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertEquals((-3065L), floatNode0.longValue());
      assertTrue(floatNode0.isEmpty());
      assertEquals((-3065), floatNode0.intValue());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isInt());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isObject());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isFloat());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertEquals((-3065L), floatNode0.longValue());
      assertTrue(floatNode0.isEmpty());
      assertEquals((-3065), floatNode0.intValue());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-76);
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      assertSame(tokenFilter1, tokenFilter0);
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeRawValue());
      assertNotNull(tokenFilter1);
      
      ObjectReader objectReader2 = new ObjectReader(objectReader1, tokenFilter1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isInt());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isObject());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isFloat());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertEquals((-3065L), floatNode0.longValue());
      assertTrue(floatNode0.isEmpty());
      assertEquals((-3065), floatNode0.intValue());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeRawValue());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      try { 
        objectReader2.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader2 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-36);
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0, (int) (byte) (-105), (int) (byte) (-105));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertEquals(13, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNotNull(jsonNode0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        objectReader0.readValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[3];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature0);
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(16, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature0.mappedFeature());
      
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertNotSame(jsonReadFeature1, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature1);
      assertFalse(jsonReadFeature1.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature1.mappedFeature());
      assertEquals(512, jsonReadFeature1.getMask());
      assertEquals(0, jsonReadFeature1.collectDefaults());
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      
      formatFeatureArray0[1] = (FormatFeature) jsonReadFeature1;
      JsonReadFeature jsonReadFeature2 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertNotSame(jsonReadFeature2, jsonReadFeature1);
      assertNotSame(jsonReadFeature2, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature2);
      assertEquals(128, jsonReadFeature2.getMask());
      assertEquals(0, jsonReadFeature2.collectDefaults());
      assertFalse(jsonReadFeature2.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature2.mappedFeature());
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature0));
      
      formatFeatureArray0[2] = (FormatFeature) jsonReadFeature2;
      ObjectReader objectReader1 = objectReader0.withFeatures(formatFeatureArray0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(3, formatFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = new FloatNode((-3065.0F));
      assertTrue(floatNode0.isEmpty());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isShort());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertNull(floatNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isInt());
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertEquals((-3065L), floatNode0.longValue());
      assertNotNull(floatNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(floatNode0.isEmpty());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isShort());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertNull(floatNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isInt());
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertEquals((-3065L), floatNode0.longValue());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(floatNode0.isEmpty());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isShort());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertNull(floatNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isInt());
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertEquals((-3065L), floatNode0.longValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[2];
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader2 = objectReader1.with((InjectableValues) injectableValues_Std0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(floatNode0.isEmpty());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isShort());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertNull(floatNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isInt());
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertEquals((-3065L), floatNode0.longValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        objectReader1.readValue((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Cannot use FormatSchema of type ");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("Cannot use FormatSchema of type ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("Cannot use FormatSchema of type ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("Cannot use FormatSchema of type ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("Cannot use FormatSchema of type ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("Cannot use FormatSchema of type ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("Cannot use FormatSchema of type ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = '`';
      charArray0[2] = 'p';
      charArray0[3] = ';';
      charArray0[4] = 'A';
      charArray0[5] = 'c';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0, 0, 441);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(6, charArray0.length);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("Cannot use FormatSchema of type ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("Cannot use FormatSchema of type ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertArrayEquals(new char[] {'c', '`', 'p', ';', 'A', 'c'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((short) (-20), bigInteger0.shortValue());
      assertEquals((byte) (-20), bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isFloat());
      assertFalse(bigIntegerNode0.booleanValue());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.isDouble());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isObject());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isShort());
      assertEquals((short) (-20), bigInteger0.shortValue());
      assertEquals((byte) (-20), bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertNotNull(bigIntegerNode0);
      
      try { 
        objectReader0._bind(readerBasedJsonParser0, bigIntegerNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'c': was expecting ('true', 'false' or 'null')
         //  at [Source: (char[])\"c`p;Ac\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((JsonParser) null, (TypeReference<IntNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      byte[] byteArray0 = new byte[0];
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(object0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("SCALAR");
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNotNull(readerBasedJsonParser0);
      
      TypeReference<List<CollectionLikeType>> typeReference0 = (TypeReference<List<CollectionLikeType>>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.readValues((JsonParser) readerBasedJsonParser0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      StreamWriteFeature streamWriteFeature0 = StreamWriteFeature.STRICT_DUPLICATE_DETECTION;
      StreamWriteFeature[] streamWriteFeatureArray0 = new StreamWriteFeature[3];
      streamWriteFeatureArray0[0] = streamWriteFeature0;
      streamWriteFeatureArray0[1] = streamWriteFeature0;
      streamWriteFeatureArray0[2] = streamWriteFeature0;
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.enable(streamWriteFeature0, streamWriteFeatureArray0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertEquals(3, streamWriteFeatureArray0.length);
      assertEquals(287, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(287, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder1);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertEquals(287, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory0);
      assertEquals(287, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      try { 
        objectReader1.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 4)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0004\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = new FloatNode((-3065.0F));
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isLong());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((-3065L), floatNode0.longValue());
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertTrue(floatNode0.canConvertToLong());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isObject());
      assertEquals(0, floatNode0.size());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertFalse(floatNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloat());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertNotNull(floatNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isLong());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((-3065L), floatNode0.longValue());
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertTrue(floatNode0.canConvertToLong());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isObject());
      assertEquals(0, floatNode0.size());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertFalse(floatNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloat());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isLong());
      assertEquals((-3065.0), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((-3065L), floatNode0.longValue());
      assertEquals((-3065), floatNode0.intValue());
      assertEquals((-3065.0F), floatNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertTrue(floatNode0.canConvertToLong());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isObject());
      assertEquals(0, floatNode0.size());
      assertEquals((short) (-3065), floatNode0.shortValue());
      assertFalse(floatNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloat());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      int int0 = (-2201);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-76);
      byteArray1[1] = (byte) (-102);
      try { 
        objectReader1.readValues(byteArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00B4' (code 180)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (byte[])\"\uFFFD\uFFFD\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("JSON", "F;3");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockFile mockFile2 = new MockFile(mockFile1, "veod>KYb+Jv<5rO ");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertNotNull(mockFile2);
      
      // Undeclared exception!
      try { 
        objectReader1.readValues((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "com.fasterxml.jackson.databind.ser.std.StringSerializer");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectReader objectReader2 = objectReader1.without(deserializationFeature0);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-8);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte) (-8), (-46));
      assertEquals(0, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)63, (byte) (-86), (byte) (-8), (byte)0}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)63, (byte) (-86), (byte) (-8), (byte)0}, byteArray0);
      assertNull(jsonParser0);
      
      JsonParser jsonParser1 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)63, (byte) (-86), (byte) (-8), (byte)0}, byteArray0);
      assertNull(jsonParser1);
      
      Class<ShortNode> class0 = ShortNode.class;
      Iterator<ShortNode> iterator0 = objectReader0.readValues((JsonParser) null, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(iterator0);
      
      ObjectReader objectReader1 = objectReader0.with((Base64Variant) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.withoutFeatures((DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "}`R3`*-3<w|@K0:jP-b");
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8225, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8225, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8225, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8225, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8225, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8225, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8225, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(objectReader0);
      
      ContextAttributes contextAttributes0 = objectReader0.getAttributes();
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8225, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8225, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(contextAttributes0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(objectMapper1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertNotNull(jsonFactory1);
      
      ObjectReader objectReader1 = objectReader0.with(jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader2 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(2, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      // Undeclared exception!
      try { 
        objectReader2.readTree((byte[]) null, (-2201), 43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature0);
      assertEquals(16, jsonReadFeature0.getMask());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature0.mappedFeature());
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader1 = objectReader0.with((InjectableValues) injectableValues_Std0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      try { 
        objectReader1.readValues(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      assertEquals(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY, deserializationFeature0);
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(256, deserializationFeature0.getMask());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(deserializationFeature0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser((byte[]) null, 1, (-740));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertNotNull(uTF8StreamJsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertNotNull(jsonFactory3);
      
      JsonFactory jsonFactory4 = jsonFactory2.configure(jsonParser_Feature0, false);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertNotNull(jsonFactory4);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory4);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader((JsonNodeFactory) null);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0._new(objectReader1, jsonFactory0);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      ObjectReader objectReader3 = objectReader0.with((JsonNodeFactory) null);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertNotNull(objectReader3);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader1 = objectReader0.withHandler(deserializationProblemHandler0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose(byteArray0, (byte)0, (-2557));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      assertEquals(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY, deserializationFeature0);
      assertEquals(256, deserializationFeature0.getMask());
      assertFalse(deserializationFeature0.enabledByDefault());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(128, jsonReadFeature0.getMask());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      
      JsonNode jsonNode0 = objectReader1.createArrayNode();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isEmpty());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, jsonReadFeature0, true);
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(128, jsonReadFeature0.getMask());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      HashMap<String, BinaryNode> hashMap0 = new HashMap<String, BinaryNode>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertNotNull(objectNode0);
      
      JsonNode jsonNode1 = objectNode0.setAll((Map<String, ? extends JsonNode>) hashMap0);
      assertSame(objectNode0, jsonNode1);
      assertSame(jsonNode1, objectNode0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertFalse(jsonNode1.isLong());
      assertFalse(jsonNode1.isMissingNode());
      assertFalse(jsonNode1.isDouble());
      assertFalse(jsonNode1.isShort());
      assertNull(jsonNode1.textValue());
      assertEquals("", jsonNode1.asText());
      assertFalse(jsonNode1.isBigInteger());
      assertFalse(jsonNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, jsonNode1.getNodeType());
      assertEquals(JsonToken.START_OBJECT, jsonNode1.asToken());
      assertTrue(jsonNode1.isEmpty());
      assertFalse(jsonNode1.isBigDecimal());
      assertFalse(jsonNode1.isIntegralNumber());
      assertEquals(0, jsonNode1.size());
      assertFalse(jsonNode1.isFloat());
      assertFalse(jsonNode1.booleanValue());
      assertTrue(jsonNode1.isObject());
      assertFalse(jsonNode1.isInt());
      assertNull(jsonNode1.numberType());
      assertNotNull(jsonNode1);
      
      Class<Object> class0 = Object.class;
      ObjectMapper objectMapper1 = (ObjectMapper)objectReader1.treeToValue((TreeNode) jsonNode0, class0);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isEmpty());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectMapper1);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectReader0.treeAsTokens(objectNode0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectNode0, jsonNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertNull(treeTraversingParser0.currentToken());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(treeTraversingParser0);
      
      ObjectReader objectReader2 = objectReader1.withHandler((DeserializationProblemHandler) null);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader3 = objectReader1.withoutFeatures(deserializationFeatureArray0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertEquals(7, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findTreeDeserializer(defaultDeserializationContext0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(jsonDeserializer0);
      
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_COERCION_OF_SCALARS;
      ObjectReader objectReader1 = objectMapper1.reader((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      boolean boolean0 = objectReader1.isEnabled(mapperFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertTrue(boolean0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      
      // Undeclared exception!
      try { 
        objectReader1._bindAndReadValues((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader((JsonNodeFactory) null);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0._new(objectReader1, jsonFactory0);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactoryBuilder0, true);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertNotNull(iOContext0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 3);
      assertNotNull(bufferedOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1634), objectReader2, bufferedOutputStream0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals((-1634), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        objectReader1.writeValue(uTF8JsonGenerator0, jsonFactory0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-11);
      // Undeclared exception!
      try { 
        objectReader1.readTree(byteArray0, 1, 516);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findTreeDeserializer(defaultDeserializationContext0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(jsonDeserializer0);
      
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_COERCION_OF_SCALARS;
      ObjectReader objectReader1 = objectMapper1.reader((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      boolean boolean0 = objectReader1.isEnabled(mapperFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertTrue(boolean0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      TypeReference<CollectionLikeType> typeReference0 = (TypeReference<CollectionLikeType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader2.forType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(objectMapper0);
      
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      assertFalse(decimalNode0.isFloat());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isNaN());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isLong());
      assertTrue(decimalNode0.isEmpty());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isArray());
      assertNotNull(decimalNode0);
      
      POJONode pOJONode0 = new POJONode(decimalNode0);
      assertFalse(decimalNode0.isFloat());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isNaN());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isLong());
      assertTrue(decimalNode0.isEmpty());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isArray());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isFloat());
      assertNull(pOJONode0.textValue());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isMissingNode());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isArray());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isBigDecimal());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.booleanValue());
      assertEquals(0, pOJONode0.size());
      assertNotNull(pOJONode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(pOJONode0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(decimalNode0.isFloat());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isNaN());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isLong());
      assertTrue(decimalNode0.isEmpty());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isArray());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isFloat());
      assertNull(pOJONode0.textValue());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isMissingNode());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isArray());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isBigDecimal());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.booleanValue());
      assertEquals(0, pOJONode0.size());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[8];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(decimalNode0.isFloat());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isNaN());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isLong());
      assertTrue(decimalNode0.isEmpty());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isArray());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isFloat());
      assertNull(pOJONode0.textValue());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isMissingNode());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isArray());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isBigDecimal());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.booleanValue());
      assertEquals(0, pOJONode0.size());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      try { 
        objectReader0.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xff
         //  at [Source: (byte[])\"\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Module> treeSet0 = new TreeSet<Module>(comparator0);
      assertNotNull(treeSet0);
      
      ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<? extends Module>) treeSet0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertNotNull(simpleType0);
      
      boolean boolean0 = simpleType0.equals(class0);
      assertFalse(boolean0);
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      
      FloatNode floatNode0 = new FloatNode(0.8F);
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(0.8F, floatNode0.floatValue(), 0.01F);
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isLong());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.isFloat());
      assertEquals(0, floatNode0.intValue());
      assertFalse(floatNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(0L, floatNode0.longValue());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(0.800000011920929, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isInt());
      assertNotNull(floatNode0);
      
      SimpleType simpleType1 = simpleType0.withTypeHandler(floatNode0);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType1, simpleType0);
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(0.8F, floatNode0.floatValue(), 0.01F);
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isLong());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.isFloat());
      assertEquals(0, floatNode0.intValue());
      assertFalse(floatNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(0L, floatNode0.longValue());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(0.800000011920929, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isInt());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isCollectionLikeType());
      assertTrue(simpleType1.hasHandlers());
      assertFalse(simpleType1.isFinal());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.hasValueHandler());
      assertTrue(simpleType1.isConcrete());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.useStaticType());
      assertTrue(simpleType1.equals((Object)simpleType0));
      assertNotNull(simpleType1);
      
      SimpleType simpleType2 = simpleType0.withStaticTyping();
      assertNotSame(simpleType0, simpleType2);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType2, simpleType0);
      assertNotSame(simpleType2, simpleType1);
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType2.hasHandlers());
      assertFalse(simpleType2.isArrayType());
      assertFalse(simpleType2.isFinal());
      assertFalse(simpleType2.hasContentType());
      assertFalse(simpleType2.isCollectionLikeType());
      assertFalse(simpleType2.isEnumType());
      assertFalse(simpleType2.isContainerType());
      assertFalse(simpleType2.isMapLikeType());
      assertFalse(simpleType2.isInterface());
      assertFalse(simpleType2.isPrimitive());
      assertFalse(simpleType2.hasValueHandler());
      assertTrue(simpleType2.useStaticType());
      assertEquals(0, simpleType2.containedTypeCount());
      assertFalse(simpleType2.isAbstract());
      assertTrue(simpleType2.isConcrete());
      assertFalse(simpleType2.isJavaLangObject());
      assertTrue(simpleType0.equals((Object)simpleType1));
      assertTrue(simpleType2.equals((Object)simpleType0));
      assertTrue(simpleType2.equals((Object)simpleType1));
      assertNotNull(simpleType2);
      
      RawValue rawValue0 = new RawValue(simpleType2);
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType2.hasHandlers());
      assertFalse(simpleType2.isArrayType());
      assertFalse(simpleType2.isFinal());
      assertFalse(simpleType2.hasContentType());
      assertFalse(simpleType2.isCollectionLikeType());
      assertFalse(simpleType2.isEnumType());
      assertFalse(simpleType2.isContainerType());
      assertFalse(simpleType2.isMapLikeType());
      assertFalse(simpleType2.isInterface());
      assertFalse(simpleType2.isPrimitive());
      assertFalse(simpleType2.hasValueHandler());
      assertTrue(simpleType2.useStaticType());
      assertEquals(0, simpleType2.containedTypeCount());
      assertFalse(simpleType2.isAbstract());
      assertTrue(simpleType2.isConcrete());
      assertFalse(simpleType2.isJavaLangObject());
      assertTrue(simpleType0.equals((Object)simpleType1));
      assertTrue(simpleType0.equals((Object)simpleType2));
      assertTrue(simpleType2.equals((Object)simpleType0));
      assertTrue(simpleType2.equals((Object)simpleType1));
      assertNotNull(rawValue0);
      
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode(rawValue0);
      assertNotSame(simpleType0, simpleType2);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType2, simpleType0);
      assertNotSame(simpleType2, simpleType1);
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType2.hasHandlers());
      assertFalse(simpleType2.isArrayType());
      assertFalse(simpleType2.isFinal());
      assertFalse(simpleType2.hasContentType());
      assertFalse(simpleType2.isCollectionLikeType());
      assertFalse(simpleType2.isEnumType());
      assertFalse(simpleType2.isContainerType());
      assertFalse(simpleType2.isMapLikeType());
      assertFalse(simpleType2.isInterface());
      assertFalse(simpleType2.isPrimitive());
      assertFalse(simpleType2.hasValueHandler());
      assertTrue(simpleType2.useStaticType());
      assertEquals(0, simpleType2.containedTypeCount());
      assertFalse(simpleType2.isAbstract());
      assertTrue(simpleType2.isConcrete());
      assertFalse(simpleType2.isJavaLangObject());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isBigInteger());
      assertNull(valueNode0.textValue());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, valueNode0.asToken());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.booleanValue());
      assertNull(valueNode0.numberType());
      assertEquals(JsonNodeType.POJO, valueNode0.getNodeType());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isLong());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isArray());
      assertTrue(simpleType0.equals((Object)simpleType1));
      assertTrue(simpleType0.equals((Object)simpleType2));
      assertTrue(simpleType2.equals((Object)simpleType0));
      assertTrue(simpleType2.equals((Object)simpleType1));
      assertNotNull(valueNode0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      boolean boolean1 = objectReader0.isEnabled(deserializationFeature0);
      assertSame(objectMapper0, objectMapper1);
      assertFalse(boolean1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(boolean1 == boolean0);
      
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains(objectReader0));
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      assertFalse(vector0.contains(objectReader0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) pipedInputStream0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders_Match0);
      assertFalse(vector0.contains(objectReader0));
      
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findTreeDeserializer(defaultDeserializationContext0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(jsonDeserializer0);
      
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_COERCION_OF_SCALARS;
      ObjectReader objectReader1 = objectMapper1.reader((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      boolean boolean0 = objectReader1.isEnabled(mapperFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertTrue(boolean0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      
      Class<BooleanNode> class1 = BooleanNode.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(javaType0);
      
      // Undeclared exception!
      try { 
        objectReader1.readValue((JsonParser) null, (ResolvedType) javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(jsonFactory1);
      
      ObjectReader objectReader2 = objectReader0.with(jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      MockFile mockFile0 = new MockFile(")");
      assertNotNull(mockFile0);
      
      try { 
        objectReader2.readValues((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findTreeDeserializer(defaultDeserializationContext0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(jsonDeserializer0);
      
      ObjectReader objectReader1 = objectMapper1.reader((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonFactory jsonFactory1 = objectReader0.getFactory();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(typeFactory0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      ObjectReader objectReader2 = objectReader1.with(locale0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      // Undeclared exception!
      try { 
        objectReader2.readTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-11);
      PipedReader pipedReader0 = new PipedReader(16);
      assertNotNull(pipedReader0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("JSON");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      ObjectReader objectReader2 = objectReader0.with(timeZone0);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory2 = jsonFactory0.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertNotNull(jsonFactory3);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      IntNode intNode0 = IntNode.valueOf(99);
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals((short)99, intNode0.shortValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertNull(intNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isObject());
      assertEquals(99.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.booleanValue());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isNaN());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isBigInteger());
      assertEquals(99.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isInt());
      assertEquals(99, intNode0.intValue());
      assertEquals(99L, intNode0.longValue());
      assertNotNull(intNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(intNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals((short)99, intNode0.shortValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertNull(intNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isObject());
      assertEquals(99.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.booleanValue());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isNaN());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isBigInteger());
      assertEquals(99.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isInt());
      assertEquals(99, intNode0.intValue());
      assertEquals(99L, intNode0.longValue());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper1.reader((JsonNodeFactory) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(typeFactory0);
      
      Class<List> class0 = List.class;
      Class<DeserializationConfig> class1 = DeserializationConfig.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isInterface());
      assertFalse(collectionType0.isConcrete());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isAbstract());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(collectionType0);
      
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isInterface());
      assertFalse(collectionType0.isConcrete());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType1.isConcrete());
      assertFalse(collectionType1.isEnumType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.isAbstract());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.useStaticType());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isInterface());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      
      // Undeclared exception!
      try { 
        objectReader1.withType((JavaType) collectionType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.core.JsonFactory cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(injectableValues_Std0);
      
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("Cannot find a deserializer for type ", (Object) "Cannot find a deserializer for type ");
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(injectableValues_Std1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)1;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)108, (byte)12, (byte)3, (byte)1, (byte)123, (byte)1}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withAttribute("Cannot find a deserializer for type ", objectMapper0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader2 = objectReader1.forType(class0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ObjectReader objectReader3 = objectReader0.with(jsonParser_Feature0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(objectReader3);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[5];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-121);
      try { 
        objectReader1.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type [B with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader2 = objectMapper0.reader((Base64Variant) null);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      assertEquals(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY, deserializationFeature0);
      assertFalse(deserializationFeature0.enabledByDefault());
      assertEquals(256, deserializationFeature0.getMask());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1591));
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertNotNull(placeholderForType0);
      
      ObjectReader objectReader3 = objectReader1.withValueToUpdate(placeholderForType0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
      
      Class<BinaryNode> class0 = BinaryNode.class;
      ObjectReader objectReader4 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertNotNull(objectReader4);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      BaseSettings baseSettings1 = baseSettings0.withTypeFactory(typeFactory0);
      assertSame(baseSettings0, baseSettings1);
      assertSame(baseSettings1, baseSettings0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertNotNull(baseSettings1);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      SerializationConfig serializationConfig0 = null;
      try {
        serializationConfig0 = new SerializationConfig((SerializationConfig) null, contextAttributes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(jsonFactoryBuilder0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser(byteArray0, (-740), 1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(uTF8StreamJsonParser0);
      
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-121);
      try { 
        objectReader0.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 147)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (byte[])\"\uFFFD\uFFFD\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      // Undeclared exception!
      try { 
        objectReader1._findTreeDeserializer(defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      byte[] byteArray0 = new byte[0];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte)23, (-46));
      assertEquals(0, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8257, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8257, jsonFactory1.getParserFeatures());
      assertEquals(8257, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory2);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8257, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8257, jsonFactory1.getParserFeatures());
      assertEquals(8257, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8257, jsonFactory3.getParserFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory3);
      
      ObjectReader objectReader2 = objectReader0.with(jsonFactory3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8257, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8257, jsonFactory1.getParserFeatures());
      assertEquals(8257, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8257, jsonFactory3.getParserFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      try { 
        objectReader1.readValues((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertNotNull(nonBlockingJsonParser0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(nonBlockingJsonParser0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findTreeDeserializer(defaultDeserializationContext_Impl1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertTrue(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(jsonDeserializer0);
      
      PipedReader pipedReader0 = new PipedReader(1353);
      assertNotNull(pipedReader0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      JsonDeserializer<Object> jsonDeserializer1 = objectReader0._findTreeDeserializer(defaultDeserializationContext_Impl1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertSame(jsonDeserializer1, jsonDeserializer0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer1.getNullAccessPattern());
      assertTrue(jsonDeserializer1.isCachable());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer1.getEmptyAccessPattern());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(jsonDeserializer1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ConcurrentHashMap<String, ResolvedRecursiveType> concurrentHashMap0 = new ConcurrentHashMap<String, ResolvedRecursiveType>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(concurrentHashMap0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes1);
      
      ContextAttributes contextAttributes2 = contextAttributes1.withoutSharedAttribute(concurrentHashMap0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes2);
      
      ContextAttributes contextAttributes3 = contextAttributes2.withSharedAttributes(concurrentHashMap0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertNotNull(contextAttributes3);
      
      DoubleNode doubleNode0 = new DoubleNode(0.0);
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isArray());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isLong());
      assertEquals((short)0, doubleNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertNull(doubleNode0.textValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isFloat());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isBigInteger());
      assertNotNull(doubleNode0);
      
      ContextAttributes contextAttributes4 = contextAttributes2.withoutSharedAttribute(doubleNode0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes4);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertSame(contextAttributes1, contextAttributes4);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes4);
      assertNotSame(contextAttributes4, contextAttributes3);
      assertNotSame(contextAttributes4, contextAttributes0);
      assertSame(contextAttributes4, contextAttributes1);
      assertSame(contextAttributes4, contextAttributes2);
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isArray());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isLong());
      assertEquals((short)0, doubleNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertNull(doubleNode0.textValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isFloat());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes3));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes3));
      assertFalse(contextAttributes4.equals((Object)contextAttributes3));
      assertFalse(contextAttributes4.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes4);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes4);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertSame(contextAttributes1, contextAttributes4);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes4);
      assertNotSame(contextAttributes3, contextAttributes4);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes4));
      assertFalse(contextAttributes1.equals((Object)contextAttributes3));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes3));
      assertFalse(contextAttributes3.equals((Object)contextAttributes4));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertNotNull(objectReader0);
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(objectReader0));
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes4);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertSame(contextAttributes1, contextAttributes4);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes4);
      assertNotSame(contextAttributes3, contextAttributes4);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes4));
      assertFalse(contextAttributes1.equals((Object)contextAttributes3));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes3));
      assertFalse(contextAttributes3.equals((Object)contextAttributes4));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      assertFalse(hashSet0.contains(objectReader0));
      
      MatchStrength matchStrength0 = MatchStrength.SOLID_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      assertFalse(hashSet0.contains(objectReader0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0, 64, (int) (byte)0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(5, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-64), (byte)1, (byte)0, (byte)1}, byteArray0);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders_Match0);
      assertFalse(hashSet0.contains(objectReader0));
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectReader objectReader2 = objectReader0.with(deserializationFeature0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes4);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertSame(contextAttributes1, contextAttributes4);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes4);
      assertNotSame(contextAttributes3, contextAttributes4);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes4));
      assertFalse(contextAttributes1.equals((Object)contextAttributes3));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes3));
      assertFalse(contextAttributes3.equals((Object)contextAttributes4));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_YAML_COMMENTS;
      assertEquals(JsonReadFeature.ALLOW_YAML_COMMENTS, jsonReadFeature0);
      assertEquals(JsonParser.Feature.ALLOW_YAML_COMMENTS, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(2, jsonReadFeature0.getMask());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      ObjectReader objectReader3 = objectReader0.withoutFeatures(formatFeatureArray0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes4);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertSame(contextAttributes1, contextAttributes4);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes4);
      assertNotSame(contextAttributes3, contextAttributes4);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertEquals(1, formatFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes4));
      assertFalse(contextAttributes1.equals((Object)contextAttributes3));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes3));
      assertFalse(contextAttributes3.equals((Object)contextAttributes4));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertNotNull(objectReader3);
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findTreeDeserializer(defaultDeserializationContext0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(jsonDeserializer0);
      
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_COERCION_OF_SCALARS;
      ObjectReader objectReader1 = objectMapper1.reader((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      boolean boolean0 = objectReader1.isEnabled(mapperFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertTrue(boolean0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.WRITE_NAN_AS_STRINGS;
      assertEquals(JsonWriteFeature.WRITE_NAN_AS_STRINGS, jsonWriteFeature0);
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertEquals(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS, jsonWriteFeature0.mappedFeature());
      assertEquals(2, jsonWriteFeature0.getMask());
      assertTrue(jsonWriteFeature0.enabledByDefault());
      
      formatFeatureArray0[0] = (FormatFeature) jsonWriteFeature0;
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      assertEquals(JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER, jsonReadFeature0);
      assertEquals(32, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER, jsonReadFeature0.mappedFeature());
      
      formatFeatureArray0[1] = (FormatFeature) jsonReadFeature0;
      ObjectReader objectReader2 = objectReader0.withoutFeatures(formatFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(2, formatFeatureArray0.length);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(iOContext1);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JSON", "com.fasterxml.jackson.core.util.DefaultIndenter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"com.fasterxml.jackson.core.util.DefaultIndenter\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)108;
      InputAccessor.Std inputAccessor_Std0 = new InputAccessor.Std(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)108}, byteArray0);
      assertNotNull(inputAccessor_Std0);
      
      inputAccessor_Std0.reset();
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)108}, byteArray0);
      
      MatchStrength matchStrength0 = jsonFactory0.hasFormat(inputAccessor_Std0);
      assertEquals(MatchStrength.NO_MATCH, matchStrength0);
      assertEquals(1, byteArray0.length);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertArrayEquals(new byte[] {(byte)108}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M,SHY6 _");
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(defaultSerializerProvider0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      boolean boolean1 = objectReader0.isEnabled(jsonParser_Feature0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertFalse(boolean1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertTrue(boolean1 == boolean0);
      
      JsonParser jsonParser0 = null;
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnexpectedToken(class0, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("JSON", (Object) jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(injectableValues_Std1);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNode jsonNode0 = objectReader0.createArrayNode();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isDouble());
      assertEquals(0, jsonNode0.size());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isMissingNode());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isInt());
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader1 = objectReader0.withType(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue(byteArray0, (int) 61, 854);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      byte[] byteArray0 = new byte[0];
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      ObjectReader objectReader2 = objectReader1.withFeatures(jsonParser_FeatureArray0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertEquals(0, jsonParser_FeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      ObjectReader objectReader3 = objectReader0.without(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertNotNull(objectReader3);
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectReader0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8705, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8705, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8705, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(8705, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNotNull(jsonFactory3);
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader((Base64Variant) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders((ObjectReader[]) null);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      PipedReader pipedReader0 = new PipedReader((byte)12);
      assertNotNull(pipedReader0);
      
      StringReader stringReader0 = new StringReader("(qbokz]`>x4[E&tWeV");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readTree((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('(' (code 40)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte)0, (-1037));
      assertEquals(0, objectReaderArray0.length);
      assertEquals(3, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)1, (byte)0}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(3, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)1, (byte)0}, byteArray0);
      assertNull(jsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAndClose((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      byte[] byteArray0 = new byte[0];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte) (-8), (-46));
      assertEquals(0, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      JsonNode jsonNode0 = objectReader1.readTree(byteArray0, (int) (byte)3, (-46));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isFloat());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      
      // Undeclared exception!
      try { 
        objectReader0.with((JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      byte[] byteArray0 = new byte[0];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte) (-8), (-46));
      assertEquals(0, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(jsonParser0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(jsonFactory2);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonParser_Feature0);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(8257, jsonFactory4.getParserFeatures());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(8257, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8257, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory4);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory5 = jsonFactory4.disable(jsonGenerator_Feature1);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory5);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory4);
      assertNotSame(jsonFactory5, jsonFactory0);
      assertNotSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory5);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory5);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory2);
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(8257, jsonFactory4.getParserFeatures());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertEquals(31, jsonFactory5.getGeneratorFeatures());
      assertEquals(8257, jsonFactory5.getParserFeatures());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertEquals(0, jsonFactory5.getFormatParserFeatures());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals(0, jsonFactory5.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(8257, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8257, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertFalse(jsonFactory5.equals((Object)jsonFactory0));
      assertFalse(jsonFactory5.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory5);
      
      ObjectReader objectReader2 = objectReader1.with(jsonFactory5);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory5);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory5);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory5);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory4);
      assertNotSame(jsonFactory5, jsonFactory0);
      assertNotSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(8257, jsonFactory4.getParserFeatures());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertEquals(31, jsonFactory5.getGeneratorFeatures());
      assertEquals(8257, jsonFactory5.getParserFeatures());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertEquals(0, jsonFactory5.getFormatParserFeatures());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals(0, jsonFactory5.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(8257, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8257, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory5));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertFalse(jsonFactory5.equals((Object)jsonFactory0));
      assertFalse(jsonFactory5.equals((Object)jsonFactory1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      PipedReader pipedReader0 = new PipedReader(64);
      assertNotNull(pipedReader0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader((Base64Variant) null);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      File file0 = MockFile.createTempFile("No value type configured for ObjectReader", "Conflicting setter definitions for property \"%s\": %s vs %s");
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("No value type configured for ObjectReader0Conflicting setter definitions for property \"%s\": %s vs %s", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/No value type configured for ObjectReader0Conflicting setter definitions for property \"%s\": %s vs %s", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      InjectableValues injectableValues0 = objectReader0.getInjectableValues();
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNull(injectableValues0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      // Undeclared exception!
      try { 
        jsonFactory1.createParser((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-11);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((byte) (-11));
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertNotNull(placeholderForType0);
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertNull(javaType0);
      
      ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) null);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectWriter0.hasPrefetchedSerializer());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectWriter0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      JsonFactory jsonFactory1 = objectReader1.getFactory();
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(object0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isObject());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonNode0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ConcurrentHashMap<String, ResolvedRecursiveType> concurrentHashMap0 = new ConcurrentHashMap<String, ResolvedRecursiveType>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(concurrentHashMap0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes1);
      
      ContextAttributes contextAttributes2 = contextAttributes1.withoutSharedAttribute(concurrentHashMap0);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertSame(contextAttributes2, contextAttributes1);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes2);
      
      ContextAttributes contextAttributes3 = contextAttributes2.withSharedAttributes(concurrentHashMap0);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertNotNull(contextAttributes3);
      
      DoubleNode doubleNode0 = new DoubleNode(0.0);
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isFloat());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isArray());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(0, doubleNode0.size());
      assertEquals((short)0, doubleNode0.shortValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isInt());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isBigInteger());
      assertNotNull(doubleNode0);
      
      ContextAttributes contextAttributes4 = contextAttributes2.withoutSharedAttribute(doubleNode0);
      assertNotSame(contextAttributes0, contextAttributes4);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes2);
      assertSame(contextAttributes1, contextAttributes4);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes4);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes1);
      assertSame(contextAttributes4, contextAttributes2);
      assertNotSame(contextAttributes4, contextAttributes0);
      assertSame(contextAttributes4, contextAttributes1);
      assertNotSame(contextAttributes4, contextAttributes3);
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isFloat());
      assertEquals(0, doubleNode0.intValue());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isArray());
      assertEquals(0L, doubleNode0.longValue());
      assertFalse(doubleNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(0, doubleNode0.size());
      assertEquals((short)0, doubleNode0.shortValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isInt());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes1.equals((Object)contextAttributes3));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes3));
      assertFalse(contextAttributes4.equals((Object)contextAttributes0));
      assertFalse(contextAttributes4.equals((Object)contextAttributes3));
      assertNotNull(contextAttributes4);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes4);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes2);
      assertSame(contextAttributes1, contextAttributes4);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes4);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes4);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes4));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes1.equals((Object)contextAttributes3));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes3));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes4));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertNotNull(objectReader0);
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(objectReader0));
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      assertFalse(hashSet0.contains(objectReader0));
      
      MatchStrength matchStrength0 = MatchStrength.SOLID_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      assertFalse(hashSet0.contains(objectReader0));
      
      byte byte0 = (byte)1;
      byte byte1 = (byte)1;
      byte byte2 = (byte)0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-64);
      URI uRI0 = MockURI.aFileURI;
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertEquals("file", uRI1.getScheme());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getRawQuery());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertNotNull(uRI1);
      
      MockFile mockFile0 = new MockFile(uRI1);
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawAuthority());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertEquals("file", uRI1.getScheme());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getRawQuery());
      assertEquals((-1), uRI1.getPort());
      assertFalse(uRI1.isOpaque());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals("/tmp", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertNotNull(uRL0);
      
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(injectableValues_Std0);
      
      Class<LongNode> class0 = LongNode.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) class0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(injectableValues_Std1);
      
      InjectableValues.Std injectableValues_Std2 = injectableValues_Std1.addValue("", (Object) objectMapper0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(injectableValues_Std2);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std2);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(objectReader0);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      deserializationFeatureArray0[1] = deserializationFeature1;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      deserializationFeatureArray0[2] = deserializationFeature2;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(3, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("8RH0,L=b;?6?C!nTT", "8RH0,L=b;?6?C!nTT", 598, "", uRLStreamHandler0);
      assertEquals("", uRL0.getPath());
      assertEquals(598, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toString());
      assertEquals("8rh0,l=b;?6?c!ntt", uRL0.getProtocol());
      assertEquals("8RH0,L=b;?6?C!nTT", uRL0.getHost());
      assertEquals("8RH0,L=b;?6?C!nTT:598", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(injectableValues_Std0);
      
      Class<LongNode> class0 = LongNode.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) class0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(injectableValues_Std1);
      
      InjectableValues.Std injectableValues_Std2 = injectableValues_Std1.addValue("", (Object) objectMapper0);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(injectableValues_Std2);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std2);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(objectReader0);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      deserializationFeatureArray0[1] = deserializationFeature1;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      deserializationFeatureArray0[2] = deserializationFeature2;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(3, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      MockFile mockFile0 = new MockFile("W66zfJ#", "");
      assertNotNull(mockFile0);
      
      try { 
        objectReader1.readValues((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TreeSet<ObjectReader> treeSet0 = new TreeSet<ObjectReader>();
      assertNotNull(treeSet0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(treeSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte)0, (-2807));
      assertEquals(4, byteArray0.length);
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      ObjectReader objectReader0 = dataFormatReaders_Match0.getReader();
      assertEquals(4, byteArray0.length);
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      ObjectReader objectReader1 = null;
      try {
        objectReader1 = new ObjectReader((ObjectReader) null, jsonFactory1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)12;
      PipedReader pipedReader0 = new PipedReader(64);
      assertNotNull(pipedReader0);
      
      try { 
        objectReader0.readTree((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[5];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      byte[] byteArray0 = new byte[0];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders_Match0);
      
      try { 
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      byte[] byteArray0 = new byte[0];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte) (-8), (-46));
      assertEquals(0, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      ObjectReader objectReader2 = objectMapper0.reader(deserializationFeature0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      // Undeclared exception!
      try { 
        objectReader2._detectBindAndReadValues(dataFormatReaders_Match0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      byte[] byteArray0 = new byte[0];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte) (-8), (-46));
      assertEquals(0, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(jsonParser0);
      
      JsonParser jsonParser1 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(jsonParser1);
      
      JsonParser jsonParser2 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(jsonParser2);
      
      Class<ShortNode> class0 = ShortNode.class;
      Iterator<ShortNode> iterator0 = objectReader1.readValues((JsonParser) null, class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(iterator0);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      ObjectReader objectReader2 = objectReader1.withFeatures(jsonParser_FeatureArray0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertEquals(0, jsonParser_FeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      try { 
        objectReader0.readValue("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      File file0 = MockFile.createTempFile(" (/#<^$8B>5&BJ-", "No value type configured for ObjectReader");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("#<^$8B>5&BJ-0No value type configured for ObjectReader", file0.getName());
      assertEquals("/tmp/ (", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/ (/#<^$8B>5&BJ-0No value type configured for ObjectReader", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile((File) null, "zc4x8((/!u.OJYdd[");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValue(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      boolean boolean0 = objectReader0.isEnabled(deserializationFeature0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertTrue(boolean0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      MockFile mockFile0 = new MockFile("Not implemented for ObjectReader", "Not implemented for ObjectReader");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0._inputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-8);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte) (-8), (-46));
      assertEquals(0, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)63, (byte) (-86), (byte) (-8), (byte)0}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)63, (byte) (-86), (byte) (-8), (byte)0}, byteArray0);
      assertNull(jsonParser0);
      
      JsonParser jsonParser1 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)63, (byte) (-86), (byte) (-8), (byte)0}, byteArray0);
      assertNull(jsonParser1);
      
      Class<ShortNode> class0 = ShortNode.class;
      Iterator<ShortNode> iterator0 = objectReader0.readValues((JsonParser) null, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(iterator0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      boolean boolean1 = objectReader0.isEnabled(jsonParser_Feature0);
      assertTrue(boolean1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(boolean1 == boolean0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isAbstract());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(collectionType0);
      
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isAbstract());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isInterface());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.useStaticType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isConcrete());
      assertTrue(collectionType1.isAbstract());
      assertFalse(collectionType1.isJavaLangObject());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) null, (JavaType) collectionType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      // Undeclared exception!
      try { 
        dataFormatReaders0.findFormat(byteArray0, 256, 12000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("com.fasterxml.jackson.core.format.InputAccessor$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.ESCAPE_NON_ASCII;
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.disable(jsonWriteFeature0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder1);
      
      JsonFactoryBuilder jsonFactoryBuilder2 = jsonFactoryBuilder1.highestNonEscapedChar(1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      assertEquals(127, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder2.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder2);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder2);
      assertEquals(127, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(127, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(127, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(63, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertNotNull(jsonFactory2);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory3 = jsonFactory0.configure(jsonParser_Feature1, false);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals(127, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals(1, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(63, jsonFactory3.getGeneratorFeatures());
      assertEquals(1, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertNotNull(jsonFactory3);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory3);
      assertEquals(127, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals(1, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(63, jsonFactory3.getGeneratorFeatures());
      assertEquals(1, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(127, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals(1, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(63, jsonFactory3.getGeneratorFeatures());
      assertEquals(1, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory1, defaultSerializerProvider0, defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(127, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals(1, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(1, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader1 = objectMapper2.reader((JsonNodeFactory) null);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(127, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals(1, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(1, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1._new(objectReader0, jsonFactory1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(127, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals(1, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(1, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(63, jsonFactory3.getGeneratorFeatures());
      assertEquals(1, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      MockFile mockFile0 = new MockFile("Z<.P6!");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValues((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        objectReader0.readValue("SCALAR");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'SCALAR': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"SCALAR\"; line: 1, column: 13]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findRootDeserializer((DeserializationContext) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, jsonDeserializer0.getNullAccessPattern());
      assertNotNull(jsonDeserializer0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader((-3614));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-8);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte) (-8), (-46));
      assertEquals(0, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)63, (byte) (-86), (byte) (-8), (byte)0}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)63, (byte) (-86), (byte) (-8), (byte)0}, byteArray0);
      assertNull(jsonParser0);
      
      JsonParser jsonParser1 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)63, (byte) (-86), (byte) (-8), (byte)0}, byteArray0);
      assertNull(jsonParser1);
      
      objectReader0._initForMultiRead((DeserializationContext) null, (JsonParser) null);
      assertEquals(0, objectMapper0.mixInCount());
      
      PipedReader pipedReader0 = new PipedReader((byte)12);
      assertNotNull(pipedReader0);
      
      try { 
        objectReader0.readValue((Reader) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      
      int int0 = 393;
      // Undeclared exception!
      try { 
        objectReader0.withFeatures((JsonParser.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        objectReader0.readValue(byteArray0, (int) 61, (-2466));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8195, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8195, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8195, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8195, jsonFactory2.getParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      HashMap<String, ResolvedRecursiveType> hashMap0 = new HashMap<String, ResolvedRecursiveType>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8195, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8195, jsonFactory2.getParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = '6';
      charArray0[2] = '1';
      charArray0[3] = 'x';
      charArray0[4] = 'R';
      charArray0[5] = 'N';
      charArray0[6] = 's';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(7, charArray0.length);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8195, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8195, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertArrayEquals(new char[] {'}', '6', '1', 'x', 'R', 'N', 's'}, charArray0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAndCloseAsTree(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for root starting at [Source: (char[])\"}61xRNs\"; line: 1, column: 0])
         //  at [Source: (char[])\"}61xRNs\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0._findRootDeserializer((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-8);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte) (-8), (-46));
      assertEquals(0, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)63, (byte) (-86), (byte) (-8), (byte)0}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)63, (byte) (-86), (byte) (-8), (byte)0}, byteArray0);
      assertNull(jsonParser0);
      
      JsonParser jsonParser1 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, objectReaderArray0.length);
      assertEquals(8, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)63, (byte) (-86), (byte) (-8), (byte)0}, byteArray0);
      assertNull(jsonParser1);
      
      Class<ShortNode> class0 = ShortNode.class;
      Iterator<ShortNode> iterator0 = objectReader0.readValues((JsonParser) null, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(iterator0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile("JSON", "");
      assertNotNull(mockFile0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.forType((TypeReference<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser((byte[]) null, (-4508), (-4508));
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNotNull(uTF8StreamJsonParser0);
      
      BinaryNode binaryNode0 = objectMapper0.readTree((JsonParser) uTF8StreamJsonParser0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertTrue(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(binaryNode0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((Reader) pipedReader0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNotNull(readerBasedJsonParser0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = 'A';
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0, (-4508), (-4508));
      assertNotSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(2, charArray0.length);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(8193, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertArrayEquals(new char[] {'q', 'A'}, charArray0);
      assertFalse(readerBasedJsonParser1.equals((Object)readerBasedJsonParser0));
      assertNotNull(readerBasedJsonParser1);
      
      TypeReference<MissingNode> typeReference0 = (TypeReference<MissingNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.forType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      deserializationFeatureArray0[8] = deserializationFeature1;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertEquals(9, deserializationFeatureArray0.length);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory0);
      assertEquals(9, deserializationFeatureArray0.length);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature1, false);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(objectReader0);
      
      int int0 = 4177;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(objectMapper1);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 16384, 1);
      assertEquals(0, byteArray0.length);
      assertEquals((-16384), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertEquals((-16384), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(pushbackInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndCloseAsTree(pushbackInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Object object0 = new Object();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(object0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      objectReader0._findRootDeserializer(defaultDeserializationContext_Impl0);
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.markSupported();
      jsonFactory0.createParser((Reader) pipedReader0);
      String string0 = "gB[qqDqrhL@4g";
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      defaultDeserializationContext_Impl1.getConfig();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      DeserializationConfig deserializationConfig0 = null;
      try {
        deserializationConfig0 = new DeserializationConfig((DeserializationConfig) null, contextAttributes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
      JsonParser jsonParser0 = jsonFactory0.createParser((byte[]) null, (-4508), (-4508));
      objectMapper0.readTree(jsonParser0);
      PipedReader pipedReader0 = new PipedReader();
      jsonFactory0.createParser((Reader) pipedReader0);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      objectReader0.isEnabled(mapperFeature0);
      // Undeclared exception!
      try { 
        objectReader0.treeAsTokens((TreeNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      objectMapper1.getDeserializationContext();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<SimpleType> class0 = SimpleType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, javaTypeArray0[0]);
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      MapType mapType1 = mapType0.withContentValueHandler(booleanNode0);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      mapType0.withKeyTypeHandler(mapType1);
      char[] charArray0 = new char[0];
      ObjectReader objectReader1 = objectReader0.at((JsonPointer) null);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      TypeReference<BinaryNode> typeReference0 = (TypeReference<BinaryNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(resolvedRecursiveType0).when(typeReference0).getType();
      ObjectReader objectReader2 = objectReader1.withType(typeReference0);
      assertNotSame(objectReader0, objectReader2);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      // Undeclared exception!
      try { 
        objectReader0.without(deserializationFeature0, (DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      objectMapper0.readerFor(class0);
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      MockFile.createTempFile("&KgPP}", "&KgPP}");
      MockFile mockFile0 = new MockFile((File) null, "com.fasterxml.jackson.databind.type.TypeParser");
      // Undeclared exception!
      try { 
        objectReader0.readValue((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<SimpleType> class0 = SimpleType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, javaTypeArray0[0]);
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      MapType mapType1 = mapType0.withContentValueHandler(booleanNode0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapType1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      mapType0.withKeyTypeHandler(mapType1);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, pipedReader0, objectReader0, charsToNameCanonicalizer1, charArray0, 512, 2, true);
      objectReader0._initForMultiRead(deserializationContext0, readerBasedJsonParser0);
      ObjectReader objectReader1 = objectReader0.at((JsonPointer) null);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      TypeReference<BinaryNode> typeReference0 = (TypeReference<BinaryNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader1.withType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      objectReader0.version();
      // Undeclared exception!
      try { 
        objectReader0.withType((TypeReference<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)63;
      byteArray0[6] = (byte)2;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte)2, (-46));
      dataFormatReaders_Match0.createParserWithMatch();
      dataFormatReaders_Match0.createParserWithMatch();
      Class<ShortNode> class0 = ShortNode.class;
      objectReader0.readValues((JsonParser) null, class0);
      Class<ArrayNode> class1 = ArrayNode.class;
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<SimpleType> class0 = SimpleType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, javaTypeArray0[0]);
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      MapType mapType1 = mapType0.withContentValueHandler(booleanNode0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapType1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      mapType0.withKeyTypeHandler(mapType1);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, pipedReader0, objectReader0, charsToNameCanonicalizer1, charArray0, 512, 2, true);
      objectReader0._initForMultiRead(deserializationContext0, readerBasedJsonParser0);
      ObjectReader objectReader1 = objectReader0.at((JsonPointer) null);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      ObjectReader objectReader2 = objectReader1.withoutFeatures(jsonParser_FeatureArray0);
      assertNotSame(objectReader1, objectReader2);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      objectMapper0.readerForUpdating(objectReader0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      ObjectReader objectReader2 = objectMapper0.reader((Base64Variant) null);
      // Undeclared exception!
      try { 
        objectReader2.with((JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(objectMapper1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      objectMapper0.reader();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)61;
      // Undeclared exception!
      try { 
        objectReader0.readValue(byteArray0, 1869, (int) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1869
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)2;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader0 = objectMapper0.reader();
      // Undeclared exception!
      try { 
        objectReader0.readValue(byteArray0, (int) 48, (int) 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(objectMapper1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)3;
      try { 
        objectReader1.readTree(byteArray0, (int) (byte)3, (int) (byte)3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0006\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      // Undeclared exception!
      try { 
        objectReader0._findTreeDeserializer((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MapperFeature mapperFeature0 = MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS;
      objectReader0.isEnabled(mapperFeature0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[8];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
      PipedReader pipedReader0 = new PipedReader();
      jsonFactory0.createParser((Reader) pipedReader0);
      try { 
        objectReader0.readTree("gB[qqDqrhL@4g");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'gB': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"gB[qqDqrhL@4g\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'A';
      charArray0[2] = 'i';
      charArray0[3] = 'M';
      charArray0[4] = 's';
      charArray0[5] = 'f';
      jsonFactory1.createParser(charArray0);
      jsonFactory1.createParser("JSON");
      try { 
        objectReader0.readTree("BO>Gl^KB{{iG1*7W");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'BO': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"BO>Gl^KB{{iG1*7W\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'A';
      charArray0[2] = 'i';
      charArray0[3] = 'M';
      charArray0[4] = 's';
      charArray0[5] = 'f';
      jsonFactory1.createParser(charArray0);
      JsonParser jsonParser0 = jsonFactory1.createParser("JSON");
      try { 
        objectReader0.readValues(jsonParser0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (String)\"JSON\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-86);
      dataFormatReaders0.findFormat(byteArray0, (int) (byte) (-8), (-46));
      MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      objectReader0.isEnabled(mapperFeature0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("X_ubZ1Pq+(|=?QH", (short)0);
      ArrayNode arrayNode0 = objectNode1.withArray("");
      NumericNode numericNode0 = arrayNode0.numberNode((float) (byte)12);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(numericNode0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      placeholderForType0.actualType();
      try { 
        objectReader0.readValues(jsonParser0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
      JsonParser jsonParser0 = jsonFactory0.createParser((byte[]) null, (-4508), (-4508));
      objectMapper0.readTree(jsonParser0);
      PipedReader pipedReader0 = new PipedReader();
      jsonFactory0.createParser((Reader) pipedReader0);
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      try { 
        objectReader0.readValue(jsonParser0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      // Undeclared exception!
      try { 
        objectReader0.treeAsTokens((TreeNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature1, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
      ObjectReader objectReader1 = objectMapper0.reader((JsonNodeFactory) null);
      ObjectReader objectReader2 = objectReader0._new(objectReader1, jsonFactory0);
      assertNotSame(objectReader1, objectReader2);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.removeAll();
      ObjectNode objectNode2 = objectNode1.putNull("Cr,8phvp(Q%Or");
      ArrayNode arrayNode0 = objectNode2.putArray((String) null);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(arrayNode0);
      hashMap0.put("Cr,8phvp(Q%Or", objectNode1);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)2;
      // Undeclared exception!
      try { 
        objectReader0.readTree(byteArray0, 0, (int) (byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonPointer jsonPointer0 = tokenFilterContext0.pathAsPointer(false);
      objectReader0.at(jsonPointer0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        objectReader0.readValue((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-15);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte)2, (-46));
      dataFormatReaders_Match0.createParserWithMatch();
      Class<ShortNode> class0 = ShortNode.class;
      Iterator<ShortNode> iterator0 = objectReader0.readValues((JsonParser) null, class0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<TextNode> class0 = TextNode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      objectReader0.version();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-128);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "Cannot use FormatSchema of type ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Cannot use FormatSchema of type \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader(objectMapper0, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      jsonFactory0.rebuild();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader(objectMapper1, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<DeserializationConfig> class0 = DeserializationConfig.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      File file0 = MockFile.createTempFile("&KgPP}", "");
      MockFile mockFile0 = new MockFile(file0, "&KgPP}");
      try { 
        objectReader0.readValue((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(objectMapper1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)3;
      // Undeclared exception!
      try { 
        objectReader1.readTree(byteArray0, (int) (byte)3, (int) (byte)3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        objectReader0.at("JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"JSON\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      Class<DecimalNode> class0 = DecimalNode.class;
      objectReader0.withView(class0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      URL uRL0 = MockURL.getHttpExample();
      try { 
        jsonFactory1.createParser(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      objectMapper1.writer(serializationFeature0, serializationFeatureArray0);
      ObjectReader objectReader0 = objectMapper1.reader((ContextAttributes) null);
      objectReader0.getConfig();
      File file0 = MockFile.createTempFile("Root name '%s' does not match expected ('%s') for type %s", "[virtual ", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose(byteArray0, (byte)1, (-2557));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, (ConfigOverrides) null);
      objectMapper0._newReader(deserializationConfig0);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode((JsonNodeFactory) null, hashMap0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "T|QHF@?tK>Sa";
      stringArray0[1] = "p7t";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "@CPatLDi:4>eD\u0002";
      ObjectNode objectNode1 = objectNode0.retain(stringArray0);
      // Undeclared exception!
      try { 
        objectNode1.putObject("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.ContainerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2);
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(concurrentHashMap0);
      Class<CollectionType> class0 = CollectionType.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) "7{Meo?!9 w&)'kWd");
      objectMapper1.reader((InjectableValues) injectableValues_Std1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byte byte0 = (byte) (-44);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((byte) (-44));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
