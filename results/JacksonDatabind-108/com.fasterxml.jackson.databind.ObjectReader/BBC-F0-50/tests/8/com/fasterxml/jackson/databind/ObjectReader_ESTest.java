/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 00:07:58 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.json.JsonWriteFeature;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.RawValue;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharConversionException;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.time.chrono.ChronoLocalDate;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectReader_ESTest extends ObjectReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader1 = objectReader0.withAttribute((Object) null, class0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader((ContextAttributes) null);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader2 = objectReader0._new(objectReader1, jsonFactory0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      LongNode longNode0 = LongNode.valueOf(1188L);
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloatingPointNumber());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.canConvertToLong());
      assertTrue(longNode0.isEmpty());
      assertFalse(longNode0.isFloat());
      assertNull(longNode0.textValue());
      assertTrue(longNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isBigDecimal());
      assertEquals((short)1188, longNode0.shortValue());
      assertEquals(1188, longNode0.intValue());
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isDouble());
      assertEquals(1188.0F, longNode0.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isNaN());
      assertEquals(1188L, longNode0.longValue());
      assertEquals(1188.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.booleanValue());
      assertEquals(0, longNode0.size());
      assertNotNull(longNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(longNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloatingPointNumber());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.canConvertToLong());
      assertTrue(longNode0.isEmpty());
      assertFalse(longNode0.isFloat());
      assertNull(longNode0.textValue());
      assertTrue(longNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isBigDecimal());
      assertEquals((short)1188, longNode0.shortValue());
      assertEquals(1188, longNode0.intValue());
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isDouble());
      assertEquals(1188.0F, longNode0.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isNaN());
      assertEquals(1188L, longNode0.longValue());
      assertEquals(1188.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.booleanValue());
      assertEquals(0, longNode0.size());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNotNull(jsonParser0);
      
      LongNode longNode1 = (LongNode)objectReader0._bindAsTree(jsonParser0);
      assertTrue(longNode1.equals((Object)longNode0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloatingPointNumber());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.canConvertToLong());
      assertTrue(longNode0.isEmpty());
      assertFalse(longNode0.isFloat());
      assertNull(longNode0.textValue());
      assertTrue(longNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isBigDecimal());
      assertEquals((short)1188, longNode0.shortValue());
      assertEquals(1188, longNode0.intValue());
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isDouble());
      assertEquals(1188.0F, longNode0.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isNaN());
      assertEquals(1188L, longNode0.longValue());
      assertEquals(1188.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.booleanValue());
      assertEquals(0, longNode0.size());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonParser0.currentToken());
      assertEquals(7, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(7, jsonParser0.currentTokenId());
      assertNull(longNode1.textValue());
      assertFalse(longNode1.isNaN());
      assertEquals(0, longNode1.size());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode1.asToken());
      assertTrue(longNode1.isEmpty());
      assertEquals(1188.0F, longNode1.floatValue(), 0.01F);
      assertEquals(1188L, longNode1.longValue());
      assertEquals(1188.0, longNode1.doubleValue(), 0.01);
      assertFalse(longNode1.isDouble());
      assertFalse(longNode1.booleanValue());
      assertEquals(JsonParser.NumberType.LONG, longNode1.numberType());
      assertFalse(longNode1.isMissingNode());
      assertFalse(longNode1.isInt());
      assertFalse(longNode1.isFloat());
      assertFalse(longNode1.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, longNode1.getNodeType());
      assertTrue(longNode1.canConvertToInt());
      assertFalse(longNode1.isFloatingPointNumber());
      assertEquals((short)1188, longNode1.shortValue());
      assertFalse(longNode1.isArray());
      assertFalse(longNode1.isObject());
      assertTrue(longNode1.canConvertToLong());
      assertEquals(1188, longNode1.intValue());
      assertFalse(longNode1.isBigDecimal());
      assertTrue(longNode1.isIntegralNumber());
      assertTrue(longNode1.isLong());
      assertFalse(longNode1.isShort());
      assertNotSame(longNode0, longNode1);
      assertNotSame(longNode1, longNode0);
      assertNotNull(longNode1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findTreeDeserializer(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertNotNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNotNull(deserializationConfig0);
      
      ObjectReader objectReader0 = new ObjectReader(objectMapper0, deserializationConfig0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, deserializationConfig0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      MockFile mockFile0 = new MockFile("yGJei0", "JSON");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("JSON", "Factory implementation for format (%s) MUST override `rebuild()` method", (File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("JSON", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/experiment/yGJei0/JSON", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/yGJei0", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/experiment/yGJei0/JSON/JSON0Factory implementation for format (%s) MUST override `rebuild()` method", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("JSON0Factory implementation for format (%s) MUST override `rebuild()` method", file0.getName());
      assertEquals("/experiment/yGJei0/JSON", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("JSON", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/experiment/yGJei0/JSON", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/yGJei0", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/experiment/yGJei0/JSON/JSON0Factory implementation for format (%s) MUST override `rebuild()` method", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("JSON0Factory implementation for format (%s) MUST override `rebuild()` method", file0.getName());
      assertEquals("/experiment/yGJei0/JSON", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(uTF8StreamJsonParser0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("JSON", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/experiment/yGJei0/JSON", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/yGJei0", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/experiment/yGJei0/JSON/JSON0Factory implementation for format (%s) MUST override `rebuild()` method", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("JSON0Factory implementation for format (%s) MUST override `rebuild()` method", file0.getName());
      assertEquals("/experiment/yGJei0/JSON", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      objectReader0._initForMultiRead(defaultDeserializationContext_Impl0, uTF8StreamJsonParser0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("JSON", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/experiment/yGJei0/JSON", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/yGJei0", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/experiment/yGJei0/JSON/JSON0Factory implementation for format (%s) MUST override `rebuild()` method", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("JSON0Factory implementation for format (%s) MUST override `rebuild()` method", file0.getName());
      assertEquals("/experiment/yGJei0/JSON", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose(byteArray0, (byte)86, (byte)74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeatureArray0[0];
      ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
      assertEquals(2, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(jsonParser_FeatureArray0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(1, jsonParser_FeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature0.mappedFeature());
      assertEquals(16, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature0);
      
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      formatFeatureArray0[1] = (FormatFeature) jsonReadFeature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(formatFeatureArray0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(2, formatFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(1, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertEquals(1, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature0);
      
      ObjectReader objectReader1 = objectReader0.without((FormatFeature) jsonReadFeature0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<Integer> class1 = Integer.class;
      TypeReference<ObjectInputStream> typeReference0 = (TypeReference<ObjectInputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(typeReference0).getType();
      ObjectReader objectReader1 = objectReader0.withType(typeReference0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      jsonParser_FeatureArray0[1] = jsonParser_Feature0;
      jsonParser_FeatureArray0[2] = jsonParser_FeatureArray0[0];
      jsonParser_FeatureArray0[3] = jsonParser_Feature0;
      jsonParser_FeatureArray0[4] = jsonParser_FeatureArray0[2];
      ObjectReader objectReader1 = objectReader0.withFeatures(jsonParser_FeatureArray0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(5, jsonParser_FeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.QUOTE_FIELD_NAMES;
      JsonWriteFeature[] jsonWriteFeatureArray0 = new JsonWriteFeature[1];
      jsonWriteFeatureArray0[0] = jsonWriteFeature0;
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withFeatures((FormatFeature[]) jsonWriteFeatureArray0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(1, jsonWriteFeatureArray0.length);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader1 = objectReader0.with(jsonNodeFactory0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<BinaryNode> class0 = BinaryNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeatureArray0[1];
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      deserializationFeatureArray0[8] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(9, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNotNull(deserializationConfig0);
      
      ObjectReader objectReader1 = objectReader0.with(deserializationConfig0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertNotNull(arrayNode0);
      
      Class<ArrayNode> class0 = ArrayNode.class;
      ArrayNode arrayNode1 = objectReader0.treeToValue((TreeNode) arrayNode0, class0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.textValue());
      assertEquals("", arrayNode1.asText());
      assertTrue(arrayNode1.isEmpty());
      assertEquals(0, arrayNode1.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isBigDecimal());
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertNotNull(arrayNode1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      MappingIterator<CollectionLikeType> mappingIterator0 = objectReader0.readValues(byteArray0, 1, (-3146));
      assertEquals(2, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      File file0 = MockFile.createTempFile("INF", "");
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("INF0", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/INF0", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      MappingIterator<TextNode> mappingIterator0 = objectReader0.readValues(file0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("INF0", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/INF0", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(object0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleDeserializers0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectReader1, charsToNameCanonicalizer0, charArray0, 58, 0, false);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      MappingIterator<BooleanNode> mappingIterator0 = objectReader1.readValues((JsonParser) readerBasedJsonParser0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader1 = objectReader0.withType(class0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertNotNull(arrayNode0);
      
      ValueNode valueNode0 = arrayNode0.numberNode((Byte) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isBigInteger());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.booleanValue());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isLong());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isDouble());
      assertEquals("null", valueNode0.asText());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isFloat());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertNotNull(valueNode0);
      
      TextNode textNode0 = objectReader1.readValue((JsonNode) valueNode0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isBigInteger());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.booleanValue());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isLong());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isDouble());
      assertEquals("null", valueNode0.asText());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isFloat());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNull(textNode0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ValueNode valueNode0 = jsonNodeFactory0.numberNode((Short) null);
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isInt());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertEquals(0, valueNode0.size());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isLong());
      assertFalse(valueNode0.isFloat());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertNull(valueNode0.textValue());
      assertEquals("null", valueNode0.asText());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigInteger());
      assertFalse(valueNode0.isMissingNode());
      assertNotNull(valueNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(valueNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isInt());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertEquals(0, valueNode0.size());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isLong());
      assertFalse(valueNode0.isFloat());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertNull(valueNode0.textValue());
      assertEquals("null", valueNode0.asText());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigInteger());
      assertFalse(valueNode0.isMissingNode());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertNotNull(jsonParser0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isInt());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertEquals(0, valueNode0.size());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isLong());
      assertFalse(valueNode0.isFloat());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertNull(valueNode0.textValue());
      assertEquals("null", valueNode0.asText());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigInteger());
      assertFalse(valueNode0.isMissingNode());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertEquals(0, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertNotNull(jsonParserDelegate0);
      
      Class<Integer> class1 = Integer.class;
      Integer integer0 = objectReader0.readValue((JsonParser) jsonParserDelegate0, class1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isInt());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isObject());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertEquals(0, valueNode0.size());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isLong());
      assertFalse(valueNode0.isFloat());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertNull(valueNode0.textValue());
      assertEquals("null", valueNode0.asText());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigInteger());
      assertFalse(valueNode0.isMissingNode());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(JsonToken.VALUE_NULL, jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertEquals(0, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      IntNode intNode0 = (IntNode)objectReader0.readTree(byteArray0, 0, 1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isArray());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.booleanValue());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isDouble());
      assertEquals((short)9, intNode0.shortValue());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isFloat());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(9.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isBigDecimal());
      assertEquals(9.0F, intNode0.floatValue(), 0.01F);
      assertEquals(9L, intNode0.longValue());
      assertEquals(9, intNode0.intValue());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isMissingNode());
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(intNode0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isMissingNode());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertEquals(0, jsonNode0.size());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isArray());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree("");
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isMissingNode());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isObject());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloat());
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals(0, jsonNode0.size());
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNotNull(jsonParser0);
      
      ArrayNode arrayNode1 = (ArrayNode)objectReader0.readTree(jsonParser0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(4, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(arrayNode1.isLong());
      assertEquals("", arrayNode1.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isShort());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isMissingNode());
      assertEquals(0, arrayNode1.size());
      assertTrue(arrayNode1.isArray());
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertNotNull(arrayNode1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2361, 2361);
      assertEquals(10, byteArray0.length);
      assertEquals((-2351), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      assertEquals(10, byteArray0.length);
      assertEquals((-2351), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(pushbackInputStream0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser((InputStream) pushbackInputStream0);
      assertEquals(10, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals((-2351), byteArrayInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      MissingNode missingNode0 = objectReader0.readTree((JsonParser) uTF8StreamJsonParser0);
      assertEquals(10, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals((-2351), byteArrayInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertTrue(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(missingNode0.isBigDecimal());
      assertTrue(missingNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isShort());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertEquals(0, missingNode0.size());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(missingNode0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_SETTERS;
      boolean boolean0 = objectReader0.isEnabled(mapperFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      boolean boolean0 = objectReader0.isEnabled(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<IntNode> class0 = IntNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = objectMapper0._configOverrides;
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNotNull(deserializationConfig0);
      
      ObjectReader objectReader1 = objectReader0._with(deserializationConfig0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._prefetchRootDeserializer((JavaType) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isMissingNode());
      assertNotNull(objectNode0);
      
      ArrayNode arrayNode0 = objectNode0.putArray("MD;R");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNotNull(jsonParser0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonDeserializer<CollectionType> jsonDeserializer0 = (JsonDeserializer<CollectionType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      MappingIterator<AbstractDeserializer> mappingIterator0 = objectReader0._newIterator(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (JsonDeserializer<?>) jsonDeserializer0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNotNull(deserializationConfig0);
      
      ObjectReader objectReader1 = objectReader0._new(objectReader0, deserializationConfig0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      File file0 = MockFile.createTempFile("vQuHfKF>]'c", "vQuHfKF>]'c");
      assertEquals("/tmp/vQuHfKF>]'c0vQuHfKF>]'c", file0.toString());
      assertEquals("vQuHfKF>]'c0vQuHfKF>]'c", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      InputStream inputStream0 = objectReader0._inputStream(file0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("/tmp/vQuHfKF>]'c0vQuHfKF>]'c", file0.toString());
      assertEquals("vQuHfKF>]'c0vQuHfKF>]'c", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0, inputStream0.available());
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertNotNull(objectNode0);
      
      ArrayNode arrayNode0 = objectNode0.putArray("com.fasterxml.jackson.databind.deser.std.DateDeserializers");
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNotNull(jsonParser0);
      
      JsonToken jsonToken0 = objectReader0._initForReading(deserializationContext0, jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(3, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(JsonToken.START_ARRAY, jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(JsonToken.START_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(3, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonToken0.isBoolean());
      assertEquals("[", jsonToken0.asString());
      assertFalse(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isNumeric());
      assertTrue(jsonToken0.isStructStart());
      assertFalse(jsonToken0.isScalarValue());
      assertEquals(3, jsonToken0.id());
      assertEquals(JsonToken.START_ARRAY, jsonToken0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      ShortNode shortNode0 = (ShortNode)jsonNodeFactory0.numberNode(short0);
      assertFalse(shortNode0.isNaN());
      assertEquals(0, shortNode0.size());
      assertEquals((short)0, shortNode0.shortValue());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isMissingNode());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.canConvertToInt());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isArray());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isInt());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isObject());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.canConvertToLong());
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertNotNull(shortNode0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectMapper0.treeAsTokens(shortNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(shortNode0.isNaN());
      assertEquals(0, shortNode0.size());
      assertEquals((short)0, shortNode0.shortValue());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isMissingNode());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.canConvertToInt());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isArray());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isInt());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isObject());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.canConvertToLong());
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertNull(treeTraversingParser0.currentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertNotNull(treeTraversingParser0);
      
      JsonToken jsonToken0 = objectReader0._initForReading((DeserializationContext) null, treeTraversingParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(shortNode0.isNaN());
      assertEquals(0, shortNode0.size());
      assertEquals((short)0, shortNode0.shortValue());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isMissingNode());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.canConvertToInt());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isArray());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isInt());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isObject());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.canConvertToLong());
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertTrue(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(7, treeTraversingParser0.getCurrentTokenId());
      assertEquals(7, treeTraversingParser0.currentTokenId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, treeTraversingParser0.getCurrentToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, treeTraversingParser0.currentToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(jsonToken0.isBoolean());
      assertTrue(jsonToken0.isNumeric());
      assertTrue(jsonToken0.isScalarValue());
      assertFalse(jsonToken0.isStructStart());
      assertNull(jsonToken0.asString());
      assertFalse(jsonToken0.isStructEnd());
      assertEquals(7, jsonToken0.id());
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findRootDeserializer(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertTrue(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, jsonDeserializer0.getNullAccessPattern());
      assertNotNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser jsonParser0 = objectReader0._considerFilter((JsonParser) null, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonParser0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      byte[] byteArray0 = new byte[3];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(byteArray0, 1230, 0);
      assertEquals(3, byteArray0.length);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = (UTF8StreamJsonParser)objectReader0._considerFilter(uTF8StreamJsonParser0, true);
      assertEquals(3, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertNull(uTF8StreamJsonParser1.currentToken());
      assertFalse(uTF8StreamJsonParser1.canParseAsync());
      assertFalse(uTF8StreamJsonParser1.isNaN());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser1.currentTokenId());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertEquals(8193, uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser1.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertEquals(0, uTF8StreamJsonParser1.getFormatFeatures());
      assertSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      assertSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      LongNode longNode0 = LongNode.valueOf(2389L);
      assertEquals((short)2389, longNode0.shortValue());
      assertFalse(longNode0.isDouble());
      assertEquals(0, longNode0.size());
      assertEquals(2389.0F, longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.isObject());
      assertEquals(2389L, longNode0.longValue());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isShort());
      assertEquals(2389, longNode0.intValue());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isArray());
      assertTrue(longNode0.isIntegralNumber());
      assertNull(longNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isFloat());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(2389.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isInt());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertTrue(longNode0.isEmpty());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isBigInteger());
      assertFalse(longNode0.isNaN());
      assertTrue(longNode0.canConvertToInt());
      assertNotNull(longNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(longNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short)2389, longNode0.shortValue());
      assertFalse(longNode0.isDouble());
      assertEquals(0, longNode0.size());
      assertEquals(2389.0F, longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.isObject());
      assertEquals(2389L, longNode0.longValue());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isShort());
      assertEquals(2389, longNode0.intValue());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isArray());
      assertTrue(longNode0.isIntegralNumber());
      assertNull(longNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isFloat());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(2389.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isInt());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertTrue(longNode0.isEmpty());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isBigInteger());
      assertFalse(longNode0.isNaN());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertNotNull(jsonParser0);
      
      JsonParser jsonParser1 = objectReader0._considerFilter(jsonParser0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short)2389, longNode0.shortValue());
      assertFalse(longNode0.isDouble());
      assertEquals(0, longNode0.size());
      assertEquals(2389.0F, longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.isObject());
      assertEquals(2389L, longNode0.longValue());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isShort());
      assertEquals(2389, longNode0.intValue());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isArray());
      assertTrue(longNode0.isIntegralNumber());
      assertNull(longNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isFloat());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(2389.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isInt());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertTrue(longNode0.isEmpty());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isBigInteger());
      assertFalse(longNode0.isNaN());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser1.getCurrentToken());
      assertEquals(0, jsonParser1.getCurrentTokenId());
      assertFalse(jsonParser1.isClosed());
      assertNull(jsonParser1.currentToken());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertEquals(0, jsonParser1.getTextOffset());
      assertFalse(jsonParser1.hasTextCharacters());
      assertEquals(0, jsonParser1.currentTokenId());
      assertFalse(jsonParser1.canReadObjectId());
      assertFalse(jsonParser1.canReadTypeId());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertNull(jsonParser1.getLastClearedToken());
      assertEquals(0, jsonParser1.getFeatureMask());
      assertFalse(jsonParser1.hasCurrentToken());
      assertFalse(jsonParser1.canParseAsync());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertSame(jsonParser0, jsonParser1);
      assertSame(jsonParser1, jsonParser0);
      assertNotNull(jsonParser1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      ShortNode shortNode0 = (ShortNode)jsonNodeFactory0.numberNode(short0);
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isLong());
      assertEquals((short)0, shortNode0.shortValue());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isFloat());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isNaN());
      assertTrue(shortNode0.isEmpty());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isInt());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isObject());
      assertTrue(shortNode0.isIntegralNumber());
      assertNull(shortNode0.textValue());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertTrue(shortNode0.isShort());
      assertNotNull(shortNode0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectMapper0.treeAsTokens(shortNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isLong());
      assertEquals((short)0, shortNode0.shortValue());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isFloat());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isNaN());
      assertTrue(shortNode0.isEmpty());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isInt());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isObject());
      assertTrue(shortNode0.isIntegralNumber());
      assertNull(shortNode0.textValue());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertTrue(shortNode0.isShort());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertNotNull(treeTraversingParser0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(treeTraversingParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isLong());
      assertEquals((short)0, shortNode0.shortValue());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isFloat());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isNaN());
      assertTrue(shortNode0.isEmpty());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isInt());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isObject());
      assertTrue(shortNode0.isIntegralNumber());
      assertNull(shortNode0.textValue());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertTrue(shortNode0.isShort());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertEquals(0, jsonParserDelegate0.getFeatureMask());
      assertNotNull(jsonParserDelegate0);
      
      Class<Integer> class1 = Integer.class;
      Integer integer0 = objectReader0.readValue((JsonParser) jsonParserDelegate0, class1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isLong());
      assertEquals((short)0, shortNode0.shortValue());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isFloat());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isNaN());
      assertTrue(shortNode0.isEmpty());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isInt());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isObject());
      assertTrue(shortNode0.isIntegralNumber());
      assertNull(shortNode0.textValue());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertTrue(shortNode0.isShort());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertEquals(0, jsonParserDelegate0.getFeatureMask());
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      MissingNode missingNode0 = (MissingNode)objectReader0._bindAsTree(treeTraversingParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isLong());
      assertEquals((short)0, shortNode0.shortValue());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isFloat());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isNaN());
      assertTrue(shortNode0.isEmpty());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isInt());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isObject());
      assertTrue(shortNode0.isIntegralNumber());
      assertNull(shortNode0.textValue());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertTrue(shortNode0.isShort());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(missingNode0.isLong());
      assertEquals(0, missingNode0.size());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.booleanValue());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertNotNull(missingNode0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertNotNull(arrayNode0);
      
      ObjectNode objectNode0 = arrayNode0.addObject();
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNotNull(objectNode0);
      
      Short short0 = new Short((short)8);
      assertEquals((short)8, (short)short0);
      assertNotNull(short0);
      
      ObjectNode objectNode1 = objectNode0.put("Mx|w\u0006{k'j=5[Yht/:W", short0);
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      assertFalse(jsonNode0.equals((Object)objectNode1));
      assertFalse(jsonNode0.equals((Object)objectNode0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(2, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(2, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isArray());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertEquals(1, jsonNode0.size());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isObject());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigDecimal());
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, jsonNode0);
      assertNotSame(objectNode1, jsonNode0);
      assertSame(objectNode1, objectNode0);
      assertNotSame(jsonNode0, objectNode1);
      assertNotSame(jsonNode0, objectNode0);
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((-457.43702));
      assertEquals((-457), numericNode0.intValue());
      assertTrue(numericNode0.isEmpty());
      assertEquals(JsonParser.NumberType.DOUBLE, numericNode0.numberType());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.booleanValue());
      assertEquals((-457.43702), numericNode0.doubleValue(), 0.01);
      assertEquals((-457.437F), numericNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, numericNode0.asToken());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isMissingNode());
      assertFalse(numericNode0.isNaN());
      assertTrue(numericNode0.canConvertToLong());
      assertFalse(numericNode0.isBigDecimal());
      assertFalse(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertFalse(numericNode0.isShort());
      assertFalse(numericNode0.isArray());
      assertTrue(numericNode0.isFloatingPointNumber());
      assertFalse(numericNode0.isObject());
      assertEquals((short) (-457), numericNode0.shortValue());
      assertEquals((-457L), numericNode0.longValue());
      assertTrue(numericNode0.isDouble());
      assertNull(numericNode0.textValue());
      assertNotNull(numericNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(numericNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-457), numericNode0.intValue());
      assertTrue(numericNode0.isEmpty());
      assertEquals(JsonParser.NumberType.DOUBLE, numericNode0.numberType());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.booleanValue());
      assertEquals((-457.43702), numericNode0.doubleValue(), 0.01);
      assertEquals((-457.437F), numericNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, numericNode0.asToken());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isMissingNode());
      assertFalse(numericNode0.isNaN());
      assertTrue(numericNode0.canConvertToLong());
      assertFalse(numericNode0.isBigDecimal());
      assertFalse(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertFalse(numericNode0.isShort());
      assertFalse(numericNode0.isArray());
      assertTrue(numericNode0.isFloatingPointNumber());
      assertFalse(numericNode0.isObject());
      assertEquals((short) (-457), numericNode0.shortValue());
      assertEquals((-457L), numericNode0.longValue());
      assertTrue(numericNode0.isDouble());
      assertNull(numericNode0.textValue());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNotNull(jsonParser0);
      
      DoubleNode doubleNode0 = (DoubleNode)objectReader0._bindAsTree(jsonParser0);
      assertTrue(doubleNode0.equals((Object)numericNode0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-457), numericNode0.intValue());
      assertTrue(numericNode0.isEmpty());
      assertEquals(JsonParser.NumberType.DOUBLE, numericNode0.numberType());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.booleanValue());
      assertEquals((-457.43702), numericNode0.doubleValue(), 0.01);
      assertEquals((-457.437F), numericNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, numericNode0.asToken());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isMissingNode());
      assertFalse(numericNode0.isNaN());
      assertTrue(numericNode0.canConvertToLong());
      assertFalse(numericNode0.isBigDecimal());
      assertFalse(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertFalse(numericNode0.isShort());
      assertFalse(numericNode0.isArray());
      assertTrue(numericNode0.isFloatingPointNumber());
      assertFalse(numericNode0.isObject());
      assertEquals((short) (-457), numericNode0.shortValue());
      assertEquals((-457L), numericNode0.longValue());
      assertTrue(numericNode0.isDouble());
      assertNull(numericNode0.textValue());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(8, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(8, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isLong());
      assertEquals(0, doubleNode0.size());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isIntegralNumber());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isArray());
      assertNull(doubleNode0.textValue());
      assertEquals((-457.437F), doubleNode0.floatValue(), 0.01F);
      assertEquals((-457L), doubleNode0.longValue());
      assertEquals((-457), doubleNode0.intValue());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals((-457.43702), doubleNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.booleanValue());
      assertEquals((short) (-457), doubleNode0.shortValue());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isObject());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isBigDecimal());
      assertNotSame(numericNode0, doubleNode0);
      assertNotSame(doubleNode0, numericNode0);
      assertNotNull(doubleNode0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FloatNode floatNode0 = new FloatNode((-3016.04F));
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isObject());
      assertEquals((-3016L), floatNode0.longValue());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals((-3016.0400390625), floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertEquals((-3016.04F), floatNode0.floatValue(), 0.01F);
      assertEquals((-3016), floatNode0.intValue());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((short) (-3016), floatNode0.shortValue());
      assertFalse(floatNode0.isMissingNode());
      assertNotNull(floatNode0);
      
      BigInteger bigInteger0 = floatNode0.bigIntegerValue();
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isObject());
      assertEquals((-3016L), floatNode0.longValue());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals((-3016.0400390625), floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertEquals((-3016.04F), floatNode0.floatValue(), 0.01F);
      assertEquals((-3016), floatNode0.intValue());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((short) (-3016), floatNode0.shortValue());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((byte)56, bigInteger0.byteValue());
      assertEquals((short) (-3016), bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isObject());
      assertEquals((-3016L), floatNode0.longValue());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals((-3016.0400390625), floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertEquals((-3016.04F), floatNode0.floatValue(), 0.01F);
      assertEquals((-3016), floatNode0.intValue());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((short) (-3016), floatNode0.shortValue());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((byte)56, bigInteger0.byteValue());
      assertEquals((short) (-3016), bigInteger0.shortValue());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.booleanValue());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isShort());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertNotNull(bigIntegerNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(bigIntegerNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isObject());
      assertEquals((-3016L), floatNode0.longValue());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals((-3016.0400390625), floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertEquals((-3016.04F), floatNode0.floatValue(), 0.01F);
      assertEquals((-3016), floatNode0.intValue());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((short) (-3016), floatNode0.shortValue());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((byte)56, bigInteger0.byteValue());
      assertEquals((short) (-3016), bigInteger0.shortValue());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.booleanValue());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isShort());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNotNull(jsonParser0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isObject());
      assertEquals((-3016L), floatNode0.longValue());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals((-3016.0400390625), floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertEquals((-3016.04F), floatNode0.floatValue(), 0.01F);
      assertEquals((-3016), floatNode0.intValue());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((short) (-3016), floatNode0.shortValue());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((byte)56, bigInteger0.byteValue());
      assertEquals((short) (-3016), bigInteger0.shortValue());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.booleanValue());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isShort());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertEquals(0, jsonParserDelegate0.getFeatureMask());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertNotNull(jsonParserDelegate0);
      
      BigIntegerNode bigIntegerNode1 = (BigIntegerNode)objectReader0._bindAsTree(jsonParserDelegate0);
      assertTrue(bigIntegerNode1.equals((Object)bigIntegerNode0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isObject());
      assertEquals((-3016L), floatNode0.longValue());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals((-3016.0400390625), floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertEquals((-3016.04F), floatNode0.floatValue(), 0.01F);
      assertEquals((-3016), floatNode0.intValue());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((short) (-3016), floatNode0.shortValue());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((byte)56, bigInteger0.byteValue());
      assertEquals((short) (-3016), bigInteger0.shortValue());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.booleanValue());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isShort());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(7, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(7, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertEquals(0, jsonParserDelegate0.getFeatureMask());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertTrue(bigIntegerNode1.isIntegralNumber());
      assertFalse(bigIntegerNode1.isShort());
      assertFalse(bigIntegerNode1.isInt());
      assertFalse(bigIntegerNode1.isDouble());
      assertFalse(bigIntegerNode1.booleanValue());
      assertFalse(bigIntegerNode1.isArray());
      assertFalse(bigIntegerNode1.isObject());
      assertFalse(bigIntegerNode1.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode1.numberType());
      assertFalse(bigIntegerNode1.isFloat());
      assertEquals(0, bigIntegerNode1.size());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode1.getNodeType());
      assertFalse(bigIntegerNode1.isLong());
      assertTrue(bigIntegerNode1.isBigInteger());
      assertTrue(bigIntegerNode1.isEmpty());
      assertFalse(bigIntegerNode1.isBigDecimal());
      assertFalse(bigIntegerNode1.isNaN());
      assertNull(bigIntegerNode1.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode1.asToken());
      assertFalse(bigIntegerNode1.isMissingNode());
      assertNotSame(bigIntegerNode0, bigIntegerNode1);
      assertNotSame(bigIntegerNode1, bigIntegerNode0);
      assertNotNull(bigIntegerNode1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isShort());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isNaN());
      assertTrue(decimalNode0.isEmpty());
      assertNull(decimalNode0.textValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isBigInteger());
      assertFalse(decimalNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertEquals(0, decimalNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isObject());
      assertNotNull(decimalNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(decimalNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isShort());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isNaN());
      assertTrue(decimalNode0.isEmpty());
      assertNull(decimalNode0.textValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isBigInteger());
      assertFalse(decimalNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertEquals(0, decimalNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isObject());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNotNull(jsonParser0);
      
      DecimalNode decimalNode1 = (DecimalNode)objectReader0._bindAsTree(jsonParser0);
      assertTrue(decimalNode1.equals((Object)decimalNode0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isShort());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isNaN());
      assertTrue(decimalNode0.isEmpty());
      assertNull(decimalNode0.textValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isBigInteger());
      assertFalse(decimalNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertEquals(0, decimalNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(8, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(8, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertTrue(decimalNode1.isEmpty());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode1.numberType());
      assertFalse(decimalNode1.isBigInteger());
      assertNull(decimalNode1.textValue());
      assertFalse(decimalNode1.isObject());
      assertFalse(decimalNode1.booleanValue());
      assertFalse(decimalNode1.isShort());
      assertFalse(decimalNode1.isInt());
      assertTrue(decimalNode1.isBigDecimal());
      assertFalse(decimalNode1.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode1.asToken());
      assertFalse(decimalNode1.isMissingNode());
      assertFalse(decimalNode1.isDouble());
      assertFalse(decimalNode1.isNaN());
      assertEquals(0, decimalNode1.size());
      assertTrue(decimalNode1.isFloatingPointNumber());
      assertFalse(decimalNode1.isFloat());
      assertEquals(JsonNodeType.NUMBER, decimalNode1.getNodeType());
      assertFalse(decimalNode1.isIntegralNumber());
      assertFalse(decimalNode1.isArray());
      assertNotSame(decimalNode0, decimalNode1);
      assertNotSame(decimalNode1, decimalNode0);
      assertNotNull(decimalNode1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadTypeId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(4, jsonParser0.currentTokenId());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isMissingNode());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isDouble());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isLong());
      assertNotSame(arrayNode0, jsonNode0);
      assertNotSame(jsonNode0, arrayNode0);
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isIntegralNumber());
      assertTrue(booleanNode0.asBoolean());
      assertTrue(booleanNode0.isEmpty());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isArray());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isLong());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isMissingNode());
      assertNull(booleanNode0.textValue());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertNotNull(booleanNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isIntegralNumber());
      assertTrue(booleanNode0.asBoolean());
      assertTrue(booleanNode0.isEmpty());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isArray());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isLong());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isMissingNode());
      assertNull(booleanNode0.textValue());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isIntegralNumber());
      assertTrue(booleanNode0.asBoolean());
      assertTrue(booleanNode0.isEmpty());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isArray());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isLong());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isMissingNode());
      assertNull(booleanNode0.textValue());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(9, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(JsonToken.VALUE_TRUE, jsonParser0.getCurrentToken());
      assertEquals(JsonToken.VALUE_TRUE, jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertEquals(9, jsonParser0.getCurrentTokenId());
      assertNull(jsonNode0.textValue());
      assertEquals("true", jsonNode0.asText());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.BOOLEAN, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isMissingNode());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonToken.VALUE_TRUE, jsonNode0.asToken());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.asBoolean());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertSame(booleanNode0, jsonNode0);
      assertSame(jsonNode0, booleanNode0);
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, objectReader0, charsToNameCanonicalizer0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNotNull(readerBasedJsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAndCloseAsTree(readerBasedJsonParser0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertTrue(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Short short0 = new Short((short)1189);
      assertEquals((short)1189, (short)short0);
      assertNotNull(short0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ShortNode shortNode0 = (ShortNode)jsonNodeFactory0.numberNode(short0);
      assertFalse(shortNode0.isNaN());
      assertEquals((short)1189, shortNode0.shortValue());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(1189L, shortNode0.longValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertTrue(shortNode0.canConvertToInt());
      assertEquals(0, shortNode0.size());
      assertEquals(1189, shortNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isObject());
      assertEquals(1189.0F, shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isFloat());
      assertEquals(1189.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isLong());
      assertTrue(shortNode0.canConvertToLong());
      assertNotNull(shortNode0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectMapper0.treeAsTokens(shortNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(shortNode0.isNaN());
      assertEquals((short)1189, shortNode0.shortValue());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(1189L, shortNode0.longValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertTrue(shortNode0.canConvertToInt());
      assertEquals(0, shortNode0.size());
      assertEquals(1189, shortNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isObject());
      assertEquals(1189.0F, shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isFloat());
      assertEquals(1189.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isLong());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertNull(treeTraversingParser0.currentToken());
      assertNotNull(treeTraversingParser0);
      
      IntNode intNode0 = (IntNode)objectReader0._bindAndCloseAsTree(treeTraversingParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(shortNode0.isNaN());
      assertEquals((short)1189, shortNode0.shortValue());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(1189L, shortNode0.longValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertTrue(shortNode0.canConvertToInt());
      assertEquals(0, shortNode0.size());
      assertEquals(1189, shortNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isObject());
      assertEquals(1189.0F, shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isFloat());
      assertEquals(1189.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isLong());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertTrue(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertNull(treeTraversingParser0.currentToken());
      assertEquals(1189.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.isEmpty());
      assertEquals(1189, intNode0.intValue());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isObject());
      assertEquals(0, intNode0.size());
      assertEquals(1189.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isArray());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigDecimal());
      assertEquals(1189L, intNode0.longValue());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isNaN());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((short)1189, intNode0.shortValue());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isBigInteger());
      assertNotNull(intNode0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertNull(arrayNode0.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isInt());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertNull(arrayNode0.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isInt());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAndCloseAsTree(jsonParser0);
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertNull(arrayNode0.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isInt());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertTrue(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isMissingNode());
      assertEquals(0, jsonNode0.size());
      assertTrue(jsonNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNotSame(arrayNode0, jsonNode0);
      assertNotSame(jsonNode0, arrayNode0);
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(1);
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertNotNull(arrayNode0);
      
      NumericNode numericNode0 = arrayNode0.numberNode((long) 1);
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertTrue(numericNode0.canConvertToLong());
      assertFalse(numericNode0.isShort());
      assertEquals(1, numericNode0.intValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertTrue(numericNode0.isEmpty());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.isDouble());
      assertFalse(numericNode0.booleanValue());
      assertFalse(numericNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.LONG, numericNode0.numberType());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.isNaN());
      assertEquals(1.0F, numericNode0.floatValue(), 0.01F);
      assertFalse(numericNode0.isArray());
      assertEquals(1L, numericNode0.longValue());
      assertTrue(numericNode0.isLong());
      assertFalse(numericNode0.isFloat());
      assertNull(numericNode0.textValue());
      assertEquals((short)1, numericNode0.shortValue());
      assertFalse(numericNode0.isObject());
      assertFalse(numericNode0.isBigDecimal());
      assertTrue(numericNode0.isIntegralNumber());
      assertEquals(1.0, numericNode0.doubleValue(), 0.01);
      assertNotNull(numericNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(numericNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertTrue(numericNode0.canConvertToLong());
      assertFalse(numericNode0.isShort());
      assertEquals(1, numericNode0.intValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertTrue(numericNode0.isEmpty());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.isDouble());
      assertFalse(numericNode0.booleanValue());
      assertFalse(numericNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.LONG, numericNode0.numberType());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.isNaN());
      assertEquals(1.0F, numericNode0.floatValue(), 0.01F);
      assertFalse(numericNode0.isArray());
      assertEquals(1L, numericNode0.longValue());
      assertTrue(numericNode0.isLong());
      assertFalse(numericNode0.isFloat());
      assertNull(numericNode0.textValue());
      assertEquals((short)1, numericNode0.shortValue());
      assertFalse(numericNode0.isObject());
      assertFalse(numericNode0.isBigDecimal());
      assertTrue(numericNode0.isIntegralNumber());
      assertEquals(1.0, numericNode0.doubleValue(), 0.01);
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNotNull(jsonParser0);
      
      TokenFilter tokenFilter1 = (TokenFilter)objectReader0._bindAndClose(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertTrue(numericNode0.canConvertToLong());
      assertFalse(numericNode0.isShort());
      assertEquals(1, numericNode0.intValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertTrue(numericNode0.isEmpty());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.isDouble());
      assertFalse(numericNode0.booleanValue());
      assertFalse(numericNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.LONG, numericNode0.numberType());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.isNaN());
      assertEquals(1.0F, numericNode0.floatValue(), 0.01F);
      assertFalse(numericNode0.isArray());
      assertEquals(1L, numericNode0.longValue());
      assertTrue(numericNode0.isLong());
      assertFalse(numericNode0.isFloat());
      assertNull(numericNode0.textValue());
      assertEquals((short)1, numericNode0.shortValue());
      assertFalse(numericNode0.isObject());
      assertFalse(numericNode0.isBigDecimal());
      assertTrue(numericNode0.isIntegralNumber());
      assertEquals(1.0, numericNode0.doubleValue(), 0.01);
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertTrue(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeNull());
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(tokenFilter1, tokenFilter0);
      assertNotNull(tokenFilter1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.withType((Type) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<BinaryNode> class1 = BinaryNode.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertNotNull(javaType0);
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[5] = javaType0;
      javaTypeArray0[6] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[5], javaTypeArray0[6]);
      assertEquals(8, javaTypeArray0.length);
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(0, mapType0.containedTypeCount());
      assertNotNull(mapType0);
      
      MapType mapType1 = mapType0.withKeyValueHandler(javaTypeArray0[3]);
      assertTrue(mapType1.equals((Object)mapType0));
      assertEquals(8, javaTypeArray0.length);
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isJavaLangObject());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isMapLikeType());
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertNotNull(mapType1);
      
      // Undeclared exception!
      try { 
        objectReader0.withType((Type) mapType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.SimpleType cannot be cast to com.fasterxml.jackson.databind.KeyDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<NullNode> class1 = NullNode.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class0, class1);
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertNotNull(mapLikeType0);
      
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) mapLikeType0);
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertNotNull(arrayType0);
      
      ArrayType arrayType1 = arrayType0.withValueHandler(objectReader0);
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isConcrete());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.hasHandlers());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isArrayType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType1.isMapLikeType());
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertNotNull(arrayType1);
      
      MapLikeType mapLikeType1 = mapLikeType0.withKeyType(arrayType1);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertFalse(mapLikeType1.equals((Object)mapLikeType0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isConcrete());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.hasHandlers());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isArrayType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(mapLikeType1.isArrayType());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.isFinal());
      assertFalse(mapLikeType1.isInterface());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.isEnumType());
      assertTrue(mapLikeType1.hasHandlers());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isAbstract());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertFalse(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.hasValueHandler());
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotNull(mapLikeType1);
      
      // Undeclared exception!
      try { 
        objectReader0.withType((JavaType) mapLikeType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.ObjectReader cannot be cast to com.fasterxml.jackson.databind.KeyDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeReference<CollectionType> typeReference0 = (TypeReference<CollectionType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.withType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ConcurrentHashMap<NullNode, ChronoLocalDate> concurrentHashMap0 = new ConcurrentHashMap<NullNode, ChronoLocalDate>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      // Undeclared exception!
      try { 
        objectReader0.withAttributes(concurrentHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfigBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.with((TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.BaseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.with((FormatFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        objectReader0.treeToValue((TreeNode) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      LongNode longNode0 = LongNode.valueOf((-243L));
      assertTrue(longNode0.canConvertToInt());
      assertEquals((-243.0F), longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.isLong());
      assertEquals((-243), longNode0.intValue());
      assertFalse(longNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.booleanValue());
      assertTrue(longNode0.isIntegralNumber());
      assertEquals((short) (-243), longNode0.shortValue());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isShort());
      assertNull(longNode0.textValue());
      assertFalse(longNode0.isArray());
      assertTrue(longNode0.canConvertToLong());
      assertTrue(longNode0.isEmpty());
      assertEquals((-243L), longNode0.longValue());
      assertFalse(longNode0.isObject());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals((-243.0), longNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isNaN());
      assertNotNull(longNode0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      try { 
        objectReader0.treeToValue((TreeNode) longNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.type.ResolvedRecursiveType` (no Creators, like default construct, exist): no long/Long-argument constructor/factory method to deserialize from Number value (-243)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.treeAsTokens((TreeNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((byte[]) null, (int) 40, 1090);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        objectReader0.readValues(byteArray0, (int) 40, (int) 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[8];
      try { 
        objectReader0.readValues(byteArray0, (int) 1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<LongNode> class0 = LongNode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-20);
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Unsupported UCS-4 endianness (3412) detected
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(5, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0.readValues("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0.readValues("-");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: (String)\"-\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader(2088);
      assertNotNull(pipedReader0);
      
      try { 
        objectReader0.readValues((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0.readValues((Reader) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      StringReader stringReader0 = new StringReader("/`TZq^8_CUrETr6l");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readValues((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('/' (code 47)): maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)
         //  at [Source: (StringReader); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 17);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<TextNode> class0 = TextNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      try { 
        objectReader0.readValues((InputStream) mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0.readValues((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[3] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte)0, (byte)78, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      try { 
        objectReader0.readValues((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u4E00\u0000': was expecting ('true', 'false' or 'null')
         //  at [Source: (ByteArrayInputStream); line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("sh}me005G}:hl");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      assertTrue(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("sh}me005G}:hl");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValues((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("sh}me005G}:hl");
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, ";w`z1dU~2MoP");
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("sh}me005G}:hl");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValues((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (';' (code 59)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeatureArray0[1];
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeatureArray0[3];
      deserializationFeatureArray0[7] = deserializationFeature0;
      deserializationFeatureArray0[8] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(9, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 2);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-125), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-125), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 131)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (DataInputStream); line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertNotNull(placeholderForType0);
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertNotNull(collectionLikeType0);
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) collectionLikeType0);
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      CollectionLikeType collectionLikeType1 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      assertFalse(collectionLikeType1.equals((Object)collectionLikeType0));
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertFalse(collectionLikeType1.isFinal());
      assertFalse(collectionLikeType1.isInterface());
      assertFalse(collectionLikeType1.isArrayType());
      assertFalse(collectionLikeType1.isEnumType());
      assertFalse(collectionLikeType1.isPrimitive());
      assertFalse(collectionLikeType1.hasValueHandler());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertEquals(0, collectionLikeType1.containedTypeCount());
      assertTrue(collectionLikeType1.hasContentType());
      assertFalse(collectionLikeType1.useStaticType());
      assertTrue(collectionLikeType1.isContainerType());
      assertFalse(collectionLikeType1.isAbstract());
      assertFalse(collectionLikeType1.hasHandlers());
      assertTrue(collectionLikeType1.isConcrete());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      assertNotNull(collectionLikeType1);
      
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      assertEquals(0, booleanNode0.size());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isLong());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isInt());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isShort());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.booleanValue());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isIntegralNumber());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isArray());
      assertNotNull(booleanNode0);
      
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withContentValueHandler(booleanNode0);
      assertFalse(collectionLikeType0.equals((Object)collectionLikeType1));
      assertFalse(collectionLikeType1.equals((Object)collectionLikeType0));
      assertTrue(collectionLikeType2.equals((Object)collectionLikeType1));
      assertFalse(collectionLikeType2.equals((Object)collectionLikeType0));
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertFalse(collectionLikeType1.isFinal());
      assertFalse(collectionLikeType1.isInterface());
      assertFalse(collectionLikeType1.isArrayType());
      assertFalse(collectionLikeType1.isEnumType());
      assertFalse(collectionLikeType1.isPrimitive());
      assertFalse(collectionLikeType1.hasValueHandler());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertEquals(0, collectionLikeType1.containedTypeCount());
      assertTrue(collectionLikeType1.hasContentType());
      assertFalse(collectionLikeType1.useStaticType());
      assertTrue(collectionLikeType1.isContainerType());
      assertFalse(collectionLikeType1.isAbstract());
      assertFalse(collectionLikeType1.hasHandlers());
      assertTrue(collectionLikeType1.isConcrete());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertEquals(0, booleanNode0.size());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isLong());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isInt());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isShort());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.booleanValue());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isIntegralNumber());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isArray());
      assertTrue(collectionLikeType2.isContainerType());
      assertFalse(collectionLikeType2.isArrayType());
      assertTrue(collectionLikeType2.hasContentType());
      assertFalse(collectionLikeType2.isFinal());
      assertFalse(collectionLikeType2.isInterface());
      assertFalse(collectionLikeType2.isPrimitive());
      assertFalse(collectionLikeType2.useStaticType());
      assertTrue(collectionLikeType2.hasHandlers());
      assertTrue(collectionLikeType2.isConcrete());
      assertFalse(collectionLikeType2.isJavaLangObject());
      assertFalse(collectionLikeType2.isAbstract());
      assertFalse(collectionLikeType2.isEnumType());
      assertEquals(0, collectionLikeType2.containedTypeCount());
      assertTrue(collectionLikeType2.isCollectionLikeType());
      assertFalse(collectionLikeType2.hasValueHandler());
      assertFalse(collectionLikeType2.isMapLikeType());
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(collectionLikeType0, collectionLikeType2);
      assertNotSame(collectionLikeType1, collectionLikeType2);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      assertNotSame(collectionLikeType2, collectionLikeType1);
      assertNotSame(collectionLikeType2, collectionLikeType0);
      assertNotNull(collectionLikeType2);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((JsonParser) null, (JavaType) collectionLikeType2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.node.BooleanNode cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, deserializationFeatureArray0.length);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.WRAP_EXCEPTIONS;
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertEquals(32768, deserializationFeature1.getMask());
      assertTrue(deserializationFeature1.enabledByDefault());
      assertEquals(DeserializationFeature.WRAP_EXCEPTIONS, deserializationFeature1);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializationFeature1, false);
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(32768, deserializationFeature1.getMask());
      assertTrue(deserializationFeature1.enabledByDefault());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader(84);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[6];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, 2, 0, false);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, deserializationFeatureArray0.length);
      assertEquals(6, charArray0.length);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(32768, deserializationFeature1.getMask());
      assertTrue(deserializationFeature1.enabledByDefault());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0.readValues((JsonParser) readerBasedJsonParser0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, jsonGenerator_Feature0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[4];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1411, (InputStream) null, objectMapper0, byteQuadsCanonicalizer0, byteArray0, (byte)87, (byte) (-73), false);
      assertEquals(4, byteArray0.length);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1411, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      assertEquals(4, byteArray0.length);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1411, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(1411, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(filteringParserDelegate0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(filteringParserDelegate0);
      assertEquals(4, byteArray0.length);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1411, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(1411, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(objectReader0);
      
      TypeReference<MapLikeType> typeReference0 = (TypeReference<MapLikeType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.readValues((JsonParser) filteringParserDelegate0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleDeserializers0, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectReader0, charsToNameCanonicalizer0, charArray0, 58, 0, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      Class<IntNode> class1 = IntNode.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertNotNull(mapType0);
      
      MapLikeType mapLikeType0 = mapType0.withContentTypeHandler(bufferRecycler0);
      assertTrue(mapLikeType0.equals((Object)mapType0));
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isAbstract());
      assertNotSame(mapType0, mapLikeType0);
      assertNotSame(mapLikeType0, mapType0);
      assertNotNull(mapLikeType0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((JsonParser) readerBasedJsonParser0, (ResolvedType) mapLikeType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.core.util.BufferRecycler cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      NullNode nullNode0 = jsonNodeFactory0.nullNode();
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isObject());
      assertEquals("null", nullNode0.asText());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isFloat());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isMissingNode());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertNotNull(nullNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(nullNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isObject());
      assertEquals("null", nullNode0.asText());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isFloat());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isMissingNode());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.currentToken());
      assertNotNull(jsonParser0);
      
      try { 
        objectReader0.readValues(jsonParser0, (ResolvedType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((byte[]) null, (-403), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        objectReader0.readValue(byteArray0, 782, 2090);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 782
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      try { 
        objectReader0.readValue(byteArray0, (int) 98, (int)  (-69));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\u0000\u0000\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<MapLikeType> class0 = MapLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)23;
      byteArray0[3] = (byte)1;
      try { 
        objectReader0.readValue(byteArray0, 1, 584);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 23)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0017\u0000\u0001\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[18];
      byteArray0[8] = (byte)82;
      try { 
        objectReader0.readValue(byteArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Invalid UTF-32 character 0x51ff0000 (above 0x0010ffff) at char #2, byte #11)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        objectReader0.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)110;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-84);
      try { 
        objectReader0.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: (byte[])\"\uFFFDn\u0000\uFFFD\"; line: 1, column: 11]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("?ZZ/f>3p<uF+PR*^,9", "!~}99jT{RpZA2a'<!");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertFalse(mockFile0.isDirectory());
      assertEquals("!~}99jT{RpZA2a'<!", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/experiment/?ZZ/f>3p<uF+PR*^,9/!~}99jT{RpZA2a'<!", mockFile0.toString());
      assertEquals("/experiment/?ZZ/f>3p<uF+PR*^,9", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ZZ/f>3p<uF+PR*^,9/!~}99jT{RpZA2a'<!", uRL0.getQuery());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0.readValue("u");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'u': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"u\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        objectReader0.readValue((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      StringReader stringReader0 = new StringReader("J9{F");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readValue((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'J9': was expecting ('true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      try { 
        objectReader0.readValue((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (ByteArrayInputStream); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("<~_yv3z!A~kZ#AS#");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValue((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      File file0 = MockFile.createTempFile("A)zbTd,", "");
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("/tmp/A)zbTd,0", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("A)zbTd,0", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      try { 
        objectReader0.readValue(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("oC*8,.%M=P");
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      MockFile mockFile0 = new MockFile("oC*8,.%M=P");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValue((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-96), (-118));
      assertEquals(8, byteArray0.length);
      assertEquals((-118), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertEquals((-118), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xff
         //  at [Source: (DataInputStream); line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isDouble());
      assertEquals("true", booleanNode0.asText());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isIntegralNumber());
      assertNull(booleanNode0.numberType());
      assertTrue(booleanNode0.asBoolean());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.isMissingNode());
      assertTrue(booleanNode0.isEmpty());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      assertNotNull(booleanNode0);
      
      Class<List> class0 = List.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(booleanNode0);
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isDouble());
      assertEquals("true", booleanNode0.asText());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isIntegralNumber());
      assertNull(booleanNode0.numberType());
      assertTrue(booleanNode0.asBoolean());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.isMissingNode());
      assertTrue(booleanNode0.isEmpty());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withType(class0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isDouble());
      assertEquals("true", booleanNode0.asText());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isIntegralNumber());
      assertNull(booleanNode0.numberType());
      assertTrue(booleanNode0.asBoolean());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.isMissingNode());
      assertTrue(booleanNode0.isEmpty());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.readValue((JsonNode) booleanNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.node.BooleanNode cannot be cast to java.util.Collection
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.CollectionDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<LongNode> class0 = LongNode.class;
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      LongNode longNode0 = new LongNode(0L);
      assertNull(longNode0.textValue());
      assertEquals(0.0, longNode0.doubleValue(), 0.01);
      assertEquals(0.0F, longNode0.floatValue(), 0.01F);
      assertTrue(longNode0.isEmpty());
      assertFalse(longNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isNaN());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.booleanValue());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isInt());
      assertEquals(0, longNode0.size());
      assertEquals((short)0, longNode0.shortValue());
      assertEquals(0, longNode0.intValue());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isBigInteger());
      assertFalse(longNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertEquals(0L, longNode0.longValue());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isDouble());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloatingPointNumber());
      assertFalse(longNode0.isBigDecimal());
      assertNotNull(longNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(longNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(longNode0.textValue());
      assertEquals(0.0, longNode0.doubleValue(), 0.01);
      assertEquals(0.0F, longNode0.floatValue(), 0.01F);
      assertTrue(longNode0.isEmpty());
      assertFalse(longNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isNaN());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.booleanValue());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isInt());
      assertEquals(0, longNode0.size());
      assertEquals((short)0, longNode0.shortValue());
      assertEquals(0, longNode0.intValue());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isBigInteger());
      assertFalse(longNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertEquals(0L, longNode0.longValue());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isDouble());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloatingPointNumber());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertNotNull(jsonParser0);
      
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      try { 
        objectReader0.readValue(jsonParser0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std` (no Creators, like default construct, exist): no long/Long-argument constructor/factory method to deserialize from Number value (0)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      char[] charArray0 = new char[3];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      Class<String> class0 = String.class;
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (char[])\"\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertNotNull(resolvedRecursiveType0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) null, (JavaType) resolvedRecursiveType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      ShortNode shortNode0 = (ShortNode)jsonNodeFactory0.numberNode(short0);
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.booleanValue());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isBigDecimal());
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isDouble());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isLong());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertNull(shortNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isIntegralNumber());
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isObject());
      assertEquals(0L, shortNode0.longValue());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isNaN());
      assertEquals((short)0, shortNode0.shortValue());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(0, shortNode0.intValue());
      assertNotNull(shortNode0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectMapper0.treeAsTokens(shortNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.booleanValue());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isBigDecimal());
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isDouble());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isLong());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertNull(shortNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isIntegralNumber());
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isObject());
      assertEquals(0L, shortNode0.longValue());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isNaN());
      assertEquals((short)0, shortNode0.shortValue());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(0, shortNode0.intValue());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertNull(treeTraversingParser0.currentToken());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertNotNull(treeTraversingParser0);
      
      try { 
        objectReader0.readValue((JsonParser) treeTraversingParser0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isFloat());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isLong());
      assertTrue(bigIntegerNode0.isEmpty());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertNotNull(bigIntegerNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(bigIntegerNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isFloat());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isLong());
      assertTrue(bigIntegerNode0.isEmpty());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNotNull(jsonParser0);
      
      TypeReference<NullNode> typeReference0 = (TypeReference<NullNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.readValue(jsonParser0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertEquals(0, arrayType0.containedTypeCount());
      assertNotNull(arrayType0);
      
      TypeBindings typeBindings0 = arrayType0.getBindings();
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertNotNull(resolvedRecursiveType0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) null, (ResolvedType) resolvedRecursiveType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(3, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, (ResolvedType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (char[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      assertEquals(16, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, byteArrayInputStream0.available());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNotNull(readerBasedJsonParser0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      assertEquals(16, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, byteArrayInputStream0.available());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertNotNull(filteringParserDelegate0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3917));
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertNotNull(placeholderForType0);
      
      try { 
        objectReader0.readValue((JsonParser) filteringParserDelegate0, (ResolvedType) placeholderForType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (ByteArrayInputStream); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[6];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 64, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 33, 1, false);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(6, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(64, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      byte[] byteArray0 = new byte[3];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((byte[]) null, (int) (byte)40, (int) (byte)40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((byte[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        objectReader0.readTree(byteArray0, 65, 80);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-60);
      // Undeclared exception!
      try { 
        objectReader0.readTree(byteArray0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[7];
      try { 
        objectReader0.readTree(byteArray0, 1, (int) (short)1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<CollectionType> class0 = CollectionType.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isInterface());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertNotNull(collectionLikeType0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) collectionLikeType0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isInterface());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-33);
      try { 
        objectReader0.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: (byte[])\"\uFFFDj\uFFFD\"; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0.readTree("no default constructor found");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'no': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: (String)\"no default constructor found\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0.readTree("{");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: expected close marker for Object (start marker at [Source: (String)\"{\"; line: 1, column: 1])
         //  at [Source: (String)\"{\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        objectReader0.readTree((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      StringReader stringReader0 = new StringReader("JSON");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readTree((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      StringReader stringReader0 = new StringReader("\"p)iNDE^H");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readTree((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: (StringReader); line: 1, column: 19]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 3);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(pushbackInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((InputStream) pushbackInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      try { 
        objectReader0.readTree((InputStream) mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 4);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)43}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      try { 
        objectReader0.readTree((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in a Number value
         //  at [Source: (ByteArrayInputStream); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(5, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1312);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(2, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(3, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-72);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-72), (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-72), (byte)0}, byteArray0);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00B8' (code 184)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (DataInputStream); line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNotNull(nonBlockingJsonParser0);
      
      try { 
        objectReader0.readTree((JsonParser) nonBlockingJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.JsonNode`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<NullNode> class0 = NullNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertNotNull(arrayType0);
      
      List<JavaType> list0 = arrayType0.getInterfaces();
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      TypeBindings typeBindings0 = TypeBindings.create(class0, list0);
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = (JavaType) arrayType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) arrayType0, javaTypeArray0, javaTypeArray0[0]);
      assertEquals(9, javaTypeArray0.length);
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isCollectionLikeType());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertNotNull(collectionType0);
      
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isBigInteger());
      assertTrue(decimalNode0.isEmpty());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isObject());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isFloat());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertNotNull(decimalNode0);
      
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(decimalNode0);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertEquals(9, javaTypeArray0.length);
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isCollectionLikeType());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isBigInteger());
      assertTrue(decimalNode0.isEmpty());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isObject());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isFloat());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isFinal());
      assertEquals(0, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isAbstract());
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotNull(collectionType1);
      
      // Undeclared exception!
      try { 
        objectReader0.forType((JavaType) collectionType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.node.DecimalNode cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.forType((TypeReference<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeReference<TextNode> typeReference0 = (TypeReference<TextNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.forType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.at("VhJpm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"VhJpm\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0._with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        objectReader0._verifyNoTrailingTokens((JsonParser) null, defaultDeserializationContext_Impl0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[6];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, 1, 0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(6, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(6, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertEquals(3, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonParserDelegate0);
      
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParserDelegate0, deserializationContext0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<BinaryNode> class0 = BinaryNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      char[] charArray0 = new char[7];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      try { 
        objectReader0._verifyNoTrailingTokens(readerBasedJsonParser0, defaultDeserializationContext_Impl0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (char[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      Stack<ObjectReader> stack0 = new Stack<ObjectReader>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(objectReader0));
      assertNotNull(stack0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(stack0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(3, byteArray0.length);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertFalse(stack0.contains(objectReader0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      // Undeclared exception!
      try { 
        objectReader0._reportUnkownFormat((DataFormatReaders) null, dataFormatReaders_Match0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isInterface());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertNotNull(arrayType0);
      
      try { 
        objectReader0._reportUndetectableSource(arrayType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type com.fasterxml.jackson.databind.type.ArrayType with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<ArrayNode> class2 = ArrayNode.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertNotNull(mapType0);
      
      MapType mapType1 = mapType0.withContentTypeHandler(typeFactory0);
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertNotNull(mapType1);
      
      // Undeclared exception!
      try { 
        objectReader0._prefetchRootDeserializer(mapType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.TypeFactory cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0._new(objectReader0, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0._new(objectReader0, (JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("#");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("#", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("#", mockFile0.getName());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getRef());
      assertEquals("", uRL0.getHost());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        objectReader0._inputStream(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0._inputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        objectReader0._initForReading(defaultDeserializationContext_Impl0, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      char[] charArray0 = new char[2];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0, 6, 6);
      assertEquals(2, charArray0.length);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0._initForReading(defaultDeserializationContext_Impl0, readerBasedJsonParser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DeserializationConfig> class0 = DeserializationConfig.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      char[] charArray0 = new char[7];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._initForReading((DeserializationContext) null, readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (char[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0._findTreeDeserializer((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      // Undeclared exception!
      try { 
        objectReader0._findTreeDeserializer(deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0._findRootDeserializer((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      try { 
        objectReader0._findRootDeserializer(deserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1731);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndCloseAsTree(pushbackInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAsTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = (DecimalNode)jsonNodeFactory0.numberNode(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isObject());
      assertTrue(decimalNode0.isBigDecimal());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isFloat());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isLong());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isBigInteger());
      assertFalse(decimalNode0.isMissingNode());
      assertNotNull(decimalNode0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectMapper0.treeAsTokens(decimalNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isObject());
      assertTrue(decimalNode0.isBigDecimal());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isFloat());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isLong());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isBigInteger());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertNotNull(treeTraversingParser0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertNotNull(deserializationConfig0);
      
      ObjectReader objectReader0 = new ObjectReader(objectMapper0, deserializationConfig0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAsTree(treeTraversingParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      char[] charArray0 = new char[4];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0, 15, 15);
      assertEquals(4, charArray0.length);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAsTree(readerBasedJsonParser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, true);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader((short)1);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 17, 1, false);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(1, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAsTree(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[9];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0, (int) (byte)92, (int) (byte) (-1));
      assertEquals(9, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isLong());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jsonNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(jsonNode0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isLong());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jsonParser0);
      
      try { 
        objectReader0._bindAsTree(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.JsonNode` out of NOT_AVAILABLE token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(5, deserializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("JSON");
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAsTree(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertArrayEquals(new char[] {'{'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAsTree(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: expected close marker for Object (start marker at [Source: (char[])\"{\"; line: 1, column: 1])
         //  at [Source: (char[])\"{\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAndReadValues((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ArrayNode> class0 = ArrayNode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((Reader) pipedReader0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAndReadValues((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        objectReader0._bindAndReadValues((JsonParser) uTF8StreamJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      byte[] byteArray0 = new byte[1];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        objectReader0._bindAndReadValues((JsonParser) uTF8StreamJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[6];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1416), pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, (-297), 33, true);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(6, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals((-1416), readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAndCloseAsTree(readerBasedJsonParser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -297
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((Reader) pipedReader0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAndCloseAsTree(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      char[] charArray0 = new char[17];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertEquals(17, charArray0.length);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNotNull(readerBasedJsonParser0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
      assertEquals(17, charArray0.length);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertNotNull(filteringParserDelegate0);
      
      try { 
        objectReader0._bindAndCloseAsTree(filteringParserDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (char[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializerFactoryConfig0, true);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAndClose(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Float float0 = new Float(2400.83672159665);
      assertEquals(2400.8367F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      FloatNode floatNode0 = (FloatNode)jsonNodeFactory0.numberNode(float0);
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(2400.836669921875, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isLong());
      assertEquals(2400, floatNode0.intValue());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(2400.8367F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isEmpty());
      assertEquals(2400L, floatNode0.longValue());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertTrue(floatNode0.isFloat());
      assertEquals((short)2400, floatNode0.shortValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertNotNull(floatNode0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectReader0.treeAsTokens(floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(2400.836669921875, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isLong());
      assertEquals(2400, floatNode0.intValue());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(2400.8367F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isEmpty());
      assertEquals(2400L, floatNode0.longValue());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertTrue(floatNode0.isFloat());
      assertEquals((short)2400, floatNode0.shortValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertNull(treeTraversingParser0.currentToken());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.isClosed());
      assertNotNull(treeTraversingParser0);
      
      try { 
        objectReader0._bindAndClose(treeTraversingParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      byte[] byteArray0 = new byte[4];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAndClose(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0._bind((JsonParser) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0, 1, 62);
      assertEquals(1, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0._bind(readerBasedJsonParser0, jsonNodeFactory0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[3];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, mockFileInputStream0, objectReader0, byteQuadsCanonicalizer0, byteArray0, 1, (-1522), false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, byteArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(fileDescriptor0.valid());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(2, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        objectReader0._bind(uTF8StreamJsonParser0, iOContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      LongNode longNode0 = new LongNode(297L);
      assertNull(longNode0.textValue());
      assertEquals(297, longNode0.intValue());
      assertTrue(longNode0.isEmpty());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.booleanValue());
      assertEquals(297.0F, longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isNaN());
      assertEquals((short)297, longNode0.shortValue());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isBigInteger());
      assertEquals(297L, longNode0.longValue());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(297.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isBigDecimal());
      assertTrue(longNode0.isIntegralNumber());
      assertNotNull(longNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(longNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(longNode0.textValue());
      assertEquals(297, longNode0.intValue());
      assertTrue(longNode0.isEmpty());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.booleanValue());
      assertEquals(297.0F, longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isNaN());
      assertEquals((short)297, longNode0.shortValue());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isBigInteger());
      assertEquals(297L, longNode0.longValue());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(297.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isBigDecimal());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertNotNull(jsonParser0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(longNode0.textValue());
      assertEquals(297, longNode0.intValue());
      assertTrue(longNode0.isEmpty());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.booleanValue());
      assertEquals(297.0F, longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isNaN());
      assertEquals((short)297, longNode0.shortValue());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isBigInteger());
      assertEquals(297L, longNode0.longValue());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(297.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isBigDecimal());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNotNull(filteringParserDelegate0);
      
      try { 
        objectReader0._bind(filteringParserDelegate0, objectMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertNotNull(nioPathDeserializer0);
      
      try { 
        objectReader0._bind(readerBasedJsonParser0, nioPathDeserializer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      assertFalse(mapType0.isEnumType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertNotNull(mapType0);
      
      Class<FilteringParserDelegate> class1 = FilteringParserDelegate.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-1));
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertNotNull(coreXMLDeserializers_Std0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders((ObjectReader[]) null);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader1 = null;
      try {
        objectReader1 = new ObjectReader(objectReader0, (DeserializationConfig) null, mapType0, coreXMLDeserializers_Std0, (Object) null, (FormatSchema) null, injectableValues_Std0, dataFormatReaders0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader((ObjectReader) null, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader((ObjectReader) null, tokenFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader((ObjectReader) null, jsonFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertNotNull(placeholderForType0);
      
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader(objectMapper0, (DeserializationConfig) null, placeholderForType0, "&2L[}8`TD", (FormatSchema) null, injectableValues_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader(objectMapper0, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.readerFor(class0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      ShortNode shortNode0 = (ShortNode)jsonNodeFactory0.numberNode(short0);
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isDouble());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isArray());
      assertEquals((short)0, shortNode0.shortValue());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isNaN());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isFloat());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isLong());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isObject());
      assertFalse(shortNode0.isBigDecimal());
      assertNotNull(shortNode0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectMapper0.treeAsTokens(shortNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isDouble());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isArray());
      assertEquals((short)0, shortNode0.shortValue());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isNaN());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isFloat());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isLong());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isObject());
      assertFalse(shortNode0.isBigDecimal());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertNotNull(treeTraversingParser0);
      
      IntNode intNode0 = (IntNode)objectReader0._bindAsTree(treeTraversingParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isDouble());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isArray());
      assertEquals((short)0, shortNode0.shortValue());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isNaN());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isFloat());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isLong());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isObject());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, treeTraversingParser0.getCurrentToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertEquals(7, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertTrue(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(7, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, treeTraversingParser0.currentToken());
      assertTrue(intNode0.isIntegralNumber());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(0.0, intNode0.doubleValue(), 0.01);
      assertEquals(0.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isNaN());
      assertEquals(0, intNode0.size());
      assertEquals(0, intNode0.intValue());
      assertFalse(intNode0.isBigInteger());
      assertEquals((short)0, intNode0.shortValue());
      assertFalse(intNode0.isMissingNode());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(0L, intNode0.longValue());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isFloat());
      assertTrue(intNode0.canConvertToLong());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isShort());
      assertNotNull(intNode0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(treeTraversingParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isDouble());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isArray());
      assertEquals((short)0, shortNode0.shortValue());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isNaN());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isFloat());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isLong());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isObject());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, treeTraversingParser0.getCurrentToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertEquals(7, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertTrue(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(7, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, treeTraversingParser0.currentToken());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertEquals(0, jsonParserDelegate0.getFeatureMask());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertNotNull(jsonParserDelegate0);
      
      IntNode intNode1 = (IntNode)objectReader0._bindAsTree(jsonParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isDouble());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isArray());
      assertEquals((short)0, shortNode0.shortValue());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isNaN());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isFloat());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isLong());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isObject());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, treeTraversingParser0.getCurrentToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertEquals(7, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertTrue(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(7, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, treeTraversingParser0.currentToken());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertEquals(0, jsonParserDelegate0.getFeatureMask());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertEquals(JsonNodeType.NUMBER, intNode1.getNodeType());
      assertFalse(intNode1.isFloat());
      assertFalse(intNode1.isBigInteger());
      assertEquals(0L, intNode1.longValue());
      assertTrue(intNode1.isInt());
      assertFalse(intNode1.isFloatingPointNumber());
      assertFalse(intNode1.booleanValue());
      assertEquals(JsonParser.NumberType.INT, intNode1.numberType());
      assertTrue(intNode1.canConvertToInt());
      assertEquals((short)0, intNode1.shortValue());
      assertFalse(intNode1.isMissingNode());
      assertEquals(0.0, intNode1.doubleValue(), 0.01);
      assertNull(intNode1.textValue());
      assertFalse(intNode1.isNaN());
      assertEquals(0, intNode1.intValue());
      assertFalse(intNode1.isLong());
      assertEquals(0, intNode1.size());
      assertEquals(0.0F, intNode1.floatValue(), 0.01F);
      assertTrue(intNode1.isEmpty());
      assertFalse(intNode1.isDouble());
      assertFalse(intNode1.isArray());
      assertTrue(intNode1.isIntegralNumber());
      assertFalse(intNode1.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode1.asToken());
      assertFalse(intNode1.isBigDecimal());
      assertTrue(intNode1.canConvertToLong());
      assertFalse(intNode1.isShort());
      assertSame(intNode1, intNode0);
      assertNotNull(intNode1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("1O]iSHKj{", "1O]iSHKj{");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertEquals("/experiment/1O]iSHKj{", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("1O]iSHKj{", mockFile0.getName());
      assertEquals("/experiment/1O]iSHKj{/1O]iSHKj{", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        objectReader0.readValues(byteArray0, 1, (int)  (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<MapLikeType> class0 = MapLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        objectReader0.readValue(byteArray0, 1, 584);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        objectReader0.readValue((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate((Object) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[5];
      objectReaderArray0[0] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(5, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      JavaType[] javaTypeArray0 = new JavaType[6];
      // Undeclared exception!
      try { 
        dataFormatReaders0.withType(javaTypeArray0[5]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DataFormatReaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(typeFactory0);
      
      Class<ShortNode> class0 = ShortNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertNotNull(arrayType0);
      
      ObjectReader objectReader1 = objectMapper0.readerFor((JavaType) arrayType0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.forType((JavaType) arrayType0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      ShortNode shortNode0 = (ShortNode)jsonNodeFactory0.numberNode(short0);
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals(0L, shortNode0.longValue());
      assertTrue(shortNode0.isShort());
      assertNull(shortNode0.textValue());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals((short)0, shortNode0.shortValue());
      assertFalse(shortNode0.isObject());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertFalse(shortNode0.isNaN());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.isEmpty());
      assertNotNull(shortNode0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectMapper0.treeAsTokens(shortNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals(0L, shortNode0.longValue());
      assertTrue(shortNode0.isShort());
      assertNull(shortNode0.textValue());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals((short)0, shortNode0.shortValue());
      assertFalse(shortNode0.isObject());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertFalse(shortNode0.isNaN());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.isEmpty());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertNull(treeTraversingParser0.currentToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertNotNull(treeTraversingParser0);
      
      try { 
        objectReader0.readValues((JsonParser) treeTraversingParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      char[] charArray0 = new char[17];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertEquals(17, charArray0.length);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNotNull(readerBasedJsonParser0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertNotNull(beanProperty_Bogus0);
      
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertNotNull(simpleType0);
      
      Iterator<MissingNode> iterator0 = objectReader0.readValues((JsonParser) readerBasedJsonParser0, (JavaType) simpleType0);
      assertEquals(17, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TreeSet<ObjectReader> treeSet0 = new TreeSet<ObjectReader>();
      assertNotNull(treeSet0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(treeSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleDeserializers0, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader(3);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNotNull(readerBasedJsonParser0);
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertNotNull(arrayType0);
      
      ObjectReader objectReader1 = objectReader0.forType((JavaType) arrayType0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._prefetchRootDeserializer(arrayType0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getEmptyAccessPattern());
      assertNotSame(objectReader0, objectReader1);
      assertNotNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(object0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      
      MappingIterator<ShortNode> mappingIterator0 = objectReader1.readValues("");
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(mappingIterator0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader1._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader1._findRootDeserializer(defaultDeserializationContext_Impl0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertFalse(jsonDeserializer0.isCachable());
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNotNull(deserializationConfig0);
      
      ObjectReader objectReader0 = new ObjectReader(objectMapper0, deserializationConfig0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[9];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      objectReaderArray0[7] = objectReader0;
      objectReaderArray0[8] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(9, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(9, objectReaderArray0.length);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotNull(dataFormatReaders1);
      
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat((InputStream) sequenceInputStream0);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(9, objectReaderArray0.length);
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotNull(dataFormatReaders_Match0);
      
      try { 
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (com.fasterxml.jackson.core.io.MergedStream); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(1, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) null);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(1, objectReaderArray0.length);
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertNotNull(dataFormatReaders_Match0);
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[4];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(4, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(4, objectReaderArray0.length);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotNull(dataFormatReaders1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.with(objectReaderArray0);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(4, objectReaderArray0.length);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotNull(dataFormatReaders2);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders2.findFormat((InputStream) sequenceInputStream0);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(4, objectReaderArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotNull(dataFormatReaders_Match0);
      
      try { 
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (com.fasterxml.jackson.core.io.MergedStream); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[9];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReaderArray0[2];
      objectReaderArray0[7] = objectReaderArray0[2];
      objectReaderArray0[8] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(9, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[9];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, 0, 64);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(9, objectReaderArray0.length);
      assertEquals(9, byteArray0.length);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isEmpty());
      assertNull(bigIntegerNode0.textValue());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isFloat());
      assertFalse(bigIntegerNode0.isArray());
      assertNotNull(bigIntegerNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(bigIntegerNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isEmpty());
      assertNull(bigIntegerNode0.textValue());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isFloat());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertNotNull(jsonParser0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isEmpty());
      assertNull(bigIntegerNode0.textValue());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isFloat());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertNotNull(defaultDeserializationContext0);
      
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParser0, defaultDeserializationContext0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type VALUE_NUMBER_INT) found after value (bound as [null]): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf((-1430.320676424));
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals((-1430L), doubleNode0.longValue());
      assertEquals((short) (-1430), doubleNode0.shortValue());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isShort());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.isDouble());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals((-1430.3207F), doubleNode0.floatValue(), 0.01F);
      assertEquals(0, doubleNode0.size());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.booleanValue());
      assertEquals((-1430), doubleNode0.intValue());
      assertFalse(doubleNode0.isInt());
      assertEquals((-1430.320676424), doubleNode0.doubleValue(), 0.01);
      assertNotNull(doubleNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(doubleNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals((-1430L), doubleNode0.longValue());
      assertEquals((short) (-1430), doubleNode0.shortValue());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isShort());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.isDouble());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals((-1430.3207F), doubleNode0.floatValue(), 0.01F);
      assertEquals(0, doubleNode0.size());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.booleanValue());
      assertEquals((-1430), doubleNode0.intValue());
      assertFalse(doubleNode0.isInt());
      assertEquals((-1430.320676424), doubleNode0.doubleValue(), 0.01);
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNotNull(jsonParser0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals((-1430L), doubleNode0.longValue());
      assertEquals((short) (-1430), doubleNode0.shortValue());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isShort());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.isDouble());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals((-1430.3207F), doubleNode0.floatValue(), 0.01F);
      assertEquals(0, doubleNode0.size());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.booleanValue());
      assertEquals((-1430), doubleNode0.intValue());
      assertFalse(doubleNode0.isInt());
      assertEquals((-1430.320676424), doubleNode0.doubleValue(), 0.01);
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertNotNull(defaultDeserializationContext0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<TreeSet> class0 = TreeSet.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertNotNull(collectionType0);
      
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParser0, defaultDeserializationContext0, collectionType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type VALUE_NUMBER_FLOAT) found after value (bound as `java.util.TreeSet`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<TreeSet> class0 = TreeSet.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.databind.cfg.MutableConfigOverride", "Cannot find a deserializer for type ");
      JsonParser jsonParser0 = jsonFactory0.createParser(file0);
      objectReader0._verifyNoTrailingTokens(jsonParser0, (DeserializationContext) null, collectionType0);
      assertFalse(collectionType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(tokenFilter0);
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      MappingIterator<ObjectNode> mappingIterator0 = objectReader1.readValues((InputStream) null);
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)1;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<DecimalNode> class0 = DecimalNode.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      Class<MissingNode> class1 = MissingNode.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
      // Undeclared exception!
      try { 
        objectReader0._unwrapAndDeserialize(jsonParser0, defaultDeserializationContext_Impl0, mapType0, (JsonDeserializer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      LongNode longNode0 = LongNode.valueOf(1188L);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(longNode0);
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      JsonNode jsonNode1 = objectReader0._bindAndCloseAsTree(jsonParser0);
      assertTrue(jsonParser0.isClosed());
      assertNotSame(jsonNode1, jsonNode0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      // Undeclared exception!
      try { 
        objectReader0._bindAndCloseAsTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      // Undeclared exception!
      try { 
        objectReader0._bindAndClose((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BooleanNode booleanNode0 = BooleanNode.valueOf(true);
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      ObjectReader objectReader1 = objectReader0.withType(class0);
      try { 
        objectReader1.readValue((JsonNode) booleanNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.introspect.BasicBeanDescription` (no Creators, like default construct, exist): no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (true)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      NullNode nullNode0 = arrayNode0.nullNode();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = objectReader0.treeToValue((TreeNode) nullNode0, class0);
      assertNull(resolvedRecursiveType0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ShortNode shortNode0 = new ShortNode((short)0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(shortNode0);
      Class<ArrayNode> class0 = ArrayNode.class;
      // Undeclared exception!
      try { 
        objectReader0.treeToValue((TreeNode) shortNode0, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.node.ShortNode cannot be cast to com.fasterxml.jackson.databind.node.ArrayNode
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer$ArrayDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      // Undeclared exception!
      try { 
        objectReader0.readValues((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      try { 
        objectReader0.readValues("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 256);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      byte[] byteArray0 = new byte[3];
      try { 
        objectReader0.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNode jsonNode0 = objectReader0.readTree("32");
      assertEquals(JsonNodeType.NUMBER, jsonNode0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNode jsonNode0 = objectReader0.readTree((Reader) null);
      assertFalse(jsonNode0.isLong());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 4);
      try { 
        objectReader0.readTree((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (ByteArrayInputStream); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (DataInputStream); line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      URL uRL0 = MockURL.getFtpExample();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      ObjectReader objectReader0 = new ObjectReader(objectMapper0, deserializationConfig0);
      // Undeclared exception!
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      // Undeclared exception!
      try { 
        objectReader0.readValue((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      byte[] byteArray0 = new byte[18];
      try { 
        objectReader0.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      try { 
        objectReader0.readValue("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      StringReader stringReader0 = new StringReader("");
      try { 
        objectReader0.readValue((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (StringReader); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TypeReference<TextNode> typeReference0 = (TypeReference<TextNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      ObjectReader objectReader1 = objectReader0.forType(typeReference0);
      assertSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      assertSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader1 = objectReader0.with((InjectableValues) injectableValues_Std0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Object object0 = new Object();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(object0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser0 = jsonFactory0.createParser("");
      try { 
        objectReader0._initForReading(defaultDeserializationContext_Impl0, jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      NullNode nullNode0 = jsonNodeFactory0.nullNode();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(nullNode0);
      objectReader0._bindAsTree(jsonParser0);
      try { 
        objectReader0.readValue(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      // Undeclared exception!
      try { 
        objectReader0.writeValue((JsonGenerator) null, objectMapper0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeatureArray0[0];
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      ObjectReader objectReader1 = objectReader0.at((JsonPointer) null);
      assertFalse(objectReader1.equals((Object)objectReader0));
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      ContextAttributes contextAttributes0 = objectReader0.getAttributes();
      assertNotNull(contextAttributes0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      // Undeclared exception!
      try { 
        objectReader0.without((FormatFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      Version version0 = objectReader0.version();
      assertTrue(version0.isSnapshot());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      // Undeclared exception!
      try { 
        objectReader0.withType((TypeReference<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      // Undeclared exception!
      try { 
        objectReader0.with(deserializationFeature0, (DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TimeZone timeZone0 = TimeZone.getDefault();
      ObjectReader objectReader1 = objectReader0.with(timeZone0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader objectReader1 = objectReader0.withoutAttribute(objectMapper0);
      assertSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<BinaryNode> class1 = BinaryNode.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[5] = javaType0;
      javaTypeArray0[6] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[5], javaTypeArray0[6]);
      ObjectReader objectReader1 = objectReader0.withType((Type) mapType0);
      assertFalse(objectReader1.equals((Object)objectReader0));
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectReader objectReader1 = objectReader0.withAttribute(jsonFactory0, (Object) null);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
      assertSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<TextNode> class0 = TextNode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      ObjectReader objectReader1 = objectReader0.with((Base64Variant) null);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNode jsonNode0 = objectReader0.createArrayNode();
      assertFalse(jsonNode0.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      // Undeclared exception!
      try { 
        objectReader0.withoutFeatures((FormatFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      InjectableValues injectableValues0 = objectReader0.getInjectableValues();
      assertNull(injectableValues0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      // Undeclared exception!
      try { 
        objectReader0.withFeatures(deserializationFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(tokenFilter0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      byte[] byteArray0 = new byte[8];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      try { 
        objectReader0.readValue(jsonParser0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) null);
      URL uRL0 = MockURL.getHttpExample();
      try { 
        objectReader0._inputStream(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode0);
      // Undeclared exception!
      try { 
        objectReader0.readValues(jsonParser0, (TypeReference<CoreXMLDeserializers.Std>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LongNode> class0 = LongNode.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ObjectReader objectReader1 = objectReader0.forType((JavaType) arrayType0);
      // Undeclared exception!
      try { 
        objectReader0._new(objectReader1, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(115);
      JsonParser jsonParser0 = arrayNode0.traverse();
      // Undeclared exception!
      try { 
        objectReader0.readValue(jsonParser0, (TypeReference<ArrayType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      // Undeclared exception!
      try { 
        objectReader0.withFeatures((FormatFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      // Undeclared exception!
      try { 
        objectReader0.without(deserializationFeature0, (DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      assertSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      boolean boolean0 = objectReader0.isEnabled(deserializationFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      // Undeclared exception!
      try { 
        objectReader0.with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNode jsonNode0 = objectReader0.createObjectNode();
      assertFalse(jsonNode0.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      RawValue rawValue0 = new RawValue("");
      ValueNode valueNode0 = arrayNode0.rawValueNode(rawValue0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      try { 
        objectReader0.treeToValue((TreeNode) valueNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ResolvedRecursiveType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.util.RawValue`: incompatible types
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      // Undeclared exception!
      try { 
        objectReader0.withType((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.withFormatDetection((ObjectReader[]) null);
      assertFalse(objectReader1.equals((Object)objectReader0));
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[7];
      // Undeclared exception!
      try { 
        objectReader0.withoutFeatures(jsonParser_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      NullNode nullNode0 = NullNode.getInstance();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(nullNode0);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(nullNode0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParser0, defaultDeserializationContext0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type VALUE_NULL) found after value (bound as `com.fasterxml.jackson.databind.node.NullNode`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(concurrentHashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, false);
      StringReader stringReader0 = new StringReader("JSON");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectReader0, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SimpleType> class0 = SimpleType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Iterator<CollectionLikeType> iterator0 = objectReader0.readValues((JsonParser) jsonParserDelegate0, (ResolvedType) arrayType0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ObjectReader objectReader1 = objectReader0.with(locale0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.withType((JavaType) null);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<NullNode> class0 = NullNode.class;
      Iterator<NullNode> iterator0 = objectReader0.readValues((JsonParser) null, class0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[17];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      try { 
        objectReader0.readTree(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (char[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<TreeSet> class1 = TreeSet.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, javaType0);
      MapType mapType1 = mapType0.withContentValueHandler(collectionType0);
      // Undeclared exception!
      try { 
        objectReader0.readValue(jsonParser0, (ResolvedType) mapType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.CollectionType cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader objectReader1 = objectReader0.withHandler((DeserializationProblemHandler) null);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader objectReader1 = objectReader0.withRootName("%qv)^A%YKSgNL?gKuR");
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      PropertyName propertyName0 = PropertyName.construct("JSON", "missing type id property '%s'");
      ObjectReader objectReader1 = objectReader0.withRootName(propertyName0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      // Undeclared exception!
      try { 
        objectReader0.withFeatures((JsonParser.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2819));
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      TreeSet<ObjectReader> treeSet0 = new TreeSet<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(treeSet0);
      byte[] byteArray0 = new byte[4];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte)62, (int) (byte)62);
      try { 
        objectReader0._reportUnkownFormat(dataFormatReaders0, dataFormatReaders_Match0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      assertSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      ObjectReader objectReader1 = objectReader0.with((FormatFeature) jsonReadFeature0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      MockFile mockFile0 = new MockFile("1]O&s.", "Current token not START_OBJECT (needed to unwrap root name '%s'), but %s");
      try { 
        objectReader0._inputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      // Undeclared exception!
      try { 
        objectReader0._reportUndetectableSource((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader objectReader1 = objectReader0.at("");
      assertNotSame(objectReader0, objectReader1);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory jsonFactory0 = objectReader0.getFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      MappingIterator<Module> mappingIterator0 = objectReader0.readValues((Reader) null);
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<LongNode> class0 = LongNode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      byte[] byteArray0 = new byte[9];
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      HashMap<DeserializationConfig, FilteringParserDelegate> hashMap0 = new HashMap<DeserializationConfig, FilteringParserDelegate>();
      ObjectReader objectReader1 = objectReader0.withAttributes(hashMap0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ObjectReader objectReader1 = objectReader0.withView(class1);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      // Undeclared exception!
      try { 
        objectReader0.with((JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
      try { 
        objectReader1.readValues("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Conflicting setter definitions for property \"config\": com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params) vs com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params)
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      // Undeclared exception!
      try { 
        objectReader0.withoutFeatures(deserializationFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Short short0 = new Short((short)0);
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(valueNode0);
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectReader0, byteArrayBuilder0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      // Undeclared exception!
      try { 
        objectReader0.writeTree(jsonGeneratorDelegate0, jsonNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      DeserializationConfig deserializationConfig0 = objectReader0.getConfig();
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) null);
      MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      boolean boolean0 = objectReader0.isEnabled(mapperFeature0);
      assertFalse(boolean0);
  }
}
