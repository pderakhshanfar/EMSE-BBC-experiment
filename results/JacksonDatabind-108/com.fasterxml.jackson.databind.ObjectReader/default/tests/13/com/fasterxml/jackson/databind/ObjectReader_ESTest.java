/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 31 13:44:26 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.TSFBuilder;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.json.JsonWriteFeature;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.TextBuffer;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.DOMDeserializer;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.RawValue;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharConversionException;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.sql.SQLNonTransientConnectionException;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.SortedSet;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.BiFunction;
import java.util.function.DoubleBinaryOperator;
import java.util.function.ToDoubleFunction;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectReader_ESTest extends ObjectReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      assertNotNull(bigIntegerNode0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isNaN());
      assertEquals(0, bigIntegerNode0.size());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.booleanValue());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isArray());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloat());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isDouble());
      
      JsonNode jsonNode0 = bigIntegerNode0.get(2219);
      assertNull(jsonNode0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isNaN());
      assertEquals(0, bigIntegerNode0.size());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.booleanValue());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isArray());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloat());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isDouble());
      
      Class<ShortNode> class0 = ShortNode.class;
      // Undeclared exception!
      try { 
        objectReader0.treeToValue((TreeNode) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.with((Base64Variant) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      assertFalse(vector0.contains(objectReader0));
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      PriorityQueue<ObjectReader> priorityQueue0 = new PriorityQueue<ObjectReader>();
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(priorityQueue0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, priorityQueue0.size());
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with((ObjectReader[]) null);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(priorityQueue0.contains(objectReader0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add(objectReader0);
      assertTrue(priorityQueue0.contains(objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(priorityQueue0.contains(objectReader1));
      assertTrue(priorityQueue0.contains(objectReader0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, priorityQueue0.size());
      
      Class<DoubleNode> class0 = DoubleNode.class;
      // Undeclared exception!
      try { 
        objectReader1.forType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DataFormatReaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      assertTrue(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      
      charArray0[1] = 'x';
      charArray0[2] = 'j';
      charArray0[3] = '.';
      charArray0[4] = 'i';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3522, pipedReader0, objectMapper1, charsToNameCanonicalizer0, charArray0, 3, 3, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'d', 'x', 'j', '.', 'i'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(3522, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      
      try { 
        objectReader0._bindAndCloseAsTree(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      assertFalse(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      assertNotNull(objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertEquals(0, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1744);
      assertNotNull(arrayNode0);
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      
      IntNode intNode0 = IntNode.valueOf(1744);
      assertNotNull(intNode0);
      assertEquals(1744, intNode0.intValue());
      assertFalse(intNode0.isObject());
      assertEquals(1744.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isIntegralNumber());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isLong());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.canConvertToLong());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((short)1744, intNode0.shortValue());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isArray());
      assertEquals(1744.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isMissingNode());
      assertEquals(0, intNode0.size());
      assertEquals(1744L, intNode0.longValue());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isBigInteger());
      
      ArrayNode arrayNode1 = (ArrayNode)objectReader0._bind(jsonParser0, intNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(1744, intNode0.intValue());
      assertFalse(intNode0.isObject());
      assertEquals(1744.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isIntegralNumber());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isLong());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.canConvertToLong());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((short)1744, intNode0.shortValue());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isArray());
      assertEquals(1744.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isMissingNode());
      assertEquals(0, intNode0.size());
      assertEquals(1744L, intNode0.longValue());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isBigInteger());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isBigDecimal());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.isLong());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isBigInteger());
      assertEquals(0, arrayNode1.size());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      
      MissingNode missingNode0 = (MissingNode)objectReader0._bindAndCloseAsTree(jsonParser0);
      assertNotSame(arrayNode0, arrayNode1);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertNotNull(missingNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isBigDecimal());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isBigInteger());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertNull(missingNode0.textValue());
      assertEquals("", missingNode0.asText());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isFloat());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.booleanValue());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(mapType0);
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      
      try { 
        objectReader0.readValue(jsonParser0, (ResolvedType) mapType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      PriorityQueue<ObjectReader> priorityQueue0 = new PriorityQueue<ObjectReader>();
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(priorityQueue0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, priorityQueue0.size());
      
      // Undeclared exception!
      try { 
        objectReader0._with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertNotNull(arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      
      try { 
        objectReader0.readValue(jsonParser0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertNotNull(dataInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      LinkedHashSet<ObjectReader> linkedHashSet0 = new LinkedHashSet<ObjectReader>();
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedHashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedHashSet0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      File file0 = null;
      File file1 = MockFile.createTempFile("ALLOW_SINGLE_QUOTES", "ALLOW_SINGLE_QUOTES");
      assertNotNull(file1);
      assertEquals("ALLOW_SINGLE_QUOTES0ALLOW_SINGLE_QUOTES", file1.getName());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.length());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertEquals("/tmp/ALLOW_SINGLE_QUOTES0ALLOW_SINGLE_QUOTES", file1.toString());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals("/tmp", file1.getParent());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getUsableSpace());
      
      try { 
        objectReader1.readValues(file1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<String> class0 = String.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertNotNull(jsonFactoryBuilder0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      JsonReadFeature[] jsonReadFeatureArray0 = new JsonReadFeature[5];
      jsonReadFeatureArray0[0] = jsonReadFeature0;
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonReadFeatureArray0[1] = jsonReadFeature1;
      jsonReadFeatureArray0[2] = jsonReadFeature0;
      jsonReadFeatureArray0[3] = jsonReadFeature0;
      jsonReadFeatureArray0[4] = jsonReadFeature0;
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.disable(jsonReadFeature0, jsonReadFeatureArray0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertNotSame(jsonReadFeature0, jsonReadFeature1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertFalse(jsonReadFeature0.equals((Object)jsonReadFeature1));
      assertEquals(5, jsonReadFeatureArray0.length);
      assertNotNull(jsonFactoryBuilder1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(9281, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(9281, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder1);
      assertFalse(jsonReadFeature0.equals((Object)jsonReadFeature1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertEquals(5, jsonReadFeatureArray0.length);
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(9281, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(9281, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(9281, jsonFactory1.getParserFeatures());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '/';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0, 95, 95);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertNotSame(jsonReadFeature0, jsonReadFeature1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonReadFeature0.equals((Object)jsonReadFeature1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertEquals(2, charArray0.length);
      assertEquals(5, jsonReadFeatureArray0.length);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(9281, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(9281, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(9281, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(9281, jsonFactory1.getParserFeatures());
      
      // Undeclared exception!
      try { 
        objectReader1._bindAndCloseAsTree(readerBasedJsonParser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 95
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader2 = objectMapper0.reader();
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      
      FloatNode floatNode0 = new FloatNode(1.0F);
      assertNotNull(floatNode0);
      assertEquals(1.0, floatNode0.doubleValue(), 0.01);
      assertEquals(1, floatNode0.intValue());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((short)1, floatNode0.shortValue());
      assertEquals(1L, floatNode0.longValue());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(1.0F, floatNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isDouble());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isObject());
      
      JsonParser jsonParser0 = objectReader2.treeAsTokens(floatNode0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1.0, floatNode0.doubleValue(), 0.01);
      assertEquals(1, floatNode0.intValue());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((short)1, floatNode0.shortValue());
      assertEquals(1L, floatNode0.longValue());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(1.0F, floatNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isDouble());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isObject());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      
      JsonParser jsonParser1 = objectReader1._considerFilter(jsonParser0, true);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertSame(jsonParser0, jsonParser1);
      assertSame(jsonParser1, jsonParser0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(jsonParser1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(1.0, floatNode0.doubleValue(), 0.01);
      assertEquals(1, floatNode0.intValue());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((short)1, floatNode0.shortValue());
      assertEquals(1L, floatNode0.longValue());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(1.0F, floatNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isDouble());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isObject());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser1.canReadTypeId());
      assertFalse(jsonParser1.canReadObjectId());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertEquals(0, jsonParser1.getFeatureMask());
      assertNull(jsonParser1.getLastClearedToken());
      assertFalse(jsonParser1.isClosed());
      assertEquals(0, jsonParser1.currentTokenId());
      assertFalse(jsonParser1.hasTextCharacters());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertEquals(0, jsonParser1.getCurrentTokenId());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertEquals(0, jsonParser1.getTextOffset());
      assertNull(jsonParser1.getCurrentToken());
      assertNull(jsonParser1.currentToken());
      assertFalse(jsonParser1.hasCurrentToken());
      assertFalse(jsonParser1.canParseAsync());
      
      FloatNode floatNode1 = (FloatNode)objectReader0._bindAndCloseAsTree(jsonParser1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(floatNode0, floatNode1);
      assertSame(jsonParser0, jsonParser1);
      assertSame(jsonParser1, jsonParser0);
      assertNotSame(floatNode1, floatNode0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertTrue(floatNode1.equals((Object)floatNode0));
      assertNotNull(floatNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(1.0, floatNode0.doubleValue(), 0.01);
      assertEquals(1, floatNode0.intValue());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((short)1, floatNode0.shortValue());
      assertEquals(1L, floatNode0.longValue());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(1.0F, floatNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isDouble());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isObject());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertTrue(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser1.canReadTypeId());
      assertFalse(jsonParser1.canReadObjectId());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertEquals(0, jsonParser1.getFeatureMask());
      assertNull(jsonParser1.getLastClearedToken());
      assertTrue(jsonParser1.isClosed());
      assertEquals(0, jsonParser1.currentTokenId());
      assertFalse(jsonParser1.hasTextCharacters());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertEquals(0, jsonParser1.getCurrentTokenId());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertEquals(0, jsonParser1.getTextOffset());
      assertNull(jsonParser1.getCurrentToken());
      assertNull(jsonParser1.currentToken());
      assertFalse(jsonParser1.hasCurrentToken());
      assertFalse(jsonParser1.canParseAsync());
      assertTrue(floatNode1.isFloat());
      assertFalse(floatNode1.booleanValue());
      assertFalse(floatNode1.isArray());
      assertFalse(floatNode1.isBigDecimal());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertFalse(floatNode1.isMissingNode());
      assertFalse(floatNode1.isBigInteger());
      assertTrue(floatNode1.isEmpty());
      assertFalse(floatNode1.isNaN());
      assertFalse(floatNode1.isDouble());
      assertFalse(floatNode1.isIntegralNumber());
      assertFalse(floatNode1.isLong());
      assertFalse(floatNode1.isShort());
      assertFalse(floatNode1.isInt());
      assertEquals((short)1, floatNode1.shortValue());
      assertFalse(floatNode1.isObject());
      assertTrue(floatNode1.canConvertToLong());
      assertEquals(1.0, floatNode1.doubleValue(), 0.01);
      assertEquals(1, floatNode1.intValue());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertNull(floatNode1.textValue());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertEquals(1.0F, floatNode1.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertEquals(0, floatNode1.size());
      assertEquals(1L, floatNode1.longValue());
      assertTrue(floatNode1.canConvertToInt());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      
      IntNode intNode0 = IntNode.valueOf(64);
      assertNotNull(intNode0);
      assertTrue(intNode0.canConvertToLong());
      assertEquals(64.0F, intNode0.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isDouble());
      assertEquals(64.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isLong());
      assertEquals(64L, intNode0.longValue());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((short)64, intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals(64, intNode0.intValue());
      assertEquals(0, intNode0.size());
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(intNode0);
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(64.0F, intNode0.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isDouble());
      assertEquals(64.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isLong());
      assertEquals(64L, intNode0.longValue());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((short)64, intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals(64, intNode0.intValue());
      assertEquals(0, intNode0.size());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      
      JsonParser jsonParser1 = objectReader1._considerFilter(jsonParser0, true);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonParser0, jsonParser1);
      assertSame(jsonParser1, jsonParser0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonParser1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(64.0F, intNode0.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isDouble());
      assertEquals(64.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isLong());
      assertEquals(64L, intNode0.longValue());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((short)64, intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals(64, intNode0.intValue());
      assertEquals(0, intNode0.size());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser1.hasTextCharacters());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertEquals(0, jsonParser1.getTextOffset());
      assertNull(jsonParser1.getCurrentToken());
      assertEquals(0, jsonParser1.currentTokenId());
      assertEquals(0, jsonParser1.getFeatureMask());
      assertFalse(jsonParser1.isClosed());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertFalse(jsonParser1.canReadTypeId());
      assertFalse(jsonParser1.canReadObjectId());
      assertNull(jsonParser1.currentToken());
      assertNull(jsonParser1.getLastClearedToken());
      assertFalse(jsonParser1.canParseAsync());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertEquals(0, jsonParser1.getCurrentTokenId());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertFalse(jsonParser1.hasCurrentToken());
      
      IntNode intNode1 = (IntNode)objectReader1._bindAndCloseAsTree(jsonParser1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(intNode0, intNode1);
      assertSame(jsonParser0, jsonParser1);
      assertSame(jsonParser1, jsonParser0);
      assertNotSame(intNode1, intNode0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(intNode1.equals((Object)intNode0));
      assertNotNull(intNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(64.0F, intNode0.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isDouble());
      assertEquals(64.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isLong());
      assertEquals(64L, intNode0.longValue());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((short)64, intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals(64, intNode0.intValue());
      assertEquals(0, intNode0.size());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertTrue(jsonParser0.isClosed());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser1.hasTextCharacters());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertEquals(0, jsonParser1.getTextOffset());
      assertNull(jsonParser1.getCurrentToken());
      assertEquals(0, jsonParser1.currentTokenId());
      assertEquals(0, jsonParser1.getFeatureMask());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertTrue(jsonParser1.isClosed());
      assertFalse(jsonParser1.canReadTypeId());
      assertFalse(jsonParser1.canReadObjectId());
      assertNull(jsonParser1.currentToken());
      assertNull(jsonParser1.getLastClearedToken());
      assertFalse(jsonParser1.canParseAsync());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertEquals(0, jsonParser1.getCurrentTokenId());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertFalse(jsonParser1.hasCurrentToken());
      assertTrue(intNode1.isInt());
      assertEquals(64L, intNode1.longValue());
      assertFalse(intNode1.isFloat());
      assertFalse(intNode1.isBigInteger());
      assertFalse(intNode1.booleanValue());
      assertFalse(intNode1.isBigDecimal());
      assertFalse(intNode1.isDouble());
      assertFalse(intNode1.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode1.asToken());
      assertEquals(64.0, intNode1.doubleValue(), 0.01);
      assertEquals((short)64, intNode1.shortValue());
      assertFalse(intNode1.isMissingNode());
      assertFalse(intNode1.isLong());
      assertTrue(intNode1.canConvertToInt());
      assertFalse(intNode1.isNaN());
      assertTrue(intNode1.isEmpty());
      assertTrue(intNode1.canConvertToLong());
      assertEquals(64.0F, intNode1.floatValue(), 0.01F);
      assertNull(intNode1.textValue());
      assertTrue(intNode1.isIntegralNumber());
      assertEquals(64, intNode1.intValue());
      assertFalse(intNode1.isObject());
      assertEquals(0, intNode1.size());
      assertFalse(intNode1.isShort());
      assertEquals(JsonNodeType.NUMBER, intNode1.getNodeType());
      assertEquals(JsonParser.NumberType.INT, intNode1.numberType());
      assertFalse(intNode1.isArray());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertNotNull(jsonFactory3);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(543, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = null;
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory3, defaultSerializerProvider0, (DefaultDeserializationContext) null);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(543, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(543, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(543, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.databind.ObjectReader", "com.fasterxml.jackson.databind.ObjectReader", (File) null);
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("com.fasterxml.jackson.databind.ObjectReader0com.fasterxml.jackson.databind.ObjectReader", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/com.fasterxml.jackson.databind.ObjectReader0com.fasterxml.jackson.databind.ObjectReader", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      
      try { 
        objectReader1.readValue(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotNull(objectReader0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class0 = HashMap.class;
      Class<POJONode> class1 = POJONode.class;
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      assertNotNull(mapType0);
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      
      MapType mapType1 = (MapType)mapType0.withTypeHandler(class1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(mapType1);
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      
      MapType mapType2 = (MapType)mapType1.withContentValueHandler(class0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertNotNull(mapType2);
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isInterface());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isCollectionLikeType());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.isConcrete());
      assertTrue(mapType2.hasHandlers());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) mapType0;
      javaTypeArray0[1] = (JavaType) mapType1;
      javaTypeArray0[2] = (JavaType) mapType0;
      javaTypeArray0[3] = (JavaType) mapType0;
      javaTypeArray0[4] = (JavaType) mapType1;
      javaTypeArray0[5] = (JavaType) mapType0;
      javaTypeArray0[6] = (JavaType) mapType0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      MapType mapType3 = mapType0.withContentTypeHandler(dataInputStream0);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType3, mapType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType2);
      assertTrue(mapType3.equals((Object)mapType1));
      assertTrue(mapType3.equals((Object)mapType0));
      assertTrue(mapType3.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType0.equals((Object)mapType2));
      assertNotNull(mapType3);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(mapType3.isPrimitive());
      assertFalse(mapType3.isJavaLangObject());
      assertFalse(mapType3.hasValueHandler());
      assertFalse(mapType3.isArrayType());
      assertFalse(mapType3.isAbstract());
      assertEquals(2, mapType3.containedTypeCount());
      assertFalse(mapType3.useStaticType());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(mapType3.isContainerType());
      assertTrue(mapType3.isConcrete());
      assertFalse(mapType3.isInterface());
      assertTrue(mapType3.hasHandlers());
      assertFalse(mapType3.isFinal());
      assertFalse(mapType3.isEnumType());
      assertTrue(mapType3.hasContentType());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      
      javaTypeArray0[7] = (JavaType) mapType3;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) mapType2, javaTypeArray0, javaTypeArray0[4]);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType0.equals((Object)mapType3));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType1.equals((Object)mapType3));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType2.equals((Object)mapType3));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertEquals(8, javaTypeArray0.length);
      assertNotNull(collectionType0);
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isInterface());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isCollectionLikeType());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.isConcrete());
      assertTrue(mapType2.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(javaTypeArray0[0]);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType0.equals((Object)mapType3));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType1.equals((Object)mapType3));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType2.equals((Object)mapType3));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertEquals(8, javaTypeArray0.length);
      assertNotNull(collectionType1);
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.isArrayType());
      assertEquals(0, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isInterface());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isCollectionLikeType());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.isConcrete());
      assertTrue(mapType2.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      MapType mapType4 = (MapType)mapType2.withKeyTypeHandler(collectionType1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(mapType0, mapType4);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType4);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType4, mapType2);
      assertNotSame(mapType4, mapType3);
      assertNotSame(mapType4, mapType0);
      assertNotSame(mapType4, mapType1);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType2, mapType4);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType0.equals((Object)mapType3));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType1.equals((Object)mapType3));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType4.equals((Object)mapType3));
      assertTrue(mapType4.equals((Object)mapType0));
      assertTrue(mapType4.equals((Object)mapType1));
      assertTrue(mapType4.equals((Object)mapType2));
      assertTrue(mapType2.equals((Object)mapType3));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertEquals(8, javaTypeArray0.length);
      assertNotNull(mapType4);
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.isArrayType());
      assertEquals(0, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType4.isCollectionLikeType());
      assertTrue(mapType4.isConcrete());
      assertFalse(mapType4.isInterface());
      assertTrue(mapType4.isContainerType());
      assertFalse(mapType4.isEnumType());
      assertFalse(mapType4.isFinal());
      assertTrue(mapType4.hasContentType());
      assertTrue(mapType4.isMapLikeType());
      assertFalse(mapType4.isPrimitive());
      assertTrue(mapType4.hasHandlers());
      assertFalse(mapType4.isJavaLangObject());
      assertFalse(mapType4.hasValueHandler());
      assertFalse(mapType4.isAbstract());
      assertFalse(mapType4.isArrayType());
      assertEquals(2, mapType4.containedTypeCount());
      assertFalse(mapType4.useStaticType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isInterface());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isCollectionLikeType());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.isConcrete());
      assertTrue(mapType2.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      // Undeclared exception!
      try { 
        objectReader0.forType((JavaType) mapType4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertNotNull(jsonFactory3);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonGenerator_Feature0, true);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertNotNull(jsonFactory4);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'I';
      charArray0[4] = 'C';
      charArray0[5] = '!';
      charArray0[6] = '2';
      charArray0[7] = '\\';
      charArray0[8] = '7';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory4.createParser(charArray0, 818, 818);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'H', 'x', 'x', 'I', 'C', '!', '2', '\\', '7'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      
      // Undeclared exception!
      try { 
        objectReader0._bindAndReadValues((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 818
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      assertNotNull(booleanNode0);
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isMissingNode());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isShort());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isObject());
      assertTrue(booleanNode0.asBoolean());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isBigInteger());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isIntegralNumber());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isArray());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertTrue(booleanNode0.booleanValue());
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertNotNull(nioPathDeserializer0);
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(nioPathDeserializer0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      ObjectReader objectReader2 = objectReader1.withValueToUpdate(booleanNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isMissingNode());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isShort());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isObject());
      assertTrue(booleanNode0.asBoolean());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isBigInteger());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isIntegralNumber());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isArray());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertTrue(booleanNode0.booleanValue());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader3 = objectReader1.with(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertEquals(0, deserializationFeatureArray0.length);
      assertNotNull(objectReader3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      String string0 = "";
      MappingIterator<BeanDeserializer> mappingIterator0 = objectReader3.readValues("");
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertEquals(0, deserializationFeatureArray0.length);
      assertNotNull(mappingIterator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertNotNull(nioPathDeserializer0);
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(nioPathDeserializer0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      
      LongNode longNode0 = new LongNode((-1028L));
      assertNotNull(longNode0);
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isFloatingPointNumber());
      assertTrue(longNode0.isEmpty());
      assertEquals((short) (-1028), longNode0.shortValue());
      assertNull(longNode0.textValue());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isBigDecimal());
      assertTrue(longNode0.isIntegralNumber());
      assertEquals((-1028), longNode0.intValue());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isMissingNode());
      assertEquals(0, longNode0.size());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isDouble());
      assertEquals((-1028L), longNode0.longValue());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isNaN());
      assertEquals((-1028.0F), longNode0.floatValue(), 0.01F);
      assertEquals((-1028.0), longNode0.doubleValue(), 0.01);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(longNode0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isFloatingPointNumber());
      assertTrue(longNode0.isEmpty());
      assertEquals((short) (-1028), longNode0.shortValue());
      assertNull(longNode0.textValue());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isBigDecimal());
      assertTrue(longNode0.isIntegralNumber());
      assertEquals((-1028), longNode0.intValue());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isMissingNode());
      assertEquals(0, longNode0.size());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isDouble());
      assertEquals((-1028L), longNode0.longValue());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isNaN());
      assertEquals((-1028.0F), longNode0.floatValue(), 0.01F);
      assertEquals((-1028.0), longNode0.doubleValue(), 0.01);
      
      MappingIterator<BeanDeserializer> mappingIterator0 = objectReader1.readValues("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(mappingIterator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isFloatingPointNumber());
      assertTrue(longNode0.isEmpty());
      assertEquals((short) (-1028), longNode0.shortValue());
      assertNull(longNode0.textValue());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isBigDecimal());
      assertTrue(longNode0.isIntegralNumber());
      assertEquals((-1028), longNode0.intValue());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isMissingNode());
      assertEquals(0, longNode0.size());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isDouble());
      assertEquals((-1028L), longNode0.longValue());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isNaN());
      assertEquals((-1028.0F), longNode0.floatValue(), 0.01F);
      assertEquals((-1028.0), longNode0.doubleValue(), 0.01);
      
      try { 
        MockURL.URL("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-25);
      try { 
        objectReader0.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: (byte[])\"\uFFFD\uFFFD\"; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[9];
      objectReaderArray0[0] = objectReader1;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader1;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader1;
      objectReaderArray0[7] = objectReader1;
      objectReaderArray0[8] = objectReader0;
      ObjectReader objectReader2 = objectReader1.withFormatDetection(objectReaderArray0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(9, objectReaderArray0.length);
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      try { 
        objectReader2.readValue(":u A(o[v{F<mM");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type java.lang.String with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      try { 
        objectReader1.readValue(".TK`mD");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type java.lang.String with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
      assertSame(objectReader0, objectReader1);
      assertSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectReader1, objectReader0);
      assertEquals(4, deserializationFeatureArray0.length);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializationFeature0, true);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      PipedReader pipedReader0 = new PipedReader(3);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = 'X';
      charArray0[2] = 'w';
      charArray0[3] = '\\';
      charArray0[4] = '[';
      charArray0[5] = 'Q';
      charArray0[1] = 'W';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, 2026, 0, true);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'^', 'W', 'w', '\\', '[', 'Q', '\u0000'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.disable(jsonParser_Feature0);
      assertSame(objectReader0, objectReader1);
      assertSame(deserializationFeature0, deserializationFeature1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'^', 'W', 'w', '\\', '[', 'Q', '\u0000'}, charArray0);
      assertNotNull(readerBasedJsonParser1);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      
      try { 
        objectReader1._initForReading(deserializationContext0, readerBasedJsonParser1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.forType((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      LinkedHashSet<ObjectReader> linkedHashSet0 = new LinkedHashSet<ObjectReader>();
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedHashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedHashSet0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)0;
      try { 
        objectReader1._detectBindAndClose(byteArray0, (-273), 835);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNotNull(objectNode0);
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1749);
      assertNotNull(arrayNode0);
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      ArrayNode arrayNode1 = arrayNode0.add(integer0);
      assertSame(arrayNode0, arrayNode1);
      assertSame(arrayNode1, arrayNode0);
      assertNotNull(arrayNode1);
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(1, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isEmpty());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertNull(arrayNode1.textValue());
      assertEquals(1, arrayNode1.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isInt());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.booleanValue());
      
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
      assertEquals(512, mapperFeature0.getMask());
      assertTrue(mapperFeature0.enabledByDefault());
      assertEquals(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS, mapperFeature0);
      
      IntNode intNode0 = IntNode.valueOf(1749);
      assertNotNull(intNode0);
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals(1749, intNode0.intValue());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isNaN());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(1749.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isEmpty());
      assertEquals((short)1749, intNode0.shortValue());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(1749L, intNode0.longValue());
      assertEquals(1749.0F, intNode0.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.canConvertToLong());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isShort());
      
      // Undeclared exception!
      try { 
        objectReader0._bind(jsonParser0, intNode0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ArrayDeque<ObjectReader> arrayDeque0 = new ArrayDeque<ObjectReader>();
      assertFalse(arrayDeque0.contains(objectReader0));
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(arrayDeque0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(arrayDeque0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(arrayDeque0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      assertNull(deserializationConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        objectReader0._new(objectReader1, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      assertFalse(linkedList0.contains(objectReader0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedList0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, linkedList0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedList0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, linkedList0.size());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 64);
      assertNotNull(pipedReader0);
      
      try { 
        objectReader1.readTree((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type java.io.PipedReader with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      PriorityQueue<ObjectReader> priorityQueue0 = new PriorityQueue<ObjectReader>();
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(priorityQueue0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, priorityQueue0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(priorityQueue0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, priorityQueue0.size());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) pipedInputStream0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(priorityQueue0.contains(objectReader1));
      assertNotNull(dataFormatReaders_Match0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      
      try { 
        objectReader1._detectBindAndClose(dataFormatReaders_Match0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndCloseAsTree((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      assertFalse(linkedList0.contains(objectReader0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedList0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, linkedList0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedList0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, linkedList0.size());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte) (-40);
      try { 
        objectReader1.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type [B with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Class<Integer> class0 = Integer.class;
      ObjectReader objectReader2 = objectReader1.forType(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)1;
      try { 
        objectReader1.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type [B with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      String string0 = "";
      String string1 = "com.fasterxml.jackson.databind.ObjectReader";
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertNotNull(jsonFactoryBuilder0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.highestNonEscapedChar(1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertNotNull(jsonFactoryBuilder1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(127, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder1.highestNonEscapedChar());
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(127, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'U';
      charArray0[2] = 'i';
      charArray0[3] = '?';
      charArray0[4] = '|';
      charArray0[5] = '*';
      charArray0[6] = 'a';
      charArray0[7] = 'A';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'N', 'U', 'i', '?', '|', '*', 'a', 'A'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(127, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(127, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      assertNotNull(mapLikeType0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      assertNotNull(referenceType0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isAbstract());
      
      ReferenceType referenceType1 = referenceType0.withTypeHandler("com.fasterxml.jackson.databind.ObjectReader");
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertNotNull(referenceType1);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.hasHandlers());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isAbstract());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ArrayList> class1 = ArrayList.class;
      Class<LongNode> class2 = LongNode.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class2);
      assertNotNull(collectionType0);
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      
      ReferenceType referenceType2 = referenceType1.withValueHandler(collectionType0);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertNotNull(referenceType2);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.hasHandlers());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isAbstract());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isContainerType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isAbstract());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isPrimitive());
      assertTrue(referenceType2.hasHandlers());
      assertFalse(referenceType2.useStaticType());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isJavaLangObject());
      assertTrue(referenceType2.hasContentType());
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(referenceType2, referenceType2);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertNotNull(collectionLikeType0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.hasHandlers());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isAbstract());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isContainerType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isAbstract());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isPrimitive());
      assertTrue(referenceType2.hasHandlers());
      assertFalse(referenceType2.useStaticType());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isJavaLangObject());
      assertTrue(referenceType2.hasContentType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isArrayType());
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((JsonParser) readerBasedJsonParser0, (JavaType) collectionLikeType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.CollectionType cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      assertSame(tokenFilter1, tokenFilter0);
      assertNotNull(tokenFilter1);
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      
      NullNode nullNode0 = NullNode.instance;
      assertNotNull(nullNode0);
      assertFalse(nullNode0.isArray());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isObject());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.isLong());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals("null", nullNode0.asText());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isFloat());
      assertTrue(nullNode0.isEmpty());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isBigInteger());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertNotNull(nioPathDeserializer0);
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, nioPathDeserializer0, false);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertNotNull(byteQuadsCanonicalizer0);
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(91);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(byteQuadsCanonicalizer1);
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      
      byte[] byteArray0 = new byte[0];
      TextBuffer textBuffer0 = iOContext0.constructTextBuffer();
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(textBuffer0);
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.size());
      assertTrue(textBuffer0.hasTextAsCharacters());
      assertEquals(0, textBuffer0.getTextOffset());
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2379), (InputStream) null, objectReader0, byteQuadsCanonicalizer1, byteArray0, (-2190), (-1953), true);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals((-2379), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      
      Class<ArrayType> class0 = ArrayType.class;
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) uTF8StreamJsonParser0, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2190
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      PriorityQueue<ObjectReader> priorityQueue0 = new PriorityQueue<ObjectReader>();
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(priorityQueue0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, priorityQueue0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(priorityQueue0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, priorityQueue0.size());
      
      try { 
        objectReader1.readValues("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type java.lang.String with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertNotNull(baseSettings0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null, (ConfigOverrides) null);
      assertNotNull(deserializationConfig0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.useRootWrapping());
      
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, (SimpleMixInResolver) null);
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertNotNull(deserializationConfig1);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertFalse(deserializationConfig1.useRootWrapping());
      
      ObjectReader objectReader1 = objectReader0._with(deserializationConfig1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertFalse(deserializationConfig1.useRootWrapping());
      
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      
      try { 
        objectReader2.readTree("com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'com': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer\"; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(0, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1718);
      assertNotNull(arrayNode0);
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      assertEquals(131072, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, mapperFeature0);
      
      IntNode intNode0 = IntNode.valueOf(1718);
      assertNotNull(intNode0);
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(1718.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isLong());
      assertEquals(0, intNode0.size());
      assertEquals(1718.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isShort());
      assertEquals(1718, intNode0.intValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isFloat());
      assertEquals(1718L, intNode0.longValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.isInt());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals((short)1718, intNode0.shortValue());
      assertFalse(intNode0.booleanValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isNaN());
      
      ArrayNode arrayNode1 = (ArrayNode)objectReader0._bind(jsonParser0, intNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(1718.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isLong());
      assertEquals(0, intNode0.size());
      assertEquals(1718.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isShort());
      assertEquals(1718, intNode0.intValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isFloat());
      assertEquals(1718L, intNode0.longValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.isInt());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals((short)1718, intNode0.shortValue());
      assertFalse(intNode0.booleanValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isNaN());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isShort());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isMissingNode());
      assertTrue(arrayNode1.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isBigDecimal());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertFalse(arrayNode1.isInt());
      
      MissingNode missingNode0 = (MissingNode)objectReader0._bindAndCloseAsTree(jsonParser0);
      assertNotSame(arrayNode0, arrayNode1);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertNotNull(missingNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertTrue(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(0, missingNode0.size());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertEquals("", missingNode0.asText());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isIntegralNumber());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isDouble());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isArray());
      
      MappingIterator<DeserializationConfig> mappingIterator0 = objectReader0._bindAndReadValues(jsonParser0);
      assertNotSame(arrayNode0, arrayNode1);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertNotNull(mappingIterator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertTrue(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      
      ObjectReader objectReader1 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        placeholderForType0.withTypeHandler(objectReader1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add(objectReader0);
      assertTrue(hashSet0.contains(objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertTrue(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      boolean boolean1 = hashSet0.add(objectReader0);
      assertTrue(hashSet0.contains(objectReader0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(boolean1);
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertTrue(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      ObjectReader objectReader2 = objectReader1.forType(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader2));
      assertTrue(hashSet0.contains(objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      assertFalse(linkedList0.contains(objectReader0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedList0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, linkedList0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedList0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, linkedList0.size());
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      assertNotNull(list0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      TypeBindings typeBindings1 = TypeBindings.create(class1, list0);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotNull(typeBindings1);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isConcrete());
      
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      assertNotNull(decimalNode0);
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isEmpty());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isArray());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isLong());
      assertEquals(0, decimalNode0.size());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(decimalNode0);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotNull(javaType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isConcrete());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isEmpty());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isArray());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isLong());
      assertEquals(0, decimalNode0.size());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.isInterface());
      assertFalse(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isContainerType());
      assertEquals(0, javaType0.containedTypeCount());
      
      ObjectReader objectReader2 = objectReader1.forType(javaType0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedList0.contains(objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, linkedList0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isConcrete());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isEmpty());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isArray());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isLong());
      assertEquals(0, decimalNode0.size());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.isInterface());
      assertFalse(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isContainerType());
      assertEquals(0, javaType0.containedTypeCount());
      
      // Undeclared exception!
      try { 
        objectReader1.readValue((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3012), 637);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-83), (byte) (-1), (byte) (-48), (byte)0, (byte)86, (byte)23, (byte)86, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(637, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertNotNull(nioPathDeserializer0);
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      ObjectReader objectReader1 = objectMapper0.readerWithView(class0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader2 = objectReader1.withValueToUpdate(objectMapper0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectReader objectReader3 = objectReader2.with(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertEquals(3, deserializationFeatureArray0.length);
      assertNotNull(objectReader3);
      assertEquals(0, objectMapper0.mixInCount());
      
      try { 
        objectReader2.readValues("-5");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Conflicting setter definitions for property \"config\": com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params) vs com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params)
         //  at [Source: (String)\"-5\"; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      PriorityQueue<ObjectReader> priorityQueue0 = new PriorityQueue<ObjectReader>();
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(priorityQueue0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, priorityQueue0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(priorityQueue0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, priorityQueue0.size());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)32;
      try { 
        objectReader0.readValue(byteArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Unsupported UCS-4 endianness (2143) detected
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      TextNode textNode0 = jsonNodeFactory0.textNode("");
      assertNotNull(textNode0);
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isObject());
      assertTrue(textNode0.isEmpty());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.booleanValue());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isLong());
      assertEquals("", textNode0.asText());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isFloatingPointNumber());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals("", textNode0.textValue());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isMissingNode());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(textNode0);
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isObject());
      assertTrue(textNode0.isEmpty());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.booleanValue());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isLong());
      assertEquals("", textNode0.asText());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isFloatingPointNumber());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals("", textNode0.textValue());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isMissingNode());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      
      TypeReference<PlaceholderForType> typeReference0 = (TypeReference<PlaceholderForType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.readValue(jsonParser0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNotNull(objectNode0);
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.booleanValue());
      
      try { 
        objectReader0.readValue("[ClassStack (self-refs: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'ClassStack': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"[ClassStack (self-refs: \"; line: 1, column: 12]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNotNull(objectNode0);
      assertTrue(objectNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloat());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1718);
      assertNotNull(arrayNode0);
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      assertNotNull(filteringParserDelegate0);
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_CREATORS;
      assertEquals(8, mapperFeature0.getMask());
      assertTrue(mapperFeature0.enabledByDefault());
      assertEquals(MapperFeature.AUTO_DETECT_CREATORS, mapperFeature0);
      
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, 1718);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isBigInteger());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertEquals(0, arrayNode1.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isShort());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.booleanValue());
      assertNull(arrayNode1.numberType());
      
      JsonNode jsonNode0 = objectReader0._bindAndCloseAsTree(filteringParserDelegate0);
      assertNotSame(arrayNode0, jsonNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(jsonNode0, arrayNode1);
      assertNotSame(jsonNode0, arrayNode0);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertTrue(jsonNode0.equals((Object)arrayNode1));
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertTrue(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertTrue(filteringParserDelegate0.hasCurrentToken());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate0.getCurrentToken());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(4, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(4, filteringParserDelegate0.currentTokenId());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isDouble());
      assertEquals(0, jsonNode0.size());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals("", jsonNode0.asText());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[1];
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      ObjectReader objectReader2 = objectReader1.forType(class0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      try { 
        objectReader1.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      ObjectReader objectReader2 = objectReader1.forType(class0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      assertNotNull(objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      
      ObjectNode objectNode1 = objectNode0.put((String) null, 642.24451113);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isIntegralNumber());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertNotNull(set0);
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      
      ObjectNode objectNode2 = objectNode1.retain((Collection<String>) set0);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertNotNull(objectNode2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.textValue());
      assertEquals(0, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isIntegralNumber());
      assertTrue(objectNode1.isObject());
      assertTrue(objectNode1.isEmpty());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.booleanValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isMissingNode());
      assertNull(objectNode2.numberType());
      assertTrue(objectNode2.isEmpty());
      assertEquals(0, objectNode2.size());
      assertFalse(objectNode2.isBigDecimal());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isArray());
      
      String string0 = "";
      ObjectNode objectNode3 = objectNode2.put("", (-948L));
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode0);
      assertFalse(set0.contains(""));
      assertNotNull(objectNode3);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isIntegralNumber());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.booleanValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode3.isEmpty());
      assertNull(objectNode3.numberType());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isLong());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isShort());
      assertEquals(1, objectNode3.size());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isMissingNode());
      assertNull(objectNode3.textValue());
      
      try { 
        objectReader2.readValue((JsonNode) objectNode3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type com.fasterxml.jackson.databind.node.ObjectNode with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 3);
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isInt());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isInt());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      assertNotNull(filteringParserDelegate0);
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isInt());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      assertEquals(131072, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, mapperFeature0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class0 = HashMap.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      assertNotNull(mapType0);
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      
      MapLikeType mapLikeType0 = mapType0.withStaticTyping();
      assertNotSame(mapType0, mapLikeType0);
      assertNotSame(mapLikeType0, mapType0);
      assertTrue(mapLikeType0.equals((Object)mapType0));
      assertNotNull(mapLikeType0);
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isAbstract());
      
      try { 
        objectReader1._bind(jsonParser0, mapLikeType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Conflicting setter definitions for property \"config\": com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params) vs com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) null, (TypeReference<DOMDeserializer.DocumentDeserializer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      assertFalse(linkedList0.contains(objectReader0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedList0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, linkedList0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedList0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, linkedList0.size());
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-7);
      try { 
        objectReader1.readTree(byteArray0, (int) (byte)0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type [B with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      // Undeclared exception!
      try { 
        objectReader1.readTree((byte[]) null, 64, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      try { 
        objectReader1.readTree("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type java.lang.String with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`I4_XCM%&nbxHt*");
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1718);
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.currentTokenId());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      assertNotNull(filteringParserDelegate0);
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.currentTokenId());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(131072, mapperFeature0.getMask());
      assertEquals(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, mapperFeature0);
      
      ArrayNode arrayNode1 = (ArrayNode)objectReader0._bind(filteringParserDelegate0, mapperFeature0);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(4, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(131072, mapperFeature0.getMask());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isInt());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isBigDecimal());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isMissingNode());
      assertEquals(0, arrayNode1.size());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      SimpleType simpleType0 = (SimpleType)typeFactory0.constructType((Type) class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      assertNotNull(referenceType0);
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withStaticTyping();
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertNotNull(referenceType1);
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.useStaticType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isEnumType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasContentType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      try { 
        objectReader0.readValues((JsonParser) filteringParserDelegate0, (ResolvedType) referenceType1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a Value deserializer for type [reference type, class com.fasterxml.jackson.databind.introspect.BasicBeanDescription<com.fasterxml.jackson.databind.node.NullNode><[simple type, class com.fasterxml.jackson.databind.node.NullNode]>]
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isArray());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        objectReader1.readValue((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      assertFalse(linkedList0.contains(objectReader0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedList0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, linkedList0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedList0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, linkedList0.size());
      
      ObjectReader objectReader2 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedList0.contains(objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        objectReader1.readValue((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-82);
      try { 
        objectReader0.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: (byte[])\"\uFFFD\uFFFD\uFFFD\"; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", (String) null, 64, "Cannot detect format from input, does not look like any of detectable formats ", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getHost());
      assertEquals("Cannot detect format from input, does not look like any of detectable formats ", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getAuthority());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("Cannot detect format from input, does not look like any of detectable formats ", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      
      // Undeclared exception!
      try { 
        objectReader1.readValues(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      assertFalse(linkedList0.contains(objectReader0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedList0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, linkedList0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedList0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        objectReader1.readValues((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      assertNotNull(booleanNode0);
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.booleanValue());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isArray());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isMissingNode());
      assertEquals(0, booleanNode0.size());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertTrue(booleanNode0.asBoolean());
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertNotNull(nioPathDeserializer0);
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)52;
      try { 
        objectReader1.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      
      FormatFeature formatFeature0 = null;
      // Undeclared exception!
      try { 
        objectReader0.without((FormatFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = 'q';
      charArray0[4] = 'I';
      charArray0[5] = '/';
      charArray0[6] = '2';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser(charArray0, (-3171), (-3171));
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'7', '1', '1', 'q', 'I', '/', '2'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature1, true);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertNotNull(jsonFactory3);
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      
      TSFBuilder<?, ?> tSFBuilder0 = jsonFactory1.rebuild();
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(tSFBuilder0);
      assertEquals(15, tSFBuilder0.factoryFeaturesMask());
      assertEquals(31, tSFBuilder0.streamWriteFeatures());
      assertEquals(8193, tSFBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory4 = jsonFactory2.disable(jsonGenerator_Feature0);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory4);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory5 = jsonFactory3.enable(jsonParser_Feature2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature2);
      assertNotSame(jsonParser_Feature2, jsonParser_Feature1);
      assertNotSame(jsonParser_Feature2, jsonParser_Feature0);
      assertSame(jsonFactory2, jsonFactory5);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory4);
      assertSame(jsonFactory5, jsonFactory2);
      assertNotSame(jsonFactory5, jsonFactory0);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature2);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature2));
      assertFalse(jsonParser_Feature2.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature2.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory5.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature2));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertNotNull(jsonFactory5);
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(8195, jsonFactory3.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8195, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8195, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory5.getFormatGeneratorFeatures());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertEquals(8195, jsonFactory5.getParserFeatures());
      assertTrue(jsonFactory5.canParseAsync());
      assertEquals(0, jsonFactory5.getFormatParserFeatures());
      assertEquals(31, jsonFactory5.getGeneratorFeatures());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.requiresCustomCodec());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)jsonFactory2.createParser("Cannot detect format from input, does not look like any of detectable formats ");
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature2);
      assertSame(jsonFactory2, jsonFactory5);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(readerBasedJsonParser1.equals((Object)readerBasedJsonParser0));
      assertNotNull(readerBasedJsonParser1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8195, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8195, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(8195, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      
      // Undeclared exception!
      try { 
        objectReader0._new((ObjectReader) null, jsonFactory5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 2763, "", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(":2763", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals(2763, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      
      // Undeclared exception!
      try { 
        objectReader1.readValue(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      // Undeclared exception!
      try { 
        objectReader1.readValue((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertNotNull(objectNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      List<JsonNode> list0 = objectNode0.findParents("4m>KBm\"", (List<JsonNode>) vector0);
      assertNotNull(list0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, list0);
      assertNotNull(arrayNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      
      ValueNode valueNode0 = arrayNode0.pojoNode(vector0);
      assertNotNull(valueNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, valueNode0.asToken());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isBigInteger());
      assertFalse(valueNode0.isObject());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isShort());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isLong());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isDouble());
      assertEquals(JsonNodeType.POJO, valueNode0.getNodeType());
      assertFalse(valueNode0.isMissingNode());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isIntegralNumber());
      assertTrue(valueNode0.isEmpty());
      
      try { 
        objectReader0.treeToValue((TreeNode) valueNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.core.filter.FilteringParserDelegate` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.util.Vector`: incompatible types
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(concurrentHashMap0);
      assertNotNull(injectableValues_Std0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      assertNotNull(floatNode0);
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.booleanValue());
      assertEquals((short)0, floatNode0.shortValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isDouble());
      assertNull(floatNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(0L, floatNode0.longValue());
      assertFalse(floatNode0.isLong());
      assertEquals(0, floatNode0.intValue());
      assertEquals(0.0, floatNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(0.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isBigInteger());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertTrue(floatNode0.canConvertToLong());
      
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("[number with %d characters]", (Object) floatNode0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotNull(injectableValues_Std1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.booleanValue());
      assertEquals((short)0, floatNode0.shortValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isDouble());
      assertNull(floatNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(0L, floatNode0.longValue());
      assertFalse(floatNode0.isLong());
      assertEquals(0, floatNode0.intValue());
      assertEquals(0.0, floatNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(0.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isBigInteger());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertTrue(floatNode0.canConvertToLong());
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.booleanValue());
      assertEquals((short)0, floatNode0.shortValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isDouble());
      assertNull(floatNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(0L, floatNode0.longValue());
      assertFalse(floatNode0.isLong());
      assertEquals(0, floatNode0.intValue());
      assertEquals(0.0, floatNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(0.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isBigInteger());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertTrue(floatNode0.canConvertToLong());
      
      InjectableValues injectableValues0 = objectReader0.getInjectableValues();
      assertSame(injectableValues_Std0, injectableValues0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std1, injectableValues0);
      assertSame(injectableValues0, injectableValues_Std1);
      assertSame(injectableValues0, injectableValues_Std0);
      assertNotNull(injectableValues0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.booleanValue());
      assertEquals((short)0, floatNode0.shortValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isDouble());
      assertNull(floatNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(0L, floatNode0.longValue());
      assertFalse(floatNode0.isLong());
      assertEquals(0, floatNode0.intValue());
      assertEquals(0.0, floatNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(0.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isBigInteger());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertTrue(floatNode0.canConvertToLong());
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertNotNull(jsonFactory0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(287, jsonFactory2.getGeneratorFeatures());
      assertEquals(8449, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      
      Object object0 = concurrentHashMap0.put("JSON", objectMapper0);
      assertNull(object0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("JSON");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DoubleNode doubleNode0 = DoubleNode.valueOf((-2276.619571191875));
      assertNotNull(doubleNode0);
      assertTrue(doubleNode0.isEmpty());
      assertEquals((-2276), doubleNode0.intValue());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isObject());
      assertEquals((short) (-2276), doubleNode0.shortValue());
      assertEquals((-2276L), doubleNode0.longValue());
      assertFalse(doubleNode0.isShort());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isNaN());
      assertEquals((-2276.6196F), doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isFloat());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals((-2276.619571191875), doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isLong());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isMissingNode());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(doubleNode0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(doubleNode0.isEmpty());
      assertEquals((-2276), doubleNode0.intValue());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isObject());
      assertEquals((short) (-2276), doubleNode0.shortValue());
      assertEquals((-2276L), doubleNode0.longValue());
      assertFalse(doubleNode0.isShort());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isNaN());
      assertEquals((-2276.6196F), doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isFloat());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals((-2276.619571191875), doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isLong());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isMissingNode());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(doubleNode0);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(doubleNode0.isEmpty());
      assertEquals((-2276), doubleNode0.intValue());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isObject());
      assertEquals((short) (-2276), doubleNode0.shortValue());
      assertEquals((-2276L), doubleNode0.longValue());
      assertFalse(doubleNode0.isShort());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isNaN());
      assertEquals((-2276.6196F), doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isFloat());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals((-2276.619571191875), doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isLong());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(doubleNode0.isEmpty());
      assertEquals((-2276), doubleNode0.intValue());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isObject());
      assertEquals((short) (-2276), doubleNode0.shortValue());
      assertEquals((-2276L), doubleNode0.longValue());
      assertFalse(doubleNode0.isShort());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isNaN());
      assertEquals((-2276.6196F), doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isFloat());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals((-2276.619571191875), doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isLong());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.overrideStdFeatures(2813, 2813);
      assertNotSame(objectReader0, objectReader1);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(filteringParserDelegate1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(doubleNode0.isEmpty());
      assertEquals((-2276), doubleNode0.intValue());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isObject());
      assertEquals((short) (-2276), doubleNode0.shortValue());
      assertEquals((-2276L), doubleNode0.longValue());
      assertFalse(doubleNode0.isShort());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isNaN());
      assertEquals((-2276.6196F), doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isFloat());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals((-2276.619571191875), doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isLong());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(2813, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(2813, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(2813, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      
      DoubleNode doubleNode1 = (DoubleNode)objectReader1._bind(filteringParserDelegate1, (Object) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(doubleNode0, doubleNode1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertNotSame(doubleNode1, doubleNode0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(doubleNode1.equals((Object)doubleNode0));
      assertNotNull(doubleNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(doubleNode0.isEmpty());
      assertEquals((-2276), doubleNode0.intValue());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isObject());
      assertEquals((short) (-2276), doubleNode0.shortValue());
      assertEquals((-2276L), doubleNode0.longValue());
      assertFalse(doubleNode0.isShort());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isNaN());
      assertEquals((-2276.6196F), doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isFloat());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals((-2276.619571191875), doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.booleanValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isLong());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(8, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(2813, jsonParser0.getFeatureMask());
      assertTrue(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(8, jsonParser0.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonParser0.currentToken());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(2813, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, filteringParserDelegate1.getLastClearedToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(2813, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals((-2276L), doubleNode1.longValue());
      assertFalse(doubleNode1.isLong());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode1.numberType());
      assertFalse(doubleNode1.isMissingNode());
      assertEquals(0, doubleNode1.size());
      assertEquals((-2276.619571191875), doubleNode1.doubleValue(), 0.01);
      assertEquals(JsonNodeType.NUMBER, doubleNode1.getNodeType());
      assertFalse(doubleNode1.booleanValue());
      assertEquals((-2276.6196F), doubleNode1.floatValue(), 0.01F);
      assertFalse(doubleNode1.isArray());
      assertFalse(doubleNode1.isIntegralNumber());
      assertEquals((-2276), doubleNode1.intValue());
      assertFalse(doubleNode1.isNaN());
      assertFalse(doubleNode1.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode1.asToken());
      assertFalse(doubleNode1.isObject());
      assertNull(doubleNode1.textValue());
      assertTrue(doubleNode1.isFloatingPointNumber());
      assertTrue(doubleNode1.isDouble());
      assertFalse(doubleNode1.isShort());
      assertTrue(doubleNode1.canConvertToLong());
      assertFalse(doubleNode1.isFloat());
      assertEquals((short) (-2276), doubleNode1.shortValue());
      assertTrue(doubleNode1.isEmpty());
      assertFalse(doubleNode1.isInt());
      assertFalse(doubleNode1.isBigInteger());
      assertTrue(doubleNode1.canConvertToInt());
      
      try { 
        objectReader0.readTree("kR");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'kR': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"kR\"; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isShort());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add(objectReader0);
      assertTrue(hashSet0.contains(objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertTrue(hashSet0.contains(objectReader0));
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        objectReader1.readValue((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotNull(jsonFactory3);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      
      JsonFactory jsonFactory4 = jsonFactory2.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory0);
      assertNotNull(jsonFactory4);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertEquals("JSON", jsonFactory4.getRootValueSeparator());
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) null);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotNull(objectReader0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<MissingNode> class0 = MissingNode.class;
      ObjectReader objectReader1 = objectReader0.withType(class0);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      
      HashMap<BasicBeanDescription, POJONode> hashMap0 = new HashMap<BasicBeanDescription, POJONode>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ObjectReader objectReader2 = objectReader1.withAttributes(hashMap0);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader2;
      objectReaderArray0[3] = objectReader2;
      objectReaderArray0[4] = objectReader1;
      objectReaderArray0[5] = objectReader2;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(6, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte) (-40);
      byteArray0[8] = (byte)125;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(9, byteArray0.length);
      assertEquals(6, objectReaderArray0.length);
      assertArrayEquals(new byte[] {(byte)40, (byte)1, (byte)102, (byte)1, (byte)1, (byte)0, (byte)127, (byte) (-40), (byte)125}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(9, byteArray0.length);
      assertEquals(6, objectReaderArray0.length);
      assertArrayEquals(new byte[] {(byte)40, (byte)1, (byte)102, (byte)1, (byte)1, (byte)0, (byte)127, (byte) (-40), (byte)125}, byteArray0);
      assertNull(jsonParser0);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>((byte)1, 83);
      assertNotNull(lRUMap0);
      
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<HashMap> class1 = HashMap.class;
      Class<DeserializationConfig> class2 = DeserializationConfig.class;
      MapType mapType0 = typeFactory1.constructMapType(class1, class2, class0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(mapType0);
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      
      MapType mapType1 = mapType0.withStaticTyping();
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(mapType1);
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isArrayType());
      assertEquals(2, mapType1.containedTypeCount());
      
      MapType mapType2 = mapType1.withKeyType(mapType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType1));
      assertFalse(mapType2.equals((Object)mapType0));
      assertNotNull(mapType2);
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isArrayType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType2.isFinal());
      assertFalse(mapType2.isInterface());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.isPrimitive());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.hasHandlers());
      assertTrue(mapType2.isMapLikeType());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isAbstract());
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader1._prefetchRootDeserializer(mapType1);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(typeFactory0, typeFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType1.equals((Object)mapType2));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNull(jsonDeserializer0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isArrayType());
      assertEquals(2, mapType1.containedTypeCount());
      
      // Undeclared exception!
      try { 
        objectReader2._unwrapAndDeserialize((JsonParser) null, defaultDeserializationContext_Impl0, mapType2, (JsonDeserializer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertNotNull(nonBlockingJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(nonBlockingJsonParser0, (TokenFilter) null, false, false);
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.overrideStdFeatures(1, 1);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertNotNull(filteringParserDelegate1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(8193, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      
      Class<ObjectNode> class0 = ObjectNode.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      assertNotNull(resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      
      // Undeclared exception!
      objectReader0._bind(filteringParserDelegate0, resolvedRecursiveType0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      try { 
        objectReader0.readValues((InputStream) mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      assertFalse(vector0.contains(objectReader0));
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(vector0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(vector0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      ObjectReader objectReader2 = objectReader1.forType(class0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(vector0.contains(objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        objectReader2.readTree((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FloatNode floatNode0 = new FloatNode(0.0F);
      assertNotNull(floatNode0);
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(0.0, floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isObject());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isFloat());
      assertNull(floatNode0.textValue());
      assertEquals(0, floatNode0.intValue());
      assertFalse(floatNode0.isShort());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(0L, floatNode0.longValue());
      assertEquals(0, floatNode0.size());
      assertEquals(0.0F, floatNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isInt());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.isMissingNode());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(95);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(placeholderForType0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      // Undeclared exception!
      try { 
        objectReader0.readTree((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-81);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)0, (byte)0, (byte)0, (byte)86, (byte)0, (byte)97, (byte) (-81)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      
      try { 
        objectReader0.readValues((InputStream) byteArrayInputStream0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Invalid UTF-32 character 0xaf600056 (above 0x0010ffff) at char #1, byte #7)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      int int0 = 1744;
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      assertNotNull(objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1744);
      assertNotNull(arrayNode0);
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      
      IntNode intNode0 = IntNode.valueOf(1744);
      assertNotNull(intNode0);
      assertTrue(intNode0.canConvertToLong());
      assertNull(intNode0.textValue());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isArray());
      assertEquals(1744.0F, intNode0.floatValue(), 0.01F);
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(1744.0, intNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isBigInteger());
      assertEquals((short)1744, intNode0.shortValue());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.booleanValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.canConvertToInt());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isNaN());
      assertEquals(1744L, intNode0.longValue());
      assertEquals(1744, intNode0.intValue());
      
      Object object0 = objectReader0._bind(jsonParser0, jsonNodeFactory0);
      assertSame(jsonNodeFactory0, object0);
      assertSame(object0, jsonNodeFactory0);
      assertNotNull(object0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(JsonToken.START_ARRAY, jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      
      try { 
        objectReader0._bindAndCloseAsTree(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.JsonNode` out of END_ARRAY token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0._bindAsTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-32);
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Unsupported UCS-4 endianness (2143) detected
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "6OB)a4gV?Za");
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[2];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(2, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(2, objectReaderArray0.length);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.WEAK_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(2, objectReaderArray0.length);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.WEAK_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(2, objectReaderArray0.length);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.WEAK_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonToken jsonToken0 = objectReader0._initForReading(defaultDeserializationContext_Impl0, uTF8StreamJsonParser0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(2, objectReaderArray0.length);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.WEAK_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertEquals(6, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(6, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(JsonToken.VALUE_STRING, uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertTrue(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertTrue(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_STRING, uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(2, uTF8StreamJsonParser0.getTokenColumnNr());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(jsonToken0.isBoolean());
      assertTrue(jsonToken0.isScalarValue());
      assertFalse(jsonToken0.isStructStart());
      assertNull(jsonToken0.asString());
      assertEquals(6, jsonToken0.id());
      assertFalse(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isStructEnd());
      assertEquals(JsonToken.VALUE_STRING, jsonToken0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      
      // Undeclared exception!
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertNotNull(jsonFactory0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      MockFile mockFile0 = new MockFile("\")", "");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("Cannot detect format from input, does not look like any of detectable formats ", "Cannot detect format from input, does not look like any of detectable formats ", (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertEquals("/experiment/\")", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\")", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/\")/Cannot detect format from input, does not look like any of detectable formats 0Cannot detect format from input, does not look like any of detectable formats ", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/experiment/\")", file0.getParent());
      assertEquals("Cannot detect format from input, does not look like any of detectable formats 0Cannot detect format from input, does not look like any of detectable formats ", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("/experiment/\")", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\")", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/\")/Cannot detect format from input, does not look like any of detectable formats 0Cannot detect format from input, does not look like any of detectable formats ", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/experiment/\")", file0.getParent());
      assertEquals("Cannot detect format from input, does not look like any of detectable formats 0Cannot detect format from input, does not look like any of detectable formats ", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) uTF8StreamJsonParser0, (JsonParser) uTF8StreamJsonParser0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(jsonParserSequence0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("/experiment/\")", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\")", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/\")/Cannot detect format from input, does not look like any of detectable formats 0Cannot detect format from input, does not look like any of detectable formats ", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/experiment/\")", file0.getParent());
      assertEquals("Cannot detect format from input, does not look like any of detectable formats 0Cannot detect format from input, does not look like any of detectable formats ", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      
      JsonParserSequence jsonParserSequence1 = (JsonParserSequence)jsonParserSequence0.skipChildren();
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertSame(jsonParserSequence0, jsonParserSequence1);
      assertSame(jsonParserSequence1, jsonParserSequence0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(jsonParserSequence1);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("/experiment/\")", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\")", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/\")/Cannot detect format from input, does not look like any of detectable formats 0Cannot detect format from input, does not look like any of detectable formats ", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/experiment/\")", file0.getParent());
      assertEquals("Cannot detect format from input, does not look like any of detectable formats 0Cannot detect format from input, does not look like any of detectable formats ", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence1.requiresCustomCodec());
      assertEquals(2, jsonParserSequence1.containedParsersCount());
      assertEquals(0, jsonParserSequence1.getFormatFeatures());
      assertEquals(8193, jsonParserSequence1.getFeatureMask());
      assertFalse(jsonParserSequence1.canReadTypeId());
      assertFalse(jsonParserSequence1.canReadObjectId());
      assertFalse(jsonParserSequence1.canParseAsync());
      
      MissingNode missingNode0 = (MissingNode)objectReader0._bindAndCloseAsTree(jsonParserSequence1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertSame(jsonParserSequence0, jsonParserSequence1);
      assertSame(jsonParserSequence1, jsonParserSequence0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(missingNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("/experiment/\")", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\")", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/\")/Cannot detect format from input, does not look like any of detectable formats 0Cannot detect format from input, does not look like any of detectable formats ", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/experiment/\")", file0.getParent());
      assertEquals("Cannot detect format from input, does not look like any of detectable formats 0Cannot detect format from input, does not look like any of detectable formats ", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertTrue(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence1.requiresCustomCodec());
      assertEquals(2, jsonParserSequence1.containedParsersCount());
      assertEquals(0, jsonParserSequence1.getFormatFeatures());
      assertEquals(8193, jsonParserSequence1.getFeatureMask());
      assertFalse(jsonParserSequence1.canReadTypeId());
      assertFalse(jsonParserSequence1.canReadObjectId());
      assertFalse(jsonParserSequence1.canParseAsync());
      assertFalse(missingNode0.isIntegralNumber());
      assertNull(missingNode0.numberType());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isBigInteger());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(0, missingNode0.size());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isDouble());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isArray());
      
      byte[] byteArray0 = new byte[12];
      try { 
        objectReader0.readValues(byteArray0, (-1295), (-1295));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertNotNull(missingNode0);
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isDouble());
      assertTrue(missingNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isShort());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.booleanValue());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1577);
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      assertNotSame(arrayNode0, jsonNode0);
      assertNotSame(jsonNode0, arrayNode0);
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(4, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isMissingNode());
      assertTrue(jsonNode0.isArray());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertNull(jsonNode0.textValue());
      assertEquals("", jsonNode0.asText());
      
      TypeReference<ReferenceType> typeReference0 = (TypeReference<ReferenceType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.withType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0._findRootDeserializer((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      try { 
        objectReader0.readValues((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (ByteArrayInputStream); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isMissingNode());
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1718);
      assertNotNull(arrayNode0);
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode0);
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      assertSame(tokenFilter1, tokenFilter0);
      assertNotNull(tokenFilter1);
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      
      TokenFilter tokenFilter2 = tokenFilter1.includeElement(2813);
      assertSame(tokenFilter1, tokenFilter0);
      assertSame(tokenFilter1, tokenFilter2);
      assertSame(tokenFilter2, tokenFilter0);
      assertSame(tokenFilter2, tokenFilter1);
      assertNotNull(tokenFilter2);
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter2.includeRawValue());
      assertTrue(tokenFilter2.includeBinary());
      assertTrue(tokenFilter2.includeNull());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.overrideStdFeatures(1718, 0);
      assertSame(tokenFilter0, tokenFilter2);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertNotNull(filteringParserDelegate1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertEquals(0, filteringParserDelegate1.getFeatureMask());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertNull(filteringParserDelegate1.currentToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
      
      Locale.FilteringMode locale_FilteringMode1 = (Locale.FilteringMode)objectReader0._bind(filteringParserDelegate1, locale_FilteringMode0);
      assertSame(tokenFilter0, tokenFilter2);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.getCurrentToken());
      assertEquals(2, jsonParser0.getCurrentTokenId());
      assertEquals(2, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_OBJECT, filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertEquals(JsonToken.END_OBJECT, filteringParserDelegate1.getLastClearedToken());
      assertEquals(0, filteringParserDelegate1.getFeatureMask());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertNull(filteringParserDelegate1.currentToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode1);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      MappingIterator<BeanDeserializer> mappingIterator0 = objectReader0.readValues((InputStream) byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(mappingIterator0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findRootDeserializer(defaultDeserializationContext_Impl0);
      assertNotNull(jsonDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(AccessPattern.ALWAYS_NULL, jsonDeserializer0.getNullAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      
      ObjectNode objectNode1 = (ObjectNode)objectReader0.createObjectNode();
      assertNotSame(objectNode1, objectNode0);
      assertTrue(objectNode1.equals((Object)objectNode0));
      assertNotNull(objectNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isEmpty());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isShort());
      assertNull(objectNode1.textValue());
      assertEquals(0, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose((DataFormatReaders.Match) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNull(formatSchema0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      try { 
        objectReader1.readValue((JsonParser) readerBasedJsonParser0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[1];
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add(objectReader0);
      assertTrue(hashSet0.contains(objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertTrue(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withOptimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertTrue(hashSet0.contains(objectReader0));
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0, (-3669), 0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertTrue(hashSet0.contains(objectReader0));
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      
      try { 
        objectReader1._reportUnkownFormat(dataFormatReaders0, dataFormatReaders_Match0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats [JSON]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      JsonNode jsonNode0 = objectReader0.readTree((byte[]) null, (-32768), 0);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      
      JsonNode jsonNode1 = objectReader0.createArrayNode();
      assertNotNull(jsonNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode1.isMissingNode());
      assertEquals(0, jsonNode1.size());
      assertTrue(jsonNode1.isArray());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertFalse(jsonNode1.isDouble());
      assertTrue(jsonNode1.isEmpty());
      assertFalse(jsonNode1.isShort());
      assertFalse(jsonNode1.isLong());
      assertNull(jsonNode1.numberType());
      assertFalse(jsonNode1.isObject());
      assertFalse(jsonNode1.booleanValue());
      assertEquals(JsonToken.START_ARRAY, jsonNode1.asToken());
      assertFalse(jsonNode1.isInt());
      assertFalse(jsonNode1.isBigDecimal());
      assertFalse(jsonNode1.isBigInteger());
      assertFalse(jsonNode1.isFloat());
      assertNull(jsonNode1.textValue());
      assertEquals("", jsonNode1.asText());
      assertFalse(jsonNode1.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, jsonNode1.getNodeType());
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(jsonNode1);
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode1.isMissingNode());
      assertEquals(0, jsonNode1.size());
      assertTrue(jsonNode1.isArray());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertFalse(jsonNode1.isDouble());
      assertTrue(jsonNode1.isEmpty());
      assertFalse(jsonNode1.isShort());
      assertFalse(jsonNode1.isLong());
      assertNull(jsonNode1.numberType());
      assertFalse(jsonNode1.isObject());
      assertFalse(jsonNode1.booleanValue());
      assertEquals(JsonToken.START_ARRAY, jsonNode1.asToken());
      assertFalse(jsonNode1.isInt());
      assertFalse(jsonNode1.isBigDecimal());
      assertFalse(jsonNode1.isBigInteger());
      assertFalse(jsonNode1.isFloat());
      assertNull(jsonNode1.textValue());
      assertEquals("", jsonNode1.asText());
      assertFalse(jsonNode1.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, jsonNode1.getNodeType());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      
      Class<TextNode> class0 = TextNode.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertNotNull(placeholderForType0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      javaTypeArray0[6] = (JavaType) placeholderForType0;
      javaTypeArray0[7] = (JavaType) placeholderForType0;
      javaTypeArray0[8] = (JavaType) placeholderForType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[5]);
      assertEquals(9, javaTypeArray0.length);
      assertNotNull(referenceType0);
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      
      ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, typeBindings0);
      assertEquals(9, javaTypeArray0.length);
      assertNotNull(arrayType0);
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.isArrayType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      
      POJONode pOJONode0 = new POJONode(javaTypeArray0[0]);
      assertEquals(9, javaTypeArray0.length);
      assertNotNull(pOJONode0);
      assertNull(pOJONode0.textValue());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isShort());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isObject());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isDouble());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isLong());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isFloatingPointNumber());
      
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(pOJONode0);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertEquals(9, javaTypeArray0.length);
      assertNotNull(arrayType1);
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.isArrayType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isEnumType());
      assertNull(pOJONode0.textValue());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isShort());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isObject());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isDouble());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isLong());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.isConcrete());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.hasHandlers());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isMapLikeType());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      
      // Undeclared exception!
      try { 
        objectReader0.readValues(jsonParser0, (ResolvedType) arrayType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.node.POJONode cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withPerCallAttribute(objectMapper0, objectMapper0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes1);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.with(contextAttributes1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      assertNotNull(mapType0);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      
      POJONode pOJONode0 = new POJONode(objectMapper0);
      assertNotNull(pOJONode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.booleanValue());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isMissingNode());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isFloat());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isLong());
      assertEquals(0, pOJONode0.size());
      assertTrue(pOJONode0.isEmpty());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isDouble());
      
      MapType mapType1 = mapType0.withContentValueHandler(pOJONode0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(mapType1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.booleanValue());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isMissingNode());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isFloat());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isLong());
      assertEquals(0, pOJONode0.size());
      assertTrue(pOJONode0.isEmpty());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isDouble());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isEnumType());
      
      ObjectReader objectReader2 = objectMapper0.reader(contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      
      MapLikeType mapLikeType0 = mapType1.withValueHandler(objectReader2);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapLikeType0);
      assertNotSame(mapType1, mapLikeType0);
      assertNotSame(mapType1, mapType0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(mapLikeType0, mapType1);
      assertNotSame(mapLikeType0, mapType0);
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertTrue(mapLikeType0.equals((Object)mapType0));
      assertTrue(mapLikeType0.equals((Object)mapType1));
      assertNotNull(mapLikeType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.booleanValue());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isMissingNode());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isFloat());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isLong());
      assertEquals(0, pOJONode0.size());
      assertTrue(pOJONode0.isEmpty());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isDouble());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.hasValueHandler());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isArrayType());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(123);
      assertNotNull(placeholderForType0);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      
      MapLikeType mapLikeType1 = mapLikeType0.withKeyValueHandler(placeholderForType0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapLikeType0);
      assertNotSame(mapType0, mapLikeType1);
      assertNotSame(mapType1, mapLikeType1);
      assertNotSame(mapType1, mapLikeType0);
      assertNotSame(mapType1, mapType0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(mapLikeType0, mapType1);
      assertNotSame(mapLikeType0, mapType0);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotSame(mapLikeType1, mapType0);
      assertNotSame(mapLikeType1, mapType1);
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType0.equals((Object)mapLikeType0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType1.equals((Object)mapLikeType0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertTrue(mapLikeType0.equals((Object)mapType0));
      assertTrue(mapLikeType0.equals((Object)mapType1));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertTrue(mapLikeType1.equals((Object)mapType1));
      assertTrue(mapLikeType1.equals((Object)mapType0));
      assertNotNull(mapLikeType1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.booleanValue());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isMissingNode());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isFloat());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isLong());
      assertEquals(0, pOJONode0.size());
      assertTrue(pOJONode0.isEmpty());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isDouble());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.hasValueHandler());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isArrayType());
      assertFalse(mapLikeType1.isInterface());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isPrimitive());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isFinal());
      assertFalse(mapLikeType1.isEnumType());
      assertTrue(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isAbstract());
      assertTrue(mapLikeType1.hasHandlers());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertFalse(mapLikeType1.useStaticType());
      assertEquals(2, mapLikeType1.containedTypeCount());
      
      // Undeclared exception!
      try { 
        objectReader1.withType((Type) mapLikeType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.node.POJONode cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertNotNull(baseSettings0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertNotNull(simpleMixInResolver0);
      assertEquals(0, simpleMixInResolver0.localSize());
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertNotNull(deserializationConfig0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertEquals(0, deserializationConfig0.mixInCount());
      
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, simpleMixInResolver0);
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertNotNull(deserializationConfig1);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertEquals(0, deserializationConfig1.mixInCount());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.useRootWrapping());
      
      ObjectReader objectReader1 = new ObjectReader(objectMapper0, deserializationConfig1);
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertEquals(0, deserializationConfig1.mixInCount());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.useRootWrapping());
      
      ObjectReader objectReader2 = objectReader0._new(objectReader1, deserializationConfig1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertEquals(0, deserializationConfig1.mixInCount());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.useRootWrapping());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        objectReader1.readTree((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1718);
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(2813);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(tokenFilter1, tokenFilter0);
      assertNotNull(tokenFilter1);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.overrideStdFeatures(1718, 1718);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertNotNull(filteringParserDelegate1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(1718, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(1718, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertEquals(1718, filteringParserDelegate1.getFeatureMask());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertNull(filteringParserDelegate1.currentToken());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      ArrayNode arrayNode1 = (ArrayNode)objectReader0._bind(filteringParserDelegate1, objectNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertNotSame(arrayNode1, arrayNode0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(1718, jsonParser0.getFeatureMask());
      assertEquals(4, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(1718, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertEquals(1718, filteringParserDelegate1.getFeatureMask());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate1.getLastClearedToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertNull(filteringParserDelegate1.currentToken());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isInt());
      assertTrue(arrayNode1.isArray());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertEquals(0, arrayNode1.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isBigInteger());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isShort());
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      MappingIterator<BeanDeserializer> mappingIterator0 = objectReader0.readValues((InputStream) byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(mappingIterator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, byteArrayInputStream0.available());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findRootDeserializer(defaultDeserializationContext_Impl0);
      assertNotNull(jsonDeserializer0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      
      MissingNode missingNode0 = objectReader0.readTree((JsonParser) filteringParserDelegate1);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertNotNull(missingNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isDouble());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isBigInteger());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(0, missingNode0.size());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(1718, jsonParser0.getFeatureMask());
      assertEquals(4, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertTrue(jsonParser0.isClosed());
      assertNull(jsonParser0.getLastClearedToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(1718, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertEquals(1718, filteringParserDelegate1.getFeatureMask());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate1.getLastClearedToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertNull(filteringParserDelegate1.currentToken());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertFalse(filteringParserDelegate1.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      assertNotNull(booleanNode0);
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isArray());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertTrue(booleanNode0.isEmpty());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isIntegralNumber());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isFloat());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isLong());
      assertEquals("true", booleanNode0.asText());
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 64);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        objectReader1.readValues((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      
      try { 
        objectReader0.readValues((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (ByteArrayInputStream); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((byte[]) null, 52, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (DataInputStream); line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.databind.ObjectReader", false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext1);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-433), pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals((-433), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNull(formatSchema0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals((-433), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      boolean boolean0 = objectReader1.isEnabled(jsonParser_Feature0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      
      ObjectReader objectReader2 = new ObjectReader(objectReader0, jsonFactory3);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      assertFalse(boolean0);
      
      JsonNode jsonNode0 = objectReader2.readTree("");
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      
      ObjectReader objectReader3 = objectReader1.withView(class0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader3);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertSame(objectReader3, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertNotNull(objectReader3);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader4 = objectMapper0.reader();
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader3);
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertNotNull(objectReader4);
      assertEquals(0, objectMapper0.mixInCount());
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue(">?<whI>g)a=Q2:<C5", (Object) class0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotNull(injectableValues_Std1);
      
      ObjectReader objectReader5 = new ObjectReader(objectReader0, jsonFactory0);
      assertFalse(objectReader5.equals((Object)objectReader0));
      assertFalse(objectReader5.equals((Object)objectReader1));
      assertFalse(objectReader5.equals((Object)objectReader4));
      assertFalse(objectReader5.equals((Object)objectReader2));
      assertFalse(objectReader5.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader4));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(objectReader5);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      TypeReference<Integer> typeReference0 = (TypeReference<Integer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      ObjectReader objectReader6 = objectReader3.withType(typeReference0);
      assertNotSame(objectReader0, objectReader5);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader6);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader6, objectReader5);
      assertNotSame(objectReader6, objectReader1);
      assertNotSame(objectReader6, objectReader3);
      assertNotSame(objectReader6, objectReader4);
      assertNotSame(objectReader6, objectReader0);
      assertNotSame(objectReader6, objectReader2);
      assertNotSame(objectReader1, objectReader5);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader6);
      assertNotSame(objectReader1, objectReader4);
      assertSame(objectReader1, objectReader3);
      assertNotSame(objectReader3, objectReader6);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader4);
      assertNotSame(objectReader3, objectReader5);
      assertFalse(objectReader0.equals((Object)objectReader5));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader4));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader6.equals((Object)objectReader5));
      assertFalse(objectReader6.equals((Object)objectReader1));
      assertFalse(objectReader6.equals((Object)objectReader3));
      assertFalse(objectReader6.equals((Object)objectReader4));
      assertFalse(objectReader6.equals((Object)objectReader0));
      assertFalse(objectReader6.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader5));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader4));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader4));
      assertFalse(objectReader3.equals((Object)objectReader5));
      assertNotNull(objectReader6);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      IntNode intNode0 = (IntNode)objectReader0.readTree("-5");
      assertNotNull(intNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((short) (-5), intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertEquals((-5.0), intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.booleanValue());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isShort());
      assertEquals((-5), intNode0.intValue());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isInt());
      assertEquals((-5.0F), intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.isEmpty());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isNaN());
      assertEquals((-5L), intNode0.longValue());
      assertFalse(intNode0.isMissingNode());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertNotNull(objectNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("-5"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ObjectNode objectNode1 = objectNode0.remove((Collection<String>) linkedHashSet0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(linkedHashSet0.contains("-5"));
      assertNotNull(objectNode1);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(0, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertTrue(objectNode1.isEmpty());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectNode1, false);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertFalse(linkedHashSet0.contains("-5"));
      assertNotNull(iOContext0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(0, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertTrue(objectNode1.isEmpty());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'V';
      charArray0[2] = 'J';
      charArray0[3] = 'v';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-2675), 1, true);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(linkedHashSet0.contains("-5"));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'1', 'V', 'J', 'v'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(0, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertTrue(objectNode1.isEmpty());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(linkedHashSet0.contains("-5"));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'1', 'V', 'J', 'v'}, charArray0);
      assertNotNull(readerBasedJsonParser1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(0, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertTrue(objectNode1.isEmpty());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(9, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(9, readerBasedJsonParser1.getFeatureMask());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      
      TextNode textNode0 = new TextNode("");
      assertNotNull(textNode0);
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isShort());
      assertEquals("", textNode0.asText());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isDouble());
      assertEquals("", textNode0.textValue());
      assertFalse(textNode0.isLong());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isBigDecimal());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.booleanValue());
      
      // Undeclared exception!
      try { 
        objectReader0._bind(readerBasedJsonParser1, textNode0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2675
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      File file0 = MockFile.createTempFile("D[Z']02Vn7]hZ", "No value type configured for ObjectReader");
      assertNotNull(file0);
      assertEquals("/tmp/D[Z']02Vn7]hZ0No value type configured for ObjectReader", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("D[Z']02Vn7]hZ0No value type configured for ObjectReader", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      
      try { 
        objectReader0.readValue(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.PackageVersion");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readValue((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'com': was expecting ('true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      
      Float float0 = new Float(3.1742496F);
      assertNotNull(float0);
      assertEquals(3.1742496F, (float)float0, 0.01F);
      
      ObjectNode objectNode1 = objectNode0.put("8w2`Nh(r_>_3%", float0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isInt());
      assertEquals(1, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1731);
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.overrideStdFeatures(1731, 1731);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertNotNull(filteringParserDelegate1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(1731, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(1731, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertEquals(1731, filteringParserDelegate1.getFeatureMask());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertFalse(filteringParserDelegate1.canParseAsync());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-73);
      MappingIterator<DataInputStream> mappingIterator0 = objectReader0.readValues(byteArray0, (int) 1, (-4068));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte) (-1), (byte)88, (byte) (-73)}, byteArray0);
      assertNotNull(mappingIterator0);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[1];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      PipedReader pipedReader0 = new PipedReader(1);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectReader0, charsToNameCanonicalizer1);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser1);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(7, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(7, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      
      try { 
        objectReader0._bindAsTree(readerBasedJsonParser1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertNotNull(objectNode0);
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      
      ObjectNode objectNode1 = objectNode0.put(" ;$6=6Y*a42r=L%J\"=R", 0L);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      
      ObjectNode objectNode2 = objectNode1.with("OBJECT");
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertNotNull(objectNode2);
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(2, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertEquals(2, objectNode1.size());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertEquals(0, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isDouble());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertNull(objectNode2.numberType());
      assertTrue(objectNode2.isEmpty());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      
      ArrayNode arrayNode0 = objectNode1.putArray(" ;$6=6Y*a42r=L%J\"=R");
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertNotNull(arrayNode0);
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(2, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertEquals(2, objectNode1.size());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      
      ArrayNode arrayNode1 = jsonNodeFactory0.arrayNode();
      assertNotSame(arrayNode1, arrayNode0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertFalse(arrayNode1.isLong());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isShort());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertEquals("", arrayNode1.asText());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.booleanValue());
      
      ObjectNode objectNode3 = arrayNode1.addObject();
      assertNotSame(arrayNode1, arrayNode0);
      assertNotSame(objectNode3, objectNode1);
      assertNotSame(objectNode3, objectNode0);
      assertNotSame(objectNode3, objectNode2);
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertFalse(objectNode3.equals((Object)objectNode1));
      assertTrue(objectNode3.equals((Object)objectNode2));
      assertFalse(objectNode3.equals((Object)objectNode0));
      assertNotNull(objectNode3);
      assertFalse(arrayNode1.isLong());
      assertEquals(1, arrayNode1.size());
      assertFalse(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertEquals("", arrayNode1.asText());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.booleanValue());
      assertNull(objectNode3.numberType());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertTrue(objectNode3.isEmpty());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isMissingNode());
      assertNull(objectNode3.textValue());
      assertEquals("", objectNode3.asText());
      assertEquals(0, objectNode3.size());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isLong());
      
      ArrayNode arrayNode2 = objectNode3.withArray("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s");
      assertNotSame(arrayNode1, arrayNode2);
      assertNotSame(arrayNode1, arrayNode0);
      assertNotSame(objectNode3, objectNode1);
      assertNotSame(objectNode3, objectNode0);
      assertNotSame(objectNode3, objectNode2);
      assertNotSame(arrayNode2, arrayNode0);
      assertNotSame(arrayNode2, arrayNode1);
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertFalse(objectNode3.equals((Object)objectNode1));
      assertFalse(objectNode3.equals((Object)objectNode0));
      assertFalse(objectNode3.equals((Object)objectNode2));
      assertTrue(arrayNode2.equals((Object)arrayNode0));
      assertFalse(arrayNode2.equals((Object)arrayNode1));
      assertNotNull(arrayNode2);
      assertFalse(arrayNode1.isLong());
      assertEquals(1, arrayNode1.size());
      assertFalse(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertEquals("", arrayNode1.asText());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(objectNode3.isEmpty());
      assertNull(objectNode3.numberType());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.isShort());
      assertEquals(1, objectNode3.size());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isMissingNode());
      assertNull(objectNode3.textValue());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isLong());
      assertFalse(arrayNode2.isBigInteger());
      assertFalse(arrayNode2.isFloat());
      assertNull(arrayNode2.textValue());
      assertFalse(arrayNode2.isBigDecimal());
      assertNull(arrayNode2.numberType());
      assertFalse(arrayNode2.isObject());
      assertFalse(arrayNode2.isInt());
      assertTrue(arrayNode2.isEmpty());
      assertFalse(arrayNode2.isDouble());
      assertFalse(arrayNode2.isShort());
      assertEquals(0, arrayNode2.size());
      assertFalse(arrayNode2.isLong());
      assertFalse(arrayNode2.booleanValue());
      assertFalse(arrayNode2.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode2.asToken());
      assertTrue(arrayNode2.isArray());
      assertFalse(arrayNode2.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode2.getNodeType());
      assertFalse(arrayNode2.isFloatingPointNumber());
      assertEquals("", arrayNode2.asText());
      
      Class<SimpleType> class0 = SimpleType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      
      SimpleType simpleType1 = simpleType0.withTypeHandler(objectReader0);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType1, simpleType0);
      assertTrue(simpleType1.equals((Object)simpleType0));
      assertNotNull(simpleType1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType1.isEnumType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isMapLikeType());
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.isFinal());
      assertTrue(simpleType1.hasHandlers());
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(simpleType1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType1, simpleType0);
      assertNotSame(objectReader1, objectReader0);
      assertTrue(simpleType0.equals((Object)simpleType1));
      assertTrue(simpleType1.equals((Object)simpleType0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType1.isEnumType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isMapLikeType());
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.isFinal());
      assertTrue(simpleType1.hasHandlers());
      
      JsonParser jsonParser0 = objectReader1.treeAsTokens(objectNode0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode3);
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType1, simpleType0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectNode0.equals((Object)objectNode3));
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertTrue(simpleType0.equals((Object)simpleType1));
      assertTrue(simpleType1.equals((Object)simpleType0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(2, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType1.isEnumType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isMapLikeType());
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.isFinal());
      assertTrue(simpleType1.hasHandlers());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectNode objectNode4 = arrayNode0.insertObject(0);
      assertNotSame(objectNode4, objectNode3);
      assertNotSame(objectNode4, objectNode0);
      assertNotSame(objectNode4, objectNode2);
      assertNotSame(objectNode4, objectNode1);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode3);
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode0, objectNode4);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode3);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode1, objectNode4);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode0, arrayNode2);
      assertFalse(objectNode4.equals((Object)objectNode3));
      assertFalse(objectNode4.equals((Object)objectNode0));
      assertTrue(objectNode4.equals((Object)objectNode2));
      assertFalse(objectNode4.equals((Object)objectNode1));
      assertFalse(objectNode0.equals((Object)objectNode3));
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode3));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(arrayNode0.equals((Object)arrayNode1));
      assertFalse(arrayNode0.equals((Object)arrayNode2));
      assertNotNull(objectNode4);
      assertFalse(objectNode4.isFloatingPointNumber());
      assertFalse(objectNode4.isFloat());
      assertFalse(objectNode4.booleanValue());
      assertFalse(objectNode4.isArray());
      assertEquals("", objectNode4.asText());
      assertFalse(objectNode4.isIntegralNumber());
      assertFalse(objectNode4.isDouble());
      assertFalse(objectNode4.isLong());
      assertTrue(objectNode4.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode4.getNodeType());
      assertNull(objectNode4.numberType());
      assertFalse(objectNode4.isBigDecimal());
      assertNull(objectNode4.textValue());
      assertEquals(0, objectNode4.size());
      assertFalse(objectNode4.isShort());
      assertTrue(objectNode4.isObject());
      assertFalse(objectNode4.isInt());
      assertFalse(objectNode4.isBigInteger());
      assertFalse(objectNode4.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode4.asToken());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(2, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertEquals(2, objectNode1.size());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      
      ArrayNode arrayNode3 = objectNode4.putArray("");
      assertNotSame(objectNode4, objectNode3);
      assertNotSame(objectNode4, objectNode0);
      assertNotSame(objectNode4, objectNode2);
      assertNotSame(objectNode4, objectNode1);
      assertNotSame(arrayNode3, arrayNode2);
      assertNotSame(arrayNode3, arrayNode1);
      assertNotSame(arrayNode3, arrayNode0);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode3);
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode0, objectNode4);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode3);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode1, objectNode4);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode0, arrayNode2);
      assertNotSame(arrayNode0, arrayNode3);
      assertFalse(objectNode4.equals((Object)objectNode3));
      assertFalse(objectNode4.equals((Object)objectNode0));
      assertFalse(objectNode4.equals((Object)objectNode2));
      assertFalse(objectNode4.equals((Object)objectNode1));
      assertTrue(arrayNode3.equals((Object)arrayNode2));
      assertFalse(arrayNode3.equals((Object)arrayNode1));
      assertFalse(arrayNode3.equals((Object)arrayNode0));
      assertFalse(objectNode0.equals((Object)objectNode3));
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode0.equals((Object)objectNode4));
      assertFalse(objectNode1.equals((Object)objectNode3));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode4));
      assertFalse(arrayNode0.equals((Object)arrayNode1));
      assertFalse(arrayNode0.equals((Object)arrayNode2));
      assertNotNull(arrayNode3);
      assertFalse(objectNode4.isFloatingPointNumber());
      assertFalse(objectNode4.isFloat());
      assertFalse(objectNode4.booleanValue());
      assertFalse(objectNode4.isArray());
      assertEquals("", objectNode4.asText());
      assertFalse(objectNode4.isIntegralNumber());
      assertFalse(objectNode4.isDouble());
      assertFalse(objectNode4.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode4.getNodeType());
      assertNull(objectNode4.numberType());
      assertFalse(objectNode4.isBigDecimal());
      assertNull(objectNode4.textValue());
      assertFalse(objectNode4.isShort());
      assertEquals(1, objectNode4.size());
      assertFalse(objectNode4.isEmpty());
      assertTrue(objectNode4.isObject());
      assertFalse(objectNode4.isInt());
      assertFalse(objectNode4.isBigInteger());
      assertFalse(objectNode4.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode4.asToken());
      assertEquals(0, arrayNode3.size());
      assertTrue(arrayNode3.isArray());
      assertNull(arrayNode3.textValue());
      assertFalse(arrayNode3.isBigInteger());
      assertFalse(arrayNode3.isMissingNode());
      assertFalse(arrayNode3.isInt());
      assertFalse(arrayNode3.isShort());
      assertFalse(arrayNode3.isBigDecimal());
      assertNull(arrayNode3.numberType());
      assertFalse(arrayNode3.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode3.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode3.getNodeType());
      assertFalse(arrayNode3.booleanValue());
      assertFalse(arrayNode3.isLong());
      assertEquals("", arrayNode3.asText());
      assertFalse(arrayNode3.isFloat());
      assertFalse(arrayNode3.isIntegralNumber());
      assertFalse(arrayNode3.isDouble());
      assertTrue(arrayNode3.isEmpty());
      assertFalse(arrayNode3.isFloatingPointNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(2, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertEquals(2, objectNode1.size());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParser0, deserializationContext0, simpleType1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type START_OBJECT) found after value (bound as `com.fasterxml.jackson.databind.type.SimpleType`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Lg>U");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("Lg>U", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("Lg>U", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory1.createNonBlockingByteArrayParser();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(nonBlockingJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("Lg>U", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("Lg>U", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isClosed());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(mapType0);
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      
      Class<CollectionType> class1 = CollectionType.class;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) mapType0, (JavaType[]) null, (JavaType) mapType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(collectionType0);
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.isJavaLangObject());
      
      MapType mapType1 = mapType0.withKeyType(collectionType0);
      assertNotSame(mapType1, mapType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertFalse(mapType1.equals((Object)mapType0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(mapType1);
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.isJavaLangObject());
      
      try { 
        objectReader0._verifyNoTrailingTokens(nonBlockingJsonParser0, defaultDeserializationContext_Impl0, mapType1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type NOT_AVAILABLE) found after value (bound as `java.util.HashMap`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      
      Float float0 = new Float(3.1742496F);
      assertNotNull(float0);
      assertEquals(3.1742496F, (float)float0, 0.01F);
      
      ObjectNode objectNode1 = objectNode0.put("8w2`Nh(r_>_3%", float0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloat());
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1731);
      assertNotNull(arrayNode0);
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.currentTokenId());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.overrideStdFeatures(1731, 1731);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertNotNull(filteringParserDelegate1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(1731, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(1731, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertEquals(1731, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      ArrayNode arrayNode1 = (ArrayNode)objectReader0._bind(filteringParserDelegate1, objectNode0);
      assertSame(objectNode0, objectNode1);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertNotSame(arrayNode1, arrayNode0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(1731, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(4, jsonParser0.currentTokenId());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(1731, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertEquals(1731, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate1.getLastClearedToken());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertTrue(arrayNode1.isArray());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isObject());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.booleanValue());
      assertNull(arrayNode1.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isFloat());
      assertEquals("", arrayNode1.asText());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      JsonNode jsonNode0 = objectReader1.readTree((InputStream) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isArray());
      
      // Undeclared exception!
      try { 
        objectReader0._bindAndClose((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      
      Float float0 = new Float(3.1742496F);
      assertNotNull(float0);
      assertEquals(3.1742496F, (float)float0, 0.01F);
      
      ObjectNode objectNode1 = objectNode0.put("8w2`Nh(r_>_3%", float0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode1.isMissingNode());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1731);
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.currentToken());
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.overrideStdFeatures(1731, 1731);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertNotNull(filteringParserDelegate1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(1731, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(1731, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.currentToken());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertEquals(1731, filteringParserDelegate1.getFeatureMask());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("t/");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = (MockFile)MockFile.createTempFile("8w2`Nh(r_>_3%", "t/", (File) mockFile0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("t", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("t", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/experiment/t", mockFile1.getParent());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("8w2`Nh(r_>_3%0t", mockFile1.getName());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertEquals("/experiment/t/8w2`Nh(r_>_3%0t", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      
      MappingIterator<ShortNode> mappingIterator0 = objectReader0.readValues((File) mockFile1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mappingIterator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("t", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("t", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/experiment/t", mockFile1.getParent());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("8w2`Nh(r_>_3%0t", mockFile1.getName());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertEquals("/experiment/t/8w2`Nh(r_>_3%0t", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, tokenFilter0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertNotNull(byteQuadsCanonicalizer0);
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 3, dataInputStream0, objectMapper0, byteQuadsCanonicalizer0, 727);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(uTF8DataInputJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertFalse(uTF8DataInputJsonParser0.canParseAsync());
      assertNull(uTF8DataInputJsonParser0.currentToken());
      assertFalse(uTF8DataInputJsonParser0.hasTextCharacters());
      assertFalse(uTF8DataInputJsonParser0.isNaN());
      assertEquals(0, uTF8DataInputJsonParser0.currentTokenId());
      assertNull(uTF8DataInputJsonParser0.getCurrentToken());
      assertEquals(0, uTF8DataInputJsonParser0.getCurrentTokenId());
      assertFalse(uTF8DataInputJsonParser0.canReadTypeId());
      assertEquals(1, uTF8DataInputJsonParser0.getTokenColumnNr());
      assertEquals(3, uTF8DataInputJsonParser0.getFeatureMask());
      assertFalse(uTF8DataInputJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8DataInputJsonParser0.getCurrentName());
      assertFalse(uTF8DataInputJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8DataInputJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8DataInputJsonParser0.getFormatFeatures());
      assertNull(uTF8DataInputJsonParser0.getLastClearedToken());
      assertEquals(0L, uTF8DataInputJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8DataInputJsonParser0.canReadObjectId());
      assertFalse(uTF8DataInputJsonParser0.isClosed());
      assertEquals(1, uTF8DataInputJsonParser0.getTokenLineNr());
      assertFalse(uTF8DataInputJsonParser0.hasCurrentToken());
      
      try { 
        objectReader0._bindAndReadValues((JsonParser) uTF8DataInputJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u02D7' (code 727 / 0x2d7)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      PriorityQueue<ObjectReader> priorityQueue0 = new PriorityQueue<ObjectReader>();
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      File file0 = MockFile.createTempFile("JSON", "Cannot use source of type ");
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("JSON0Cannot use source of type ", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/JSON0Cannot use source of type ", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(file0);
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("JSON0Cannot use source of type ", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/JSON0Cannot use source of type ", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("JSON0Cannot use source of type ", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/JSON0Cannot use source of type ", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      
      try { 
        objectReader0._initForReading(defaultDeserializationContext_Impl0, uTF8StreamJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)3, (byte)3);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-3), byteArrayInputStream0.available());
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals((-3), byteArrayInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(filteringParserDelegate0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals((-3), byteArrayInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNull(formatSchema0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals((-3), byteArrayInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      try { 
        objectReader0._initForReading(defaultDeserializationContext_Impl1, uTF8StreamJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      assertSame(tokenFilter1, tokenFilter0);
      assertNotNull(tokenFilter1);
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeNull());
      
      ObjectReader objectReader2 = new ObjectReader(objectReader0, tokenFilter1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeNull());
      
      Integer integer0 = new Integer((-3351));
      assertNotNull(integer0);
      assertEquals((-3351), (int)integer0);
      
      ObjectReader objectReader3 = objectMapper0.readerForUpdating(integer0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      MappingIterator<ResolvedRecursiveType> mappingIterator0 = objectReader3.readValues(byteArray0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(mappingIterator0);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.booleanValue());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(9217, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(9217, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(9217, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertNotNull(arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, arrayNode0, true);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 64);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(mockPrintStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 64, objectMapper0, mockPrintStream0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(64, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      CharacterEscapes characterEscapes0 = uTF8JsonGenerator0.getCharacterEscapes();
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNull(characterEscapes0);
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(64, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes((CharacterEscapes) null);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory3);
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(9217, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(9217, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(9217, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(9217, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'o';
      charArray0[2] = 'e';
      charArray0[3] = ']';
      charArray0[4] = '7';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser(charArray0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'(', 'o', 'e', ']', '7'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(9217, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(9217, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(9217, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(9217, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(9217, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      try { 
        objectReader0._verifyNoTrailingTokens(readerBasedJsonParser0, defaultDeserializationContext_Impl0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('(' (code 40)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (char[])\"(oe]7\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<LongNode> class0 = LongNode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.treeAsTokens((TreeNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(objectMapper0, objectMapper1);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)52;
      byteArray0[0] = (byte)52;
      try { 
        objectReader0.readTree(byteArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Unexpected EOF in the middle of a 4-byte UTF-32 char: got 1, needed 4, at char #1, byte #5)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      ArrayDeque<ObjectReader> arrayDeque0 = new ArrayDeque<ObjectReader>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(arrayDeque0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertNotNull(baseSettings0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      assertNotNull(basicClassIntrospector0);
      
      BaseSettings baseSettings1 = baseSettings0.withClassIntrospector(basicClassIntrospector0);
      assertNotSame(baseSettings0, baseSettings1);
      assertNotSame(baseSettings1, baseSettings0);
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertNotNull(baseSettings1);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      assertNotNull(simpleMixInResolver0);
      assertEquals(0, simpleMixInResolver0.localSize());
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings1, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertNotNull(serializationConfig0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertEquals(0, serializationConfig0.mixInCount());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      
      SimpleMixInResolver simpleMixInResolver1 = new SimpleMixInResolver(serializationConfig0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertNotNull(simpleMixInResolver1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertEquals(0, serializationConfig0.mixInCount());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(0, simpleMixInResolver1.localSize());
      
      ConfigOverrides configOverrides1 = configOverrides0.copy();
      assertNotSame(configOverrides0, configOverrides1);
      assertNotSame(configOverrides1, configOverrides0);
      assertFalse(configOverrides1.equals((Object)configOverrides0));
      assertNotNull(configOverrides1);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(configOverrides1.getDefaultMergeable());
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings1, stdSubtypeResolver0, simpleMixInResolver1, (RootNameLookup) null, configOverrides1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(configOverrides0.equals((Object)configOverrides1));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertFalse(configOverrides1.equals((Object)configOverrides0));
      assertNotNull(deserializationConfig0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertEquals(0, serializationConfig0.mixInCount());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertNull(configOverrides1.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      
      ObjectReader objectReader0 = new ObjectReader(objectMapper0, deserializationConfig0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(configOverrides0.equals((Object)configOverrides1));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertFalse(configOverrides1.equals((Object)configOverrides0));
      assertNotNull(objectReader0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertEquals(0, serializationConfig0.mixInCount());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertNull(configOverrides1.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(baseSettings0, baseSettings1);
      assertNotSame(baseSettings1, baseSettings0);
      assertNotSame(simpleMixInResolver0, simpleMixInResolver1);
      assertNotSame(configOverrides0, configOverrides1);
      assertNotSame(simpleMixInResolver1, simpleMixInResolver0);
      assertNotSame(configOverrides1, configOverrides0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(arrayDeque0.contains(objectReader0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(configOverrides0.equals((Object)configOverrides1));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertFalse(configOverrides1.equals((Object)configOverrides0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertEquals(0, serializationConfig0.mixInCount());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertNull(configOverrides1.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Stream<ObjectReader> stream0 = hashSet0.parallelStream();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(stream0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      assertEquals(32, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER, jsonReadFeature0);
      
      ObjectReader objectReader2 = objectReader1.with((FormatFeature) jsonReadFeature0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(32, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertFalse(jsonReadFeature0.enabledByDefault());
      
      try { 
        objectReader1.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Class<String> class0 = String.class;
      ObjectReader objectReader2 = objectReader1.forType(class0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      HashMap<ShortNode, MapType> hashMap0 = new HashMap<ShortNode, MapType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ObjectReader objectReader3 = objectReader2.withAttributes(hashMap0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.booleanValue());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      try { 
        objectReader1.readValues(byteArray0, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      try { 
        objectReader1.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("5#Gon(E|q&?8GH/5#Gon(E|q&?8GH");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "BeanAsArraySerializer for ");
      assertTrue(boolean0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertNotNull(typeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(1, jsonGenerator_FeatureArray0.length);
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      assertSame(objectMapper0, objectMapper1);
      assertNotNull(mapType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.hasValueHandler());
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._prefetchRootDeserializer(mapType0);
      assertSame(objectMapper0, objectMapper1);
      assertNotNull(jsonDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      
      MockFile mockFile0 = new MockFile("5#Gon(E|q&?8GH", "5#Gon(E|q&?8GH");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValue((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'BeanAsArraySerializer': was expecting ('true', 'false' or 'null')
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 23]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      String string0 = "o}%7)2_:y!j8Gyw7[>";
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader1));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertNull(jsonParser0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      assertNotNull(jsonParserSequence0);
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      
      // Undeclared exception!
      try { 
        objectReader1._bindAndReadValues((JsonParser) jsonParserSequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertNotNull(nioPathDeserializer0);
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(nioPathDeserializer0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, objectReader0, true);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(iOContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(iOContext1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = 'G';
      charArray0[2] = '4';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-83), pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-83), 33, true);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'U', 'G', '4'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals((-83), readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'U', 'G', '4'}, charArray0);
      assertNotNull(readerBasedJsonParser1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals((-83), readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals((-83), readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -83
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = '?';
      charArray0[2] = '6';
      charArray0[3] = 'A';
      charArray0[4] = 'L';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, pipedReader0, objectReader0, charsToNameCanonicalizer1, charArray0, (-1430), 352, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'Y', '?', '6', 'A', 'L'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'Y', '?', '6', 'A', 'L'}, charArray0);
      assertNotNull(filteringParserDelegate0);
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(2, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'Y', '?', '6', 'A', 'L'}, charArray0);
      assertNull(formatSchema0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(2, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      
      File file0 = MockFile.createTempFile(" for format ", "FF58:X3ci4");
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(" for format 0FF58:X3ci4", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/ for format 0FF58:X3ci4", file0.toString());
      assertFalse(file0.isDirectory());
      
      InputStream inputStream0 = objectReader0._inputStream(file0);
      assertNotNull(inputStream0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(" for format 0FF58:X3ci4", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/ for format 0FF58:X3ci4", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0, inputStream0.available());
      
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte) (-58);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-35), (byte) (-119), (byte)0, (byte)1, (byte)65, (byte) (-14), (byte) (-58)}, byteArray0);
      assertFalse(boolean0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      assertNotNull(objectNode0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isArray());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ObjectNode objectNode1 = objectNode0.put("", float0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      
      ArrayNode arrayNode0 = objectNode1.putArray("Cannot find a deserializer for type ");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(2, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isEmpty());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isShort());
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating("1lQ/4kL*7$");
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(2, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isEmpty());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isShort());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayNode arrayNode1 = objectNode0.putArray((String) null);
      assertNotSame(arrayNode1, arrayNode0);
      assertSame(objectNode0, objectNode1);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isShort());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isBigInteger());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isMissingNode());
      assertEquals(0, arrayNode1.size());
      assertTrue(arrayNode1.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(3, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isArray());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      JavaType javaType0 = null;
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParser0, deserializationContext0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type START_ARRAY) found after value (bound as `java.lang.String`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      HashMap<ArrayType, BigIntegerNode> hashMap0 = new HashMap<ArrayType, BigIntegerNode>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(hashMap0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertNotNull(jsonFactory2);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory2.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertNotNull(nonBlockingJsonParser0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      
      try { 
        objectReader0._bindAndReadValues((JsonParser) nonBlockingJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertNotNull(objectNode0);
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.booleanValue());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      
      ArrayNode arrayNode0 = objectNode0.putArray("_7zVBCe8");
      assertNotNull(arrayNode0);
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      
      ObjectNode objectNode1 = arrayNode0.insertObject(1);
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode1, objectNode0);
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertNotNull(objectNode1);
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isEmpty());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(1, arrayNode0.size());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(0, objectNode1.size());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertTrue(objectNode1.isEmpty());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      
      ArrayNode arrayNode1 = objectNode1.withArray("_7zVBCe8");
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(objectNode1, objectNode0);
      assertNotSame(arrayNode1, arrayNode0);
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isEmpty());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(1, arrayNode0.size());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isMissingNode());
      assertEquals(0, arrayNode1.size());
      assertTrue(arrayNode1.isArray());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isFloat());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isShort());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isInt());
      
      JsonParser jsonParser0 = arrayNode1.traverse((ObjectCodec) objectReader0);
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(objectNode1, objectNode0);
      assertNotSame(arrayNode1, arrayNode0);
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(arrayNode0.equals((Object)arrayNode1));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isEmpty());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(1, arrayNode0.size());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isMissingNode());
      assertEquals(0, arrayNode1.size());
      assertTrue(arrayNode1.isArray());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isFloat());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isShort());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isInt());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      
      try { 
        objectReader0._bindAndClose(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertNotNull(jsonFactoryBuilder0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotNull(objectReader0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectNode0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      
      ObjectNode objectNode1 = objectNode0.put("", (-219L));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectNode1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isInt());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      
      JsonNode jsonNode0 = objectNode1.without("");
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertSame(objectNode0, jsonNode0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, jsonNode0);
      assertSame(jsonNode0, objectNode1);
      assertSame(jsonNode0, objectNode0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(jsonNode0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertTrue(objectNode1.isEmpty());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertEquals(0, objectNode1.size());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isLong());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isIntegralNumber());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      
      try { 
        objectReader0.readValue(jsonNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertNotNull(dataInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 4464);
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      assertEquals(131072, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, mapperFeature0);
      
      IntNode intNode0 = IntNode.valueOf(4464);
      assertNotNull(intNode0);
      assertFalse(intNode0.isBigDecimal());
      assertEquals(4464.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isArray());
      assertNull(intNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(4464L, intNode0.longValue());
      assertEquals(4464, intNode0.intValue());
      assertTrue(intNode0.isEmpty());
      assertEquals((short)4464, intNode0.shortValue());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isObject());
      assertEquals(4464.0, intNode0.doubleValue(), 0.01);
      assertEquals(0, intNode0.size());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isNaN());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(mapType0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      
      MapType mapType1 = mapType0.withKeyTypeHandler(jsonFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(mapType1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasValueHandler());
      
      ObjectReader objectReader0 = objectMapper1.readerFor((JavaType) mapType1);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(objectReader0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasValueHandler());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      assertNotNull(filteringParserDelegate0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      
      // Undeclared exception!
      try { 
        objectReader0._bind(jsonParser0, filteringParserDelegate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.core.filter.FilteringParserDelegate cannot be cast to java.util.Map
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      IntNode intNode0 = (IntNode)objectReader0.readTree("-5");
      assertNotNull(intNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.booleanValue());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isBigDecimal());
      assertEquals((-5L), intNode0.longValue());
      assertEquals((short) (-5), intNode0.shortValue());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isEmpty());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-5.0), intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isDouble());
      assertEquals((-5), intNode0.intValue());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.isInt());
      assertNull(intNode0.textValue());
      assertEquals((-5.0F), intNode0.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isArray());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.size());
      
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(33);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(8000, byteArray0.length);
      assertNotNull(byteArray0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer1);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      
      ResolvedRecursiveType resolvedRecursiveType1 = (ResolvedRecursiveType)resolvedRecursiveType0.withContentValueHandler(readerBasedJsonParser0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(resolvedRecursiveType1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertTrue(resolvedRecursiveType1.isFinal());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, (ResolvedType) resolvedRecursiveType1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      IntNode intNode0 = (IntNode)objectReader0.readTree("-5");
      assertNotNull(intNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isDouble());
      assertEquals((-5), intNode0.intValue());
      assertFalse(intNode0.isLong());
      assertEquals((short) (-5), intNode0.shortValue());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertTrue(intNode0.isIntegralNumber());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigDecimal());
      assertEquals((-5L), intNode0.longValue());
      assertEquals((-5.0), intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isArray());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.booleanValue());
      assertEquals((-5.0F), intNode0.floatValue(), 0.01F);
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertNotNull(missingNode0);
      assertEquals("", missingNode0.asText());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isBigDecimal());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.isIntegralNumber());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(33);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(8000, byteArray0.length);
      assertNotNull(byteArray0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer1);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNull(formatSchema0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      
      ResolvedRecursiveType resolvedRecursiveType1 = (ResolvedRecursiveType)resolvedRecursiveType0.withContentValueHandler(readerBasedJsonParser0);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(resolvedRecursiveType1);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertTrue(resolvedRecursiveType1.isFinal());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, (ResolvedType) resolvedRecursiveType1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((Reader) pipedReader0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      
      try { 
        objectReader0.readTree((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser((Reader) pipedReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      
      StringReader stringReader0 = new StringReader("JSON");
      assertNotNull(stringReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser((Reader) stringReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      
      try { 
        objectReader0._bindAndClose(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      int int0 = (-1686);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.rootValueSeparator((String) null);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertNotNull(jsonFactoryBuilder1);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder1);
      assertNotNull(jsonFactory0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(jsonFactory0.getRootValueSeparator());
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertNotNull(nonBlockingJsonParser0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(jsonFactory0.getRootValueSeparator());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      
      Class<BooleanNode> class0 = BooleanNode.class;
      try { 
        objectReader0.readValue((JsonParser) nonBlockingJsonParser0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.JsonNode`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
      assertNotNull(filteringParserDelegate0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.currentToken());
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((JsonParser) filteringParserDelegate0, (ResolvedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      IntNode intNode0 = (IntNode)objectReader0.readTree("-5");
      assertNotNull(intNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals((-5.0F), intNode0.floatValue(), 0.01F);
      assertEquals((-5), intNode0.intValue());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.booleanValue());
      assertEquals((-5.0), intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isNaN());
      assertEquals((-5L), intNode0.longValue());
      assertFalse(intNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertTrue(intNode0.isEmpty());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isShort());
      assertEquals((short) (-5), intNode0.shortValue());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isBigDecimal());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertNotNull(missingNode0);
      assertFalse(missingNode0.isFloat());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.booleanValue());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isInt());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(0, missingNode0.size());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer");
      assertFalse(boolean0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(33);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(8000, byteArray0.length);
      assertNotNull(byteArray0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer1);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNull(formatSchema0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<BooleanNode> class0 = BooleanNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      
      Iterator<SimpleType> iterator0 = objectReader0.readValues((JsonParser) readerBasedJsonParser0, (ResolvedType) simpleType0);
      assertSame(objectReader0, objectReader1);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(iterator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      Iterator<SettableBeanProperty> iterator0 = objectReader0.readValues((JsonParser) null, class0);
      assertNotNull(iterator0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      IntNode intNode0 = (IntNode)objectReader0.readTree("-5");
      assertNotNull(intNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isNaN());
      assertEquals(0, intNode0.size());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals((short) (-5), intNode0.shortValue());
      assertTrue(intNode0.canConvertToLong());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.isInt());
      assertEquals((-5), intNode0.intValue());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals((-5L), intNode0.longValue());
      assertTrue(intNode0.isEmpty());
      assertEquals((-5.0F), intNode0.floatValue(), 0.01F);
      assertEquals((-5.0), intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("file", uRI0.getScheme());
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertNotNull(missingNode0);
      assertFalse(missingNode0.isBigDecimal());
      assertTrue(missingNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertNull(missingNode0.textValue());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isInt());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.booleanValue());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(33);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(8000, byteArray0.length);
      assertNotNull(byteArray0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNull(formatSchema0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      Iterator<FilteringParserDelegate> iterator0 = objectReader1.readValues((JsonParser) readerBasedJsonParser0, class0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(iterator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.withRootName("Root name '%s' does not match expected ('%s') for type %s");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      // Undeclared exception!
      try { 
        objectReader1._detectBindAndClose(byteArray0, (byte)2, (byte)2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JsonFactory jsonFactory0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      try { 
        objectReader0.readValues((JsonParser) null, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      IntNode intNode0 = (IntNode)objectReader0.readTree("-5");
      assertNotNull(intNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertNull(intNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isDouble());
      assertEquals((-5), intNode0.intValue());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isShort());
      assertEquals((short) (-5), intNode0.shortValue());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-5L), intNode0.longValue());
      assertEquals((-5.0F), intNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isArray());
      assertEquals((-5.0), intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isNaN());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isInt());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("");
      assertNotNull(readerBasedJsonParser0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      assertNotNull(filteringParserDelegate0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(filteringParserDelegate0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonDeserializer<NullNode> jsonDeserializer0 = (JsonDeserializer<NullNode>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      MappingIterator<MapType> mappingIterator0 = objectReader0._newIterator((JsonParser) readerBasedJsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (JsonDeserializer<?>) jsonDeserializer0, false);
      assertNotNull(mappingIterator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile(" with format auto-detection: must be byte- not char-based", "");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValues((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      MockFile mockFile0 = new MockFile("Uj\"T>elQbG(5eCxw", "Uj\"T>elQbG(5eCxw");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertNotNull(uRL0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("Uj\"T>elQbG(5eCxw", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/Uj\"T>elQbG(5eCxw", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Uj\"T>elQbG(5eCxw/Uj\"T>elQbG(5eCxw", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParser jsonParser0 = objectReader0._considerFilter((JsonParser) null, false);
      assertNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParser jsonParser1 = objectReader0._considerFilter((JsonParser) null, true);
      assertNull(jsonParser1);
      assertEquals(0, objectMapper0.mixInCount());
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertNotNull(typeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eT^iOoGzu)_'!`5Kh");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      try { 
        objectReader0.readTree("\"3Q8KR");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: (String)\"\"3Q8KR\"; line: 1, column: 13]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNode jsonNode0 = objectReader0.readTree((byte[]) null, (-12), (-12));
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloat());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_SINGLE_QUOTES;
      assertEquals(JsonParser.Feature.ALLOW_SINGLE_QUOTES, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(4, jsonReadFeature0.getMask());
      assertEquals(JsonReadFeature.ALLOW_SINGLE_QUOTES, jsonReadFeature0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatFeature) jsonReadFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonParser.Feature.ALLOW_SINGLE_QUOTES, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(4, jsonReadFeature0.getMask());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNull(jsonParser0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        objectReader1._bindAndCloseAsTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0._bindAndCloseAsTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(typeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      MappingIterator<BigIntegerNode> mappingIterator0 = objectReader0.readValues((Reader) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(mappingIterator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>(1731, 1731, 1);
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertNotNull(objectNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ObjectNode objectNode1 = objectNode0.put("8w2`wNnh(r_>_3@", float0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(1, objectNode1.size());
      assertTrue(objectNode1.isObject());
      
      ArrayNode arrayNode0 = objectNode1.putArray("8w2`wNnh(r_>_3@");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(arrayNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(1, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(1, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(1, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.overrideStdFeatures(2244, 1731);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(filteringParserDelegate1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(1, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(192, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(192, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertNull(filteringParserDelegate1.currentToken());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertEquals(192, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNull(formatSchema0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(1, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(192, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(192, filteringParserDelegate0.getFeatureMask());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ArrayNode arrayNode1 = objectNode1.putArray("8w2`wNnh(r_>_3@");
      assertNotSame(arrayNode1, arrayNode0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertFalse(arrayNode1.isFloat());
      assertEquals("", arrayNode1.asText());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.booleanValue());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isShort());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isLong());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(1, objectNode1.size());
      assertTrue(objectNode1.isObject());
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectReader1, objectReader0);
      assertSame(objectReader0, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, deserializationFeatureArray0.length);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      boolean boolean1 = objectReader0.isEnabled(deserializationFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(boolean1);
      
      ArrayNode arrayNode2 = (ArrayNode)objectReader1._bind(filteringParserDelegate0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(arrayNode0, arrayNode2);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(objectReader1, objectReader0);
      assertNotSame(arrayNode2, arrayNode0);
      assertNotSame(arrayNode2, arrayNode1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertTrue(arrayNode2.equals((Object)arrayNode1));
      assertTrue(arrayNode2.equals((Object)arrayNode0));
      assertEquals(0, deserializationFeatureArray0.length);
      assertNotNull(arrayNode2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(1, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertEquals(192, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(4, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(192, filteringParserDelegate0.getFeatureMask());
      assertFalse(arrayNode2.isFloatingPointNumber());
      assertEquals(0, arrayNode2.size());
      assertEquals("", arrayNode2.asText());
      assertFalse(arrayNode2.isBigInteger());
      assertFalse(arrayNode2.isShort());
      assertTrue(arrayNode2.isArray());
      assertFalse(arrayNode2.isInt());
      assertNull(arrayNode2.textValue());
      assertFalse(arrayNode2.isMissingNode());
      assertFalse(arrayNode2.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode2.getNodeType());
      assertFalse(arrayNode2.isObject());
      assertNull(arrayNode2.numberType());
      assertFalse(arrayNode2.isBigDecimal());
      assertTrue(arrayNode2.isEmpty());
      assertFalse(arrayNode2.booleanValue());
      assertFalse(arrayNode2.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode2.asToken());
      assertFalse(arrayNode2.isFloat());
      assertFalse(arrayNode2.isLong());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      try { 
        objectReader0.readValues((JsonParser) null, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = null;
      try { 
        objectReader0.readValues((JsonParser) null, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((byte[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[22];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(byteArray0);
      assertEquals(22, byteArray0.length);
      assertNotNull(readerBasedJsonParser0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      assertEquals(22, byteArray0.length);
      assertNotNull(filteringParserDelegate0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(131072, mapperFeature0.getMask());
      assertEquals(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, mapperFeature0);
      
      try { 
        objectReader0._bind(readerBasedJsonParser0, tokenFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>(1731, 1731, 1);
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertNotNull(objectNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ObjectNode objectNode1 = objectNode0.put("8w2`Nh(r_>_3%", float0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(1, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      
      ArrayNode arrayNode0 = objectNode0.putArray("");
      assertSame(objectNode0, objectNode1);
      assertNotNull(arrayNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isEmpty());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(2, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      JsonParser jsonParser1 = objectReader0._considerFilter(jsonParser0, true);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(jsonParser0, jsonParser1);
      assertSame(jsonParser1, jsonParser0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonParser1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(2, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser1.currentToken());
      assertFalse(jsonParser1.isClosed());
      assertFalse(jsonParser1.hasCurrentToken());
      assertFalse(jsonParser1.canParseAsync());
      assertFalse(jsonParser1.canReadObjectId());
      assertFalse(jsonParser1.hasTextCharacters());
      assertEquals(0, jsonParser1.currentTokenId());
      assertEquals(0, jsonParser1.getTextOffset());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertNull(jsonParser1.getCurrentToken());
      assertFalse(jsonParser1.canReadTypeId());
      assertEquals(0, jsonParser1.getFeatureMask());
      assertNull(jsonParser1.getLastClearedToken());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertEquals(0, jsonParser1.getCurrentTokenId());
      
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      assertSame(tokenFilter1, tokenFilter0);
      assertNotNull(tokenFilter1);
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser1, tokenFilter1, false, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(2, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser1.currentToken());
      assertFalse(jsonParser1.isClosed());
      assertFalse(jsonParser1.hasCurrentToken());
      assertFalse(jsonParser1.canParseAsync());
      assertFalse(jsonParser1.canReadObjectId());
      assertFalse(jsonParser1.hasTextCharacters());
      assertEquals(0, jsonParser1.currentTokenId());
      assertEquals(0, jsonParser1.getTextOffset());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertNull(jsonParser1.getCurrentToken());
      assertFalse(jsonParser1.canReadTypeId());
      assertEquals(0, jsonParser1.getFeatureMask());
      assertNull(jsonParser1.getLastClearedToken());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertEquals(0, jsonParser1.getCurrentTokenId());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.overrideStdFeatures(4000, 1563);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(jsonParser0, jsonParser1);
      assertSame(jsonParser1, jsonParser0);
      assertSame(tokenFilter1, tokenFilter0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(filteringParserDelegate1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(2, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(1536, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser1.currentToken());
      assertFalse(jsonParser1.isClosed());
      assertFalse(jsonParser1.hasCurrentToken());
      assertFalse(jsonParser1.canParseAsync());
      assertFalse(jsonParser1.canReadObjectId());
      assertFalse(jsonParser1.hasTextCharacters());
      assertEquals(0, jsonParser1.currentTokenId());
      assertEquals(0, jsonParser1.getTextOffset());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertNull(jsonParser1.getCurrentToken());
      assertFalse(jsonParser1.canReadTypeId());
      assertEquals(1536, jsonParser1.getFeatureMask());
      assertNull(jsonParser1.getLastClearedToken());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertEquals(0, jsonParser1.getCurrentTokenId());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(1536, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertEquals(1536, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertFalse(filteringParserDelegate1.canParseAsync());
      
      FilteringParserDelegate filteringParserDelegate2 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(filteringParserDelegate2.equals((Object)filteringParserDelegate0));
      assertFalse(filteringParserDelegate2.equals((Object)filteringParserDelegate1));
      assertNotNull(filteringParserDelegate2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(2, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(1536, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNull(jsonParser1.currentToken());
      assertFalse(jsonParser1.isClosed());
      assertFalse(jsonParser1.hasCurrentToken());
      assertFalse(jsonParser1.canParseAsync());
      assertFalse(jsonParser1.canReadObjectId());
      assertFalse(jsonParser1.hasTextCharacters());
      assertEquals(0, jsonParser1.currentTokenId());
      assertEquals(0, jsonParser1.getTextOffset());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertNull(jsonParser1.getCurrentToken());
      assertFalse(jsonParser1.canReadTypeId());
      assertEquals(1536, jsonParser1.getFeatureMask());
      assertNull(jsonParser1.getLastClearedToken());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertEquals(0, jsonParser1.getCurrentTokenId());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(1536, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(1536, filteringParserDelegate2.getFeatureMask());
      assertEquals(0, filteringParserDelegate2.getMatchCount());
      assertFalse(filteringParserDelegate2.hasCurrentToken());
      assertEquals(0, filteringParserDelegate2.getFormatFeatures());
      assertNull(filteringParserDelegate2.getLastClearedToken());
      assertFalse(filteringParserDelegate2.requiresCustomCodec());
      assertFalse(filteringParserDelegate2.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate2.getCurrentToken());
      assertNull(filteringParserDelegate2.currentToken());
      assertFalse(filteringParserDelegate2.canReadTypeId());
      assertFalse(filteringParserDelegate2.canReadObjectId());
      assertEquals(0, filteringParserDelegate2.getCurrentTokenId());
      assertFalse(filteringParserDelegate2.canParseAsync());
      assertEquals(0, filteringParserDelegate2.currentTokenId());
      assertFalse(filteringParserDelegate2.isExpectedStartObjectToken());
      
      FormatSchema formatSchema0 = filteringParserDelegate2.getSchema();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(jsonParser0, jsonParser1);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(jsonParser1, jsonParser0);
      assertSame(tokenFilter1, tokenFilter0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertNotSame(filteringParserDelegate0, filteringParserDelegate2);
      assertNotSame(filteringParserDelegate2, filteringParserDelegate0);
      assertNotSame(filteringParserDelegate2, filteringParserDelegate1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(filteringParserDelegate0.equals((Object)filteringParserDelegate2));
      assertFalse(filteringParserDelegate2.equals((Object)filteringParserDelegate0));
      assertFalse(filteringParserDelegate2.equals((Object)filteringParserDelegate1));
      assertNull(formatSchema0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(2, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(1536, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNull(jsonParser1.currentToken());
      assertFalse(jsonParser1.isClosed());
      assertFalse(jsonParser1.hasCurrentToken());
      assertFalse(jsonParser1.canParseAsync());
      assertFalse(jsonParser1.canReadObjectId());
      assertFalse(jsonParser1.hasTextCharacters());
      assertEquals(0, jsonParser1.currentTokenId());
      assertEquals(0, jsonParser1.getTextOffset());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertNull(jsonParser1.getCurrentToken());
      assertFalse(jsonParser1.canReadTypeId());
      assertEquals(1536, jsonParser1.getFeatureMask());
      assertNull(jsonParser1.getLastClearedToken());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertEquals(0, jsonParser1.getCurrentTokenId());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(1536, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(1536, filteringParserDelegate2.getFeatureMask());
      assertEquals(0, filteringParserDelegate2.getMatchCount());
      assertFalse(filteringParserDelegate2.hasCurrentToken());
      assertEquals(0, filteringParserDelegate2.getFormatFeatures());
      assertNull(filteringParserDelegate2.getLastClearedToken());
      assertFalse(filteringParserDelegate2.requiresCustomCodec());
      assertFalse(filteringParserDelegate2.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate2.getCurrentToken());
      assertNull(filteringParserDelegate2.currentToken());
      assertFalse(filteringParserDelegate2.canReadTypeId());
      assertFalse(filteringParserDelegate2.canReadObjectId());
      assertEquals(0, filteringParserDelegate2.getCurrentTokenId());
      assertFalse(filteringParserDelegate2.canParseAsync());
      assertEquals(0, filteringParserDelegate2.currentTokenId());
      assertFalse(filteringParserDelegate2.isExpectedStartObjectToken());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectNode objectNode2 = (ObjectNode)objectReader0._bind(filteringParserDelegate2, (Object) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(jsonParser0, jsonParser1);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(jsonParser1, jsonParser0);
      assertSame(tokenFilter1, tokenFilter0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertNotSame(filteringParserDelegate0, filteringParserDelegate2);
      assertNotSame(filteringParserDelegate2, filteringParserDelegate0);
      assertNotSame(filteringParserDelegate2, filteringParserDelegate1);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(filteringParserDelegate0.equals((Object)filteringParserDelegate2));
      assertFalse(filteringParserDelegate2.equals((Object)filteringParserDelegate0));
      assertFalse(filteringParserDelegate2.equals((Object)filteringParserDelegate1));
      assertTrue(objectNode2.equals((Object)objectNode0));
      assertTrue(objectNode2.equals((Object)objectNode1));
      assertNotNull(objectNode2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(2, objectNode1.size());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(1536, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(2, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(2, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.getCurrentToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(jsonParser1.isClosed());
      assertEquals(JsonToken.END_OBJECT, jsonParser1.currentToken());
      assertFalse(jsonParser1.canParseAsync());
      assertEquals(2, jsonParser1.currentTokenId());
      assertFalse(jsonParser1.canReadObjectId());
      assertTrue(jsonParser1.hasCurrentToken());
      assertFalse(jsonParser1.hasTextCharacters());
      assertEquals(0, jsonParser1.getTextOffset());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_OBJECT, jsonParser1.getCurrentToken());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertFalse(jsonParser1.canReadTypeId());
      assertEquals(2, jsonParser1.getCurrentTokenId());
      assertEquals(1536, jsonParser1.getFeatureMask());
      assertNull(jsonParser1.getLastClearedToken());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertEquals(2, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(1536, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(JsonToken.END_OBJECT, filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(2, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(JsonToken.END_OBJECT, filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertTrue(filteringParserDelegate0.hasCurrentToken());
      assertEquals(1536, filteringParserDelegate2.getFeatureMask());
      assertEquals(0, filteringParserDelegate2.getMatchCount());
      assertFalse(filteringParserDelegate2.hasCurrentToken());
      assertEquals(0, filteringParserDelegate2.getFormatFeatures());
      assertEquals(JsonToken.END_OBJECT, filteringParserDelegate2.getLastClearedToken());
      assertFalse(filteringParserDelegate2.requiresCustomCodec());
      assertFalse(filteringParserDelegate2.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate2.getCurrentToken());
      assertNull(filteringParserDelegate2.currentToken());
      assertFalse(filteringParserDelegate2.canReadTypeId());
      assertFalse(filteringParserDelegate2.canReadObjectId());
      assertEquals(0, filteringParserDelegate2.getCurrentTokenId());
      assertFalse(filteringParserDelegate2.canParseAsync());
      assertEquals(0, filteringParserDelegate2.currentTokenId());
      assertFalse(filteringParserDelegate2.isExpectedStartObjectToken());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.numberType());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isShort());
      assertEquals(2, objectNode2.size());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isMissingNode());
      assertNull(objectNode2.textValue());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>(1731, 1731, 1);
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertNotNull(objectNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ObjectNode objectNode1 = objectNode0.put("8w2`Nh(r_>_3%", float0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      
      ArrayNode arrayNode0 = objectNode1.putArray("8w2`Nh(r_>_3%");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(arrayNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.overrideStdFeatures(2244, 1731);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(filteringParserDelegate1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(192, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(192, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertEquals(192, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNull(formatSchema0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(192, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(192, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ArrayNode arrayNode1 = objectNode1.putArray("8w2`Nh(r_>_3%");
      assertNotSame(arrayNode1, arrayNode0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals("", arrayNode1.asText());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isMissingNode());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isShort());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.booleanValue());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertFalse(arrayNode1.isDouble());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isFloat());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParser0, defaultDeserializationContext_Impl0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type START_ARRAY) found after value (bound as [null]): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertNotNull(objectNode0);
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloat());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      
      ObjectNode objectNode1 = objectNode0.with("OBJECT");
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode1, objectNode0);
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertNotNull(objectNode1);
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloat());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(0, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isEmpty());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      
      ArrayNode arrayNode0 = objectNode1.putArray("OBJECT");
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode1, objectNode0);
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertNotNull(arrayNode0);
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloat());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      
      ObjectNode objectNode2 = arrayNode0.addObject();
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode1, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertNotNull(objectNode2);
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloat());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(objectNode2.isIntegralNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertTrue(objectNode2.isEmpty());
      assertEquals("", objectNode2.asText());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals(0, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isArray());
      
      ArrayNode arrayNode1 = objectNode2.withArray("OBJECT");
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode1, objectNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(arrayNode1, arrayNode0);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloat());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertEquals("", objectNode2.asText());
      assertNull(objectNode2.textValue());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isArray());
      assertTrue(arrayNode1.isArray());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isMissingNode());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals("", arrayNode1.asText());
      assertNull(arrayNode1.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode1);
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode1, objectNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(arrayNode1, arrayNode0);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(arrayNode0.equals((Object)arrayNode1));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloat());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertEquals("", objectNode2.asText());
      assertNull(objectNode2.textValue());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isArray());
      assertTrue(arrayNode1.isArray());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isMissingNode());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals("", arrayNode1.asText());
      assertNull(arrayNode1.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ArrayNode arrayNode2 = objectNode1.putArray("OBJECT");
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode1, objectNode0);
      assertNotSame(arrayNode2, arrayNode1);
      assertNotSame(arrayNode2, arrayNode0);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertTrue(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(arrayNode2.equals((Object)arrayNode0));
      assertTrue(arrayNode2.equals((Object)arrayNode1));
      assertNotNull(arrayNode2);
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloat());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(arrayNode2.isInt());
      assertNull(arrayNode2.numberType());
      assertTrue(arrayNode2.isEmpty());
      assertFalse(arrayNode2.booleanValue());
      assertFalse(arrayNode2.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode2.getNodeType());
      assertTrue(arrayNode2.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode2.asToken());
      assertFalse(arrayNode2.isLong());
      assertFalse(arrayNode2.isMissingNode());
      assertFalse(arrayNode2.isBigDecimal());
      assertFalse(arrayNode2.isObject());
      assertNull(arrayNode2.textValue());
      assertFalse(arrayNode2.isFloat());
      assertFalse(arrayNode2.isBigInteger());
      assertFalse(arrayNode2.isFloatingPointNumber());
      assertFalse(arrayNode2.isIntegralNumber());
      assertFalse(arrayNode2.isDouble());
      assertEquals(0, arrayNode2.size());
      assertEquals("", arrayNode2.asText());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParser0, deserializationContext0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type START_ARRAY) found after value (bound as [null]): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      File file0 = MockFile.createTempFile("ZK&m=3{HK#X5/`HYl=N", "ZK&m=3{HK#X5/`HYl=N");
      assertNotNull(file0);
      assertTrue(file0.canExecute());
      assertEquals("/tmp/ZK&m=3{HK#X5/`HYl=N0ZK&m=3{HK#X5", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp/ZK&m=3{HK#X5/`HYl=N0ZK&m=3{HK#X5/`HYl=N", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("`HYl=N", file0.getName());
      
      try { 
        objectReader0.readValues(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isArray());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotNull(jsonFactory3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory3.createParser((InputStream) null);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotNull(uTF8StreamJsonParser0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      assertNotNull(filteringParserDelegate0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      
      Object object0 = filteringParserDelegate0.getCurrentValue();
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNull(object0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNull(formatSchema0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile("JSON", "i8!Bf/eXWe\"5#Y");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals("/tmp/JSON0i8!Bf", mockFile0.getParent());
      assertEquals("/tmp/JSON0i8!Bf/eXWe\"5#Y", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("eXWe\"5#Y", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      try { 
        objectReader0.readValues((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1), byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals((-1), byteArrayInputStream0.available());
      
      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertNotNull(nonBlockingJsonParser0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      
      try { 
        objectReader2.readValue((JsonParser) nonBlockingJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      InputStream inputStream0 = null;
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        objectReader0._reportUndetectableSource((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("5#Gon(E|q&?8=H");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "Cannot find a deserializer for type ");
      assertTrue(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      MockFile mockFile0 = new MockFile("5#Gon(E|q&?8=H");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValue((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Cannot': was expecting ('true', 'false' or 'null')
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("JSON");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte) (-44), (byte) (-59), (byte)80, (byte)1, (byte)1, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValue((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 15)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute((Object) null);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotNull(contextAttributes1);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0._verifyNoTrailingTokens((JsonParser) null, (DeserializationContext) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte)1;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)27, (byte)14, (byte)1, (byte) (-128), (byte)16, (byte)3, (byte)26, (byte)1}, byteArray0);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      IntNode intNode0 = new IntNode(32767);
      assertNotNull(intNode0);
      assertFalse(intNode0.isShort());
      assertEquals(32767L, intNode0.longValue());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(32767, intNode0.intValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(32767.0, intNode0.doubleValue(), 0.01);
      assertEquals((short)32767, intNode0.shortValue());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isObject());
      assertEquals(32767.0F, intNode0.floatValue(), 0.01F);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withPerCallAttribute(objectMapper1, intNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(intNode0.isShort());
      assertEquals(32767L, intNode0.longValue());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(32767, intNode0.intValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(32767.0, intNode0.doubleValue(), 0.01);
      assertEquals((short)32767, intNode0.shortValue());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isObject());
      assertEquals(32767.0F, intNode0.floatValue(), 0.01F);
      
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(intNode0.isShort());
      assertEquals(32767L, intNode0.longValue());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(32767, intNode0.intValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(32767.0, intNode0.doubleValue(), 0.01);
      assertEquals((short)32767, intNode0.shortValue());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isObject());
      assertEquals(32767.0F, intNode0.floatValue(), 0.01F);
      
      // Undeclared exception!
      try { 
        objectReader0.withType((Type) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.withRootName("Root name '%s' does not match expected ('%s') for type %s");
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      RawValue rawValue0 = new RawValue("Nv=g8Qx:}oS%C^CP");
      assertNotNull(rawValue0);
      
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode(rawValue0);
      assertNotNull(valueNode0);
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, valueNode0.asToken());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigInteger());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isArray());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isLong());
      assertFalse(valueNode0.isMissingNode());
      assertEquals(0, valueNode0.size());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isObject());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isShort());
      assertEquals(JsonNodeType.POJO, valueNode0.getNodeType());
      
      ObjectReader objectReader2 = objectReader0.with(jsonNodeFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper1.mixInCount());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      // Undeclared exception!
      try { 
        objectReader1._detectBindAndClose(byteArray0, (byte) (-4), (byte) (-4));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      PropertyName propertyName0 = new PropertyName((String) null);
      assertNotNull(propertyName0);
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertNull(propertyName0.getNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      
      ObjectReader objectReader1 = objectReader0.withRootName(propertyName0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertNull(propertyName0.getNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValue((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "|");
      assertFalse(boolean0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertNotNull(jsonFactory0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(30, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, defaultSerializerProvider0, defaultDeserializationContext0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(30, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectReader0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(30, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      assertNotNull(propertyName0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      
      ObjectReader objectReader1 = objectReader0.withRootName(propertyName0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(30, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser((Reader) pipedReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(30, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      
      try { 
        objectReader1._bindAndClose(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byte byte0 = (byte)115;
      // Undeclared exception!
      try { 
        objectReader0._bindAndClose((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>(1731, 1731, 1);
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertNotNull(objectNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(0, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ObjectNode objectNode1 = objectNode0.put("8w2`Nh(r_>_3%", float0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      
      ArrayNode arrayNode0 = objectNode1.putArray("8w2`Nh(r_>_3%");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(arrayNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.overrideStdFeatures(2226, 1731);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(filteringParserDelegate1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(130, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(130, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertEquals(130, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertNull(filteringParserDelegate1.currentToken());
      
      int int0 = filteringParserDelegate1.nextIntValue((-990));
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(3, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(JsonToken.START_ARRAY, jsonParser0.currentToken());
      assertEquals(3, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertTrue(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(130, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(JsonToken.START_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(JsonToken.START_ARRAY, filteringParserDelegate0.currentToken());
      assertEquals(3, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(3, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertTrue(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertTrue(filteringParserDelegate0.hasCurrentToken());
      assertEquals(130, filteringParserDelegate0.getFeatureMask());
      assertEquals(JsonToken.START_ARRAY, filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertEquals(JsonToken.START_ARRAY, filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertEquals(130, filteringParserDelegate1.getFeatureMask());
      assertEquals(3, filteringParserDelegate1.currentTokenId());
      assertEquals(JsonToken.START_ARRAY, filteringParserDelegate1.currentToken());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertTrue(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertEquals(3, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertTrue(filteringParserDelegate1.hasCurrentToken());
      assertEquals((-990), int0);
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNull(formatSchema0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(3, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(JsonToken.START_ARRAY, jsonParser0.currentToken());
      assertEquals(3, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertTrue(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(130, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(JsonToken.START_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(JsonToken.START_ARRAY, filteringParserDelegate0.currentToken());
      assertEquals(3, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(3, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertTrue(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertTrue(filteringParserDelegate0.hasCurrentToken());
      assertEquals(130, filteringParserDelegate0.getFeatureMask());
      assertEquals(JsonToken.START_ARRAY, filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ArrayNode arrayNode1 = (ArrayNode)objectReader0._bind(filteringParserDelegate1, objectNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertNotSame(arrayNode1, arrayNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(jsonParser0.isClosed());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertEquals(4, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(130, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(130, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertEquals(130, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate1.getLastClearedToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(arrayNode1.booleanValue());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isDouble());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isMissingNode());
      assertTrue(arrayNode1.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isFloat());
      assertEquals("", arrayNode1.asText());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      objectReader0._verifyNoTrailingTokens(jsonParser0, defaultDeserializationContext_Impl0, (JavaType) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(concurrentHashMap0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertEquals(4, jsonParser0.currentTokenId());
      assertTrue(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(130, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      
      ObjectNode objectNode2 = (ObjectNode)objectReader0.createObjectNode();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertNotNull(objectNode2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(objectNode2.numberType());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertTrue(objectNode2.isEmpty());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals("", objectNode2.asText());
      assertEquals(0, objectNode2.size());
      assertFalse(objectNode2.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isMissingNode());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isArray());
      
      ObjectReader objectReader1 = objectReader0.withType((JavaType) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        objectReader0.readTree((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.withAttribute((Object) null, (Object) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertNotNull(jsonFactory0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(95, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(defaultSerializerProvider0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, defaultSerializerProvider0, (DefaultDeserializationContext) null);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(objectMapper0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(95, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(objectReader0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(95, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser("JSON");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)objectReader0._considerFilter(readerBasedJsonParser0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(readerBasedJsonParser1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(95, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(8193, readerBasedJsonParser1.getFeatureMask());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      
      MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
      assertEquals(65536, mapperFeature0.getMask());
      assertTrue(mapperFeature0.enabledByDefault());
      assertEquals(MapperFeature.DEFAULT_VIEW_INCLUSION, mapperFeature0);
      
      ObjectReader objectReader1 = objectReader0.withAttribute(defaultSerializerProvider_Impl1, mapperFeature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(95, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(65536, mapperFeature0.getMask());
      assertTrue(mapperFeature0.enabledByDefault());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-6);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser(byteArray0, (int) (byte) (-6), (int) (byte)1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-6)}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, true);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-6)}, byteArray0);
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-6)}, byteArray0);
      assertNull(formatSchema0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(95, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      FloatNode floatNode0 = new FloatNode(0.0F);
      assertNotNull(floatNode0);
      assertTrue(floatNode0.isEmpty());
      assertEquals(0.0, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isObject());
      assertEquals(0.0F, floatNode0.floatValue(), 0.01F);
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(0L, floatNode0.longValue());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(0, floatNode0.intValue());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      InputStream inputStream0 = null;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanProperty_Bogus0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, (OutputStream) null);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      
      FormatSchema formatSchema0 = uTF8JsonGenerator0.getSchema();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(formatSchema0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) bufferRecycler0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(injectableValues_Std1);
      
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader(objectMapper0, (DeserializationConfig) null, javaType0, (Object) null, (FormatSchema) null, injectableValues_Std1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      try { 
        objectReader1.readValues((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (StringReader); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"Z^W8u");
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-92);
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: (byte[])\"l\uFFFD\"; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      MockFile mockFile0 = new MockFile("Cannot find a deserializer for type ");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertNotNull(uRL0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("Cannot find a deserializer for type ", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("Cannot find a deserializer for type ", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader1.readTree((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.withRootName("Root name '%s' does not match expected ('%s') for type %s");
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper1.mixInCount());
      
      FloatNode floatNode0 = new FloatNode(0.0F);
      assertNotNull(floatNode0);
      assertFalse(floatNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(0.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isLong());
      assertEquals(0, floatNode0.intValue());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isDouble());
      assertEquals(0, floatNode0.size());
      assertEquals((short)0, floatNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isFloat());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(0.0, floatNode0.doubleValue(), 0.01);
      assertEquals(0L, floatNode0.longValue());
      
      Class<FilteringParserDelegate> class1 = FilteringParserDelegate.class;
      try { 
        objectReader1.treeToValue((TreeNode) floatNode0, class1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (VALUE_NUMBER_FLOAT), expected START_OBJECT: Current token not START_OBJECT (needed to unwrap root name 'Root name '%s' does not match expected ('%s') for type %s'), but VALUE_NUMBER_FLOAT
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertNotNull(jsonFactory0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser("Ux601mX4Y7=@=+O_");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      
      try { 
        objectReader0.readTree((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Ux601mX4Y7': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"Ux601mX4Y7=@=+O_\"; line: 1, column: 11]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ConcurrentHashMap<BinaryNode, BasicBeanDescription> concurrentHashMap0 = new ConcurrentHashMap<BinaryNode, BasicBeanDescription>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ObjectReader objectReader1 = objectReader0.withAttributes(concurrentHashMap0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      
      ObjectReader objectReader2 = new ObjectReader(objectReader0, jsonFactory3);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      
      Class<ArrayNode> class1 = ArrayNode.class;
      ObjectReader objectReader3 = objectReader2.withType(class1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertNotNull(objectReader3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      
      HashMap<MapLikeType, BuilderBasedDeserializer> hashMap0 = new HashMap<MapLikeType, BuilderBasedDeserializer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ObjectReader objectReader4 = objectReader1.withAttributes(hashMap0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader1, objectReader4);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertNotNull(objectReader4);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<MapperFeature> class0 = MapperFeature.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      deserializationFeatureArray0[4] = deserializationFeature4;
      DeserializationFeature deserializationFeature5 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      deserializationFeatureArray0[5] = deserializationFeature5;
      DeserializationFeature deserializationFeature6 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[6] = deserializationFeature6;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializationFeature2, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature5));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature3));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature6));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature0));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature4));
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature5));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature3));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature6));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature0));
      assertFalse(deserializationFeature2.equals((Object)deserializationFeature4));
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      
      try { 
        objectReader1._bind(readerBasedJsonParser0, deserializationFeature0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.withoutFeatures((DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<DecimalNode> class0 = DecimalNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      assertNotNull(collectionLikeType0);
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isArrayType());
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) collectionLikeType0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isArrayType());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<MapLikeType> class1 = MapLikeType.class;
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      javaTypeArray0[2] = (JavaType) collectionLikeType0;
      javaTypeArray0[4] = (JavaType) collectionLikeType0;
      javaTypeArray0[5] = (JavaType) collectionLikeType0;
      javaTypeArray0[6] = (JavaType) collectionLikeType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      assertEquals(7, javaTypeArray0.length);
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("JSON");
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertEquals(7, javaTypeArray0.length);
      assertNotNull(typeBindings1);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertEquals(7, javaTypeArray0.length);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(class0);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertEquals(7, javaTypeArray0.length);
      assertNotNull(javaType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      
      ObjectReader objectReader2 = objectReader1.forType(javaType0);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(2, deserializationFeatureArray0.length);
      assertEquals(7, javaTypeArray0.length);
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader3 = objectMapper0.reader(contextAttributes0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertNotNull(typeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<BooleanNode> class1 = BooleanNode.class;
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertNotNull(typeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 0);
      assertNotNull(lRUMap0);
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      
      // Undeclared exception!
      try { 
        placeholderForType0.withTypeHandler(objectMapper0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      InputStream inputStream0 = null;
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      
      // Undeclared exception!
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      
      // Undeclared exception!
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      assertFalse(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      
      // Undeclared exception!
      try { 
        objectReader0.withoutFeatures((FormatFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = null;
      try {
        objectReader1 = new ObjectReader(objectReader0, (JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0, 1168, 2);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findTreeDeserializer(defaultDeserializationContext_Impl0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertNotNull(jsonDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      IntNode intNode0 = (IntNode)objectReader0.readTree("-5");
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(intNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(intNode0.isInt());
      assertEquals((-5), intNode0.intValue());
      assertEquals((-5.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isEmpty());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-5.0), intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      assertEquals((-5L), intNode0.longValue());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(0, intNode0.size());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isArray());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.canConvertToLong());
      assertNull(intNode0.textValue());
      assertEquals((short) (-5), intNode0.shortValue());
      assertFalse(intNode0.isShort());
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotNull(uRI1);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getRawQuery());
      assertEquals((-1), uRI1.getPort());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getRawFragment());
      assertTrue(uRI1.isAbsolute());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawAuthority());
      
      MockFile mockFile0 = new MockFile(uRI1);
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValue((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      
      char[] charArray0 = new char[2];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0, 2, 2885);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findTreeDeserializer(defaultDeserializationContext_Impl0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      boolean boolean1 = objectReader0.isEnabled(deserializationFeature0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      boolean boolean1 = objectReader0.isEnabled(deserializationFeature0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<LongNode> class0 = LongNode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose(byteArray0, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      char[] charArray0 = new char[2];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0, 2, 2885);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findTreeDeserializer(defaultDeserializationContext_Impl0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-4);
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose(byteArray0, (-1), 868);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndReadValues((DataFormatReaders.Match) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      
      String string0 = "'7}`^>eQ20'25U3 B";
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader[] objectReaderArray0 = new ObjectReader[5];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(5, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)38;
      byteArray0[8] = (byte)15;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)33, (byte) (-52), (byte)0, (byte)114, (byte) (-11), (byte)51, (byte)89, (byte)38, (byte)15}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[1];
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      try { 
        objectReader1.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      try { 
        objectReader0.readValue("[ClassStack (self-refs: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (String)\"[ClassStack (self-refs: \"; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      ObjectReader objectReader1 = objectMapper1.reader(deserializationFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonFactory jsonFactory1 = objectReader1.getFactory();
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      Version version0 = objectReader1.version();
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(version0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(version0.isUknownVersion());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertTrue(version0.isSnapshot());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertEquals(10, version0.getMinorVersion());
      assertEquals(0, version0.getPatchLevel());
      assertEquals(2, version0.getMajorVersion());
      assertFalse(version0.isUnknownVersion());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectReader objectReader2 = objectReader1.without(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_MISSING_VALUES;
      assertEquals(JsonParser.Feature.ALLOW_MISSING_VALUES, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(256, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonReadFeature.ALLOW_MISSING_VALUES, jsonReadFeature0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      ObjectReader objectReader2 = objectReader1.with((FormatFeature) jsonReadFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonParser.Feature.ALLOW_MISSING_VALUES, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(256, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      ObjectReader objectReader3 = objectReader2.with(locale0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonParser.Feature.ALLOW_MISSING_VALUES, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(256, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      ObjectReader objectReader4 = objectReader0.withFormatDetection(objectReaderArray0);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader3);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertEquals(0, objectReaderArray0.length);
      assertNotNull(objectReader4);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectReader objectReader5 = objectReader1.without(deserializationFeature0);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader5);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader1, objectReader4);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader5);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader5, objectReader0);
      assertNotSame(objectReader5, objectReader4);
      assertNotSame(objectReader5, objectReader3);
      assertNotSame(objectReader5, objectReader2);
      assertSame(objectReader5, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader4));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader4));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader5.equals((Object)objectReader0));
      assertFalse(objectReader5.equals((Object)objectReader4));
      assertFalse(objectReader5.equals((Object)objectReader3));
      assertFalse(objectReader5.equals((Object)objectReader2));
      assertNotNull(objectReader5);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory1 = objectReader4.getFactory();
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader5);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader4, objectReader5);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader3);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(objectReader0.equals((Object)objectReader4));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader5));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader5));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertEquals(0, objectReaderArray0.length);
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(propertyAccessor0, jsonAutoDetect_Visibility0);
      assertNotNull(jsonAutoDetect_Value0);
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getCreatorVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getFieldVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getSetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getIsGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getGetterVisibility());
      
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getCreatorVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getFieldVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getSetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getIsGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getGetterVisibility());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertSame(objectMapper0, objectMapper1);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertNotNull(byteQuadsCanonicalizer0);
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, sequenceInputStream0, objectMapper1, byteQuadsCanonicalizer0, byteArray0, 3, 2394, false);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)1, (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getCreatorVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getFieldVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getSetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getIsGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getGetterVisibility());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      
      objectReader0._initForMultiRead((DeserializationContext) null, uTF8StreamJsonParser0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)1, (byte)0}, byteArray0);
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getCreatorVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getFieldVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getSetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getIsGetterVisibility());
      assertEquals(JsonAutoDetect.Visibility.DEFAULT, jsonAutoDetect_Value0.getGetterVisibility());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertSame(objectMapper0, objectMapper1);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(0, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1718);
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(131072, mapperFeature0.getMask());
      assertEquals(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, mapperFeature0);
      
      IntNode intNode0 = IntNode.valueOf(1718);
      assertNotNull(intNode0);
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isEmpty());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isShort());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertNull(intNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isNaN());
      assertEquals(1718L, intNode0.longValue());
      assertFalse(intNode0.booleanValue());
      assertEquals((short)1718, intNode0.shortValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertEquals(1718.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isArray());
      assertEquals(1718, intNode0.intValue());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(1718.0F, intNode0.floatValue(), 0.01F);
      
      ArrayNode arrayNode1 = (ArrayNode)objectReader0._bind(jsonParser0, intNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isEmpty());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isShort());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertNull(intNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isNaN());
      assertEquals(1718L, intNode0.longValue());
      assertFalse(intNode0.booleanValue());
      assertEquals((short)1718, intNode0.shortValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertEquals(1718.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isArray());
      assertEquals(1718, intNode0.intValue());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(1718.0F, intNode0.floatValue(), 0.01F);
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isShort());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.booleanValue());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertEquals(0, arrayNode1.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isFloat());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      try { 
        objectReader0._inputStream(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DataInput dataInput0 = null;
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      
      try { 
        objectReader0._inputStream(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      // Undeclared exception!
      try { 
        objectReader0._inputStream(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.withoutAttribute(objectMapper0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertSame(objectReader0, objectReader1);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isShort());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader2 = objectReader1.withoutAttribute(objectMapper0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      try { 
        objectReader0.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute((Object) null);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotNull(contextAttributes1);
      
      HashMap<MapType, DecimalNode> hashMap0 = new HashMap<MapType, DecimalNode>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ContextAttributes contextAttributes2 = contextAttributes1.withSharedAttributes(hashMap0);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes2));
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader1 = objectReader0.withHandler(deserializationProblemHandler0);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes2));
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<BooleanNode> class0 = BooleanNode.class;
      ObjectReader objectReader2 = objectMapper0.readerWithView(class0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.ESCAPE_NON_ASCII;
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.configure(jsonWriteFeature0, false);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertNotNull(jsonFactoryBuilder1);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder1);
      assertNotNull(jsonFactory0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectReader objectReader3 = objectReader0._new(objectReader2, jsonFactory0);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes2));
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertNotNull(objectReader3);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndCloseAsTree((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[1];
      try { 
        objectReader0.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      assertFalse(boolean0);
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>(1731, 1731, 1);
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertNotNull(objectNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ObjectNode objectNode1 = objectNode0.put("8w2`wNnh(r_>_3@", float0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isInt());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      
      ArrayNode arrayNode0 = objectNode1.putArray("8w2`wNnh(r_>_3@");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(arrayNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isInt());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isInt());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayNode arrayNode1 = objectNode1.putArray("8w2`wNnh(r_>_3@");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(arrayNode1, arrayNode0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isInt());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isMissingNode());
      assertTrue(arrayNode1.isArray());
      assertEquals(0, arrayNode1.size());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isFloat());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isDouble());
      assertTrue(arrayNode1.isEmpty());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectReaderArray0.length);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      try { 
        objectReader1.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertNotNull(jsonFactory0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory1);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      StringReader stringReader0 = new StringReader("JSON");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2), stringReader0, objectReader0, charsToNameCanonicalizer0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(readerBasedJsonParser0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals((-2), readerBasedJsonParser0.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(defaultDeserializationContext0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals((-2), readerBasedJsonParser0.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory2, (DefaultSerializerProvider) null, defaultDeserializationContext0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectMapper2);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals((-2), readerBasedJsonParser0.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      
      ObjectReader objectReader1 = objectMapper2.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals((-2), readerBasedJsonParser0.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte) (-1);
      try { 
        objectReader1.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 1)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0001@z\u0002\uFFFDV\uFFFD\uFFFD\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute((Object) null);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotNull(contextAttributes1);
      
      HashMap<MapType, DecimalNode> hashMap0 = new HashMap<MapType, DecimalNode>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ContextAttributes contextAttributes2 = contextAttributes1.withSharedAttributes(hashMap0);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertNotNull(contextAttributes2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes2));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndCloseAsTree((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      PriorityQueue<ObjectReader> priorityQueue0 = new PriorityQueue<ObjectReader>();
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(priorityQueue0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, priorityQueue0.size());
      
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(priorityQueue0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, priorityQueue0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(10241, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(10241, jsonFactory1.getParserFeatures());
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(10241, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(10241, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(10241, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotNull(jsonFactory3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser("JSON");
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      
      try { 
        objectReader1.readValue((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertNotNull(jsonFactory2);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(28, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(28, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(28, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertNotNull(jsonFactory3);
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(28, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(28, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(28, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(28, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'W';
      charArray0[2] = 'f';
      charArray0[3] = 'R';
      charArray0[4] = 'o';
      charArray0[5] = '/';
      charArray0[6] = '-';
      charArray0[7] = 'i';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser(charArray0);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'v', 'W', 'f', 'R', 'o', '/', '-', 'i'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(28, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(28, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(28, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(28, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      
      try { 
        objectReader1.readValue((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'vWfRo': was expecting ('true', 'false' or 'null')
         //  at [Source: (char[])\"vWfRo/-i\"; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      POJONode pOJONode0 = new POJONode(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(pOJONode0);
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isShort());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertEquals(0, pOJONode0.size());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isBigInteger());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      POJONode pOJONode1 = new POJONode(pOJONode0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(pOJONode1.equals((Object)pOJONode0));
      assertNotNull(pOJONode1);
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isShort());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertEquals(0, pOJONode0.size());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode1.isLong());
      assertFalse(pOJONode1.isMissingNode());
      assertEquals(0, pOJONode1.size());
      assertFalse(pOJONode1.isInt());
      assertFalse(pOJONode1.isFloatingPointNumber());
      assertFalse(pOJONode1.isDouble());
      assertFalse(pOJONode1.isShort());
      assertEquals(JsonNodeType.POJO, pOJONode1.getNodeType());
      assertNull(pOJONode1.numberType());
      assertFalse(pOJONode1.isObject());
      assertFalse(pOJONode1.booleanValue());
      assertTrue(pOJONode1.isEmpty());
      assertFalse(pOJONode1.isBigDecimal());
      assertFalse(pOJONode1.isBigInteger());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode1.asToken());
      assertFalse(pOJONode1.isIntegralNumber());
      assertFalse(pOJONode1.isFloat());
      assertNull(pOJONode1.textValue());
      assertFalse(pOJONode1.isArray());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pOJONode1, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(pOJONode0.equals((Object)pOJONode1));
      assertFalse(pOJONode1.equals((Object)pOJONode0));
      assertNotNull(iOContext0);
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isShort());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertEquals(0, pOJONode0.size());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode1.isLong());
      assertFalse(pOJONode1.isMissingNode());
      assertEquals(0, pOJONode1.size());
      assertFalse(pOJONode1.isInt());
      assertFalse(pOJONode1.isFloatingPointNumber());
      assertFalse(pOJONode1.isDouble());
      assertFalse(pOJONode1.isShort());
      assertEquals(JsonNodeType.POJO, pOJONode1.getNodeType());
      assertNull(pOJONode1.numberType());
      assertFalse(pOJONode1.isObject());
      assertFalse(pOJONode1.booleanValue());
      assertTrue(pOJONode1.isEmpty());
      assertFalse(pOJONode1.isBigDecimal());
      assertFalse(pOJONode1.isBigInteger());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode1.asToken());
      assertFalse(pOJONode1.isIntegralNumber());
      assertFalse(pOJONode1.isFloat());
      assertNull(pOJONode1.textValue());
      assertFalse(pOJONode1.isArray());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotSame(pOJONode0, pOJONode1);
      assertNotSame(pOJONode1, pOJONode0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(pOJONode0.equals((Object)pOJONode1));
      assertFalse(pOJONode1.equals((Object)pOJONode0));
      assertNotNull(iOContext1);
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isShort());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertEquals(0, pOJONode0.size());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode1.isLong());
      assertFalse(pOJONode1.isMissingNode());
      assertEquals(0, pOJONode1.size());
      assertFalse(pOJONode1.isInt());
      assertFalse(pOJONode1.isFloatingPointNumber());
      assertFalse(pOJONode1.isDouble());
      assertFalse(pOJONode1.isShort());
      assertEquals(JsonNodeType.POJO, pOJONode1.getNodeType());
      assertNull(pOJONode1.numberType());
      assertFalse(pOJONode1.isObject());
      assertFalse(pOJONode1.booleanValue());
      assertTrue(pOJONode1.isEmpty());
      assertFalse(pOJONode1.isBigDecimal());
      assertFalse(pOJONode1.isBigInteger());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode1.asToken());
      assertFalse(pOJONode1.isIntegralNumber());
      assertFalse(pOJONode1.isFloat());
      assertNull(pOJONode1.textValue());
      assertFalse(pOJONode1.isArray());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, (Reader) null, objectMapper0, charsToNameCanonicalizer1);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(pOJONode0.equals((Object)pOJONode1));
      assertFalse(pOJONode1.equals((Object)pOJONode0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isShort());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertEquals(0, pOJONode0.size());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode1.isLong());
      assertFalse(pOJONode1.isMissingNode());
      assertEquals(0, pOJONode1.size());
      assertFalse(pOJONode1.isInt());
      assertFalse(pOJONode1.isFloatingPointNumber());
      assertFalse(pOJONode1.isDouble());
      assertFalse(pOJONode1.isShort());
      assertEquals(JsonNodeType.POJO, pOJONode1.getNodeType());
      assertNull(pOJONode1.numberType());
      assertFalse(pOJONode1.isObject());
      assertFalse(pOJONode1.booleanValue());
      assertTrue(pOJONode1.isEmpty());
      assertFalse(pOJONode1.isBigDecimal());
      assertFalse(pOJONode1.isBigInteger());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode1.asToken());
      assertFalse(pOJONode1.isIntegralNumber());
      assertFalse(pOJONode1.isFloat());
      assertNull(pOJONode1.textValue());
      assertFalse(pOJONode1.isArray());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.disable(jsonParser_Feature1);
      assertNotSame(pOJONode0, pOJONode1);
      assertNotSame(pOJONode1, pOJONode0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(pOJONode0.equals((Object)pOJONode1));
      assertFalse(pOJONode1.equals((Object)pOJONode0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertNotNull(readerBasedJsonParser1);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isShort());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertEquals(0, pOJONode0.size());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode1.isLong());
      assertFalse(pOJONode1.isMissingNode());
      assertEquals(0, pOJONode1.size());
      assertFalse(pOJONode1.isInt());
      assertFalse(pOJONode1.isFloatingPointNumber());
      assertFalse(pOJONode1.isDouble());
      assertFalse(pOJONode1.isShort());
      assertEquals(JsonNodeType.POJO, pOJONode1.getNodeType());
      assertNull(pOJONode1.numberType());
      assertFalse(pOJONode1.isObject());
      assertFalse(pOJONode1.booleanValue());
      assertTrue(pOJONode1.isEmpty());
      assertFalse(pOJONode1.isBigDecimal());
      assertFalse(pOJONode1.isBigInteger());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode1.asToken());
      assertFalse(pOJONode1.isIntegralNumber());
      assertFalse(pOJONode1.isFloat());
      assertNull(pOJONode1.textValue());
      assertFalse(pOJONode1.isArray());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      
      Class<Integer> class0 = Integer.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      assertNotNull(typeBindings0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      Class<BigIntegerNode> class1 = BigIntegerNode.class;
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      assertNotSame(typeBindings1, typeBindings0);
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(typeBindings1);
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings1);
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(collectionType0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      
      CollectionType collectionType1 = collectionType0.withValueHandler(objectReader0);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(typeBindings1, typeBindings0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(collectionType1);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isAbstract());
      assertEquals(0, collectionType1.containedTypeCount());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isFinal());
      
      CollectionType collectionType2 = (CollectionType)collectionType1.withContentTypeHandler(class2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(collectionType2);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isAbstract());
      assertEquals(0, collectionType1.containedTypeCount());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType2.isAbstract());
      assertTrue(collectionType2.isCollectionLikeType());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.useStaticType());
      assertTrue(collectionType2.hasHandlers());
      assertEquals(0, collectionType2.containedTypeCount());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isArrayType());
      assertTrue(collectionType2.isContainerType());
      assertFalse(collectionType2.isFinal());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isEnumType());
      assertTrue(collectionType2.hasContentType());
      
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionType2, javaTypeArray0, (JavaType) collectionType1, (JavaType) resolvedRecursiveType0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(mapType0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isConcrete());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isAbstract());
      assertEquals(0, collectionType1.containedTypeCount());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType2.isAbstract());
      assertTrue(collectionType2.isCollectionLikeType());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.useStaticType());
      assertTrue(collectionType2.hasHandlers());
      assertEquals(0, collectionType2.containedTypeCount());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isArrayType());
      assertTrue(collectionType2.isContainerType());
      assertFalse(collectionType2.isFinal());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isEnumType());
      assertTrue(collectionType2.hasContentType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.hasHandlers());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser1, (JavaType) mapType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.ObjectReader cannot be cast to com.fasterxml.jackson.databind.KeyDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = null;
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[1] = 'I';
      charArray0[2] = ']';
      charArray0[3] = 'l';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser(charArray0, 807, 807);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'B', 'I', ']', 'l'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'B', 'I', ']', 'l'}, charArray0);
      assertNotNull(jsonParserSequence0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ArrayList> class0 = ArrayList.class;
      Class<BeanDeserializer> class1 = BeanDeserializer.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      assertNotNull(collectionType0);
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isFinal());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      
      CollectionType collectionType1 = collectionType0.withValueHandler(class1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      assertFalse(collectionType0.useStaticType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isFinal());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType1.isInterface());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.isAbstract());
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) jsonParserSequence0, (JavaType) collectionType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 807
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte) (-1));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1), byteArrayInputStream0.available());
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals((-1), byteArrayInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(filteringParserDelegate0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals((-1), byteArrayInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNull(formatSchema0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals((-1), byteArrayInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      
      byteArrayInputStream0.reset();
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertEquals((-1), byteArrayInputStream0.available());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      assertNotNull(simpleType0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      
      Class<NullNode> class1 = NullNode.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) vector0);
      assertNotNull(typeBindings0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      assertNotNull(arrayType0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      assertNotNull(mapType0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      
      Integer integer0 = new Integer((byte)3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      MapType mapType1 = mapType0.withKeyValueHandler(integer0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(mapType1);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.useStaticType());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isFinal());
      
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(mapType1);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertNotSame(arrayType1, arrayType0);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotNull(arrayType1);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.useStaticType());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isFinal());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isArrayType());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isAbstract());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.useStaticType());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) filteringParserDelegate0, (JavaType) arrayType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.MapType cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      JsonNode jsonNode0 = objectReader0.createObjectNode();
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isObject());
      assertNull(jsonNode0.textValue());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isMissingNode());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      String string0 = "";
      JsonNode jsonNode0 = objectReader0.createObjectNode();
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isMissingNode());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloatingPointNumber());
      
      JsonFactory jsonFactory0 = null;
      try {
        jsonFactory0 = new JsonFactory((JsonFactoryBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      // Undeclared exception!
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      
      String string0 = "'7}`^>eQ20'25U3 B";
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(23, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(23, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(23, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser("JSON");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(readerBasedJsonParser0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(23, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(23, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(23, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      
      try { 
        objectReader0._bindAndCloseAsTree(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      assertNotNull(booleanNode0);
      assertFalse(booleanNode0.isFloat());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isBigInteger());
      assertNull(booleanNode0.textValue());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertTrue(booleanNode0.booleanValue());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isLong());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isArray());
      assertTrue(booleanNode0.asBoolean());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isMissingNode());
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertNotNull(nioPathDeserializer0);
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate((Object) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      // Undeclared exception!
      try { 
        objectReader1.with(deserializationFeature0, (DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      assertFalse(linkedList0.contains(objectReader0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ObjectReader objectReader1 = objectReader0.withRootName("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.withRootName("");
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[20];
      try { 
        objectReader0.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ShortNode> class0 = ShortNode.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals(1, objectMapper0.mixInCount());
      assertEquals(1, objectMapper1.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(objectMapper0, objectMapper1);
      assertNotNull(objectReader0);
      assertEquals(1, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-32);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-34), (byte) (-32)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-34), (byte) (-32)}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xe0
         //  at [Source: (DataInputStream); line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)56;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 3365);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-61), (byte)56}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-61), (byte)56}, byteArray0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      assertSame(tokenFilter1, tokenFilter0);
      assertNotNull(tokenFilter1);
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, true, false);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-61), (byte)56}, byteArray0);
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.currentToken());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertNotSame(objectReader0, objectReader1);
      assertSame(tokenFilter1, tokenFilter0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-61), (byte)56}, byteArray0);
      assertNull(formatSchema0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.currentToken());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArrayInputStream0.reset();
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-61), (byte)56}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-61), (byte)56}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      try { 
        objectReader1.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x38
         //  at [Source: (DataInputStream); line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8321, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8321, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8321, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8321, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8321, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8321, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      assertNotNull(objectNode0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isShort());
      
      ObjectNode objectNode1 = objectNode0.putRawValue("", (RawValue) null);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isEmpty());
      
      ObjectNode objectNode2 = objectNode1.put("Vb<R=b7R2mR6FeBy", 0L);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertNotNull(objectNode2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isShort());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isDouble());
      assertEquals("", objectNode2.asText());
      
      Double double0 = new Double(0L);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      ObjectNode objectNode3 = objectNode2.put((String) null, double0);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode1);
      assertNotNull(objectNode3);
      assertFalse(objectNode3.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isEmpty());
      assertEquals(3, objectNode3.size());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.booleanValue());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isInt());
      assertNull(objectNode3.numberType());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isMissingNode());
      assertFalse(objectNode3.isFloat());
      assertNull(objectNode3.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isLong());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isDouble());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isArray());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertEquals(3, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isDouble());
      assertEquals("", objectNode2.asText());
      
      ObjectNode objectNode4 = objectNode3.deepCopy();
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode0);
      assertNotSame(objectNode3, objectNode4);
      assertSame(objectNode3, objectNode2);
      assertNotSame(objectNode4, objectNode0);
      assertNotSame(objectNode4, objectNode3);
      assertNotSame(objectNode4, objectNode1);
      assertNotSame(objectNode4, objectNode2);
      assertNotSame(objectNode0, objectNode4);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode3);
      assertNotSame(objectNode1, objectNode4);
      assertNotSame(objectNode2, objectNode4);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode1);
      assertTrue(objectNode4.equals((Object)objectNode1));
      assertTrue(objectNode4.equals((Object)objectNode0));
      assertTrue(objectNode4.equals((Object)objectNode3));
      assertTrue(objectNode4.equals((Object)objectNode2));
      assertNotNull(objectNode4);
      assertFalse(objectNode3.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isEmpty());
      assertEquals(3, objectNode3.size());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.booleanValue());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isInt());
      assertNull(objectNode3.numberType());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isMissingNode());
      assertFalse(objectNode3.isFloat());
      assertNull(objectNode3.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isLong());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isDouble());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode4.getNodeType());
      assertFalse(objectNode4.isBigDecimal());
      assertFalse(objectNode4.isEmpty());
      assertTrue(objectNode4.isObject());
      assertNull(objectNode4.textValue());
      assertFalse(objectNode4.isBigInteger());
      assertFalse(objectNode4.isShort());
      assertFalse(objectNode4.isInt());
      assertEquals(3, objectNode4.size());
      assertEquals(JsonToken.START_OBJECT, objectNode4.asToken());
      assertFalse(objectNode4.isMissingNode());
      assertFalse(objectNode4.isLong());
      assertFalse(objectNode4.isDouble());
      assertFalse(objectNode4.booleanValue());
      assertNull(objectNode4.numberType());
      assertFalse(objectNode4.isIntegralNumber());
      assertEquals("", objectNode4.asText());
      assertFalse(objectNode4.isArray());
      assertFalse(objectNode4.isFloat());
      assertFalse(objectNode4.isFloatingPointNumber());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertEquals(3, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.textValue());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isDouble());
      assertEquals("", objectNode2.asText());
      
      Class<Integer> class0 = Integer.class;
      try { 
        objectReader0.treeToValue((TreeNode) objectNode4, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `java.lang.Integer` out of START_OBJECT token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertNotNull(missingNode0);
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertEquals("", missingNode0.asText());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isFloat());
      assertNull(missingNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isEmpty());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      NullNode nullNode0 = NullNode.instance;
      assertNotNull(nullNode0);
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isDouble());
      assertEquals("null", nullNode0.asText());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isObject());
      assertNull(nullNode0.numberType());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.isInt());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isShort());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isBigInteger());
      
      ObjectReader objectReader2 = objectReader0.forType(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        objectReader0.readValues(byteArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[22];
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(0, jsonNode0.size());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMaxInputLookahead((byte)0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals(0, objectReaderArray0.length);
      assertNotNull(dataFormatReaders1);
      
      System.setCurrentTimeMillis((-2147483648L));
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8192, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(8192, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      
      ObjectReader objectReader1 = objectReader0.with(jsonFactory2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8192, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(8192, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      assertNotNull(booleanNode0);
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isBigInteger());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isMissingNode());
      assertTrue(booleanNode0.asBoolean());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isArray());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isFloat());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isLong());
      assertEquals("true", booleanNode0.asText());
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertNotNull(nioPathDeserializer0);
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(nioPathDeserializer0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, deserializationFeatureArray0.length);
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      
      MappingIterator<BeanDeserializer> mappingIterator0 = objectReader2.readValues("");
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, deserializationFeatureArray0.length);
      assertNotNull(mappingIterator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      try { 
        objectReader0.readValues(byteArray0, (-1295), (-1295));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte) (-1));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1), byteArrayInputStream0.available());
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals((-1), byteArrayInputStream0.available());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(filteringParserDelegate0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals((-1), byteArrayInputStream0.available());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)3}, byteArray0);
      assertNull(formatSchema0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals((-1), byteArrayInputStream0.available());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      
      byteArrayInputStream0.reset();
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)3}, byteArray0);
      assertEquals((-1), byteArrayInputStream0.available());
      
      Version version0 = objectReader0.version();
      assertNotNull(version0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertFalse(version0.isUnknownVersion());
      assertTrue(version0.isSnapshot());
      assertEquals(2, version0.getMajorVersion());
      assertEquals(10, version0.getMinorVersion());
      assertFalse(version0.isUknownVersion());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals(0, version0.getPatchLevel());
      
      try { 
        objectReader0.readValues(byteArray0, (int) 0, (int)  (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\u0000\uFFFD\u0003\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator(" for format ");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" for format ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" for format ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, (DefaultSerializerProvider) null, defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" for format ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" for format ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<SimpleType> class0 = SimpleType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(referenceType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(referenceType0, simpleType0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(referenceType1);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isConcrete());
      assertTrue(referenceType1.isReferenceType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.hasHandlers());
      
      ReferenceType referenceType2 = referenceType1.withContentTypeHandler(class0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(referenceType2);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isConcrete());
      assertTrue(referenceType1.isReferenceType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType2.useStaticType());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isEnumType());
      assertFalse(referenceType2.hasHandlers());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isInterface());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isAbstract());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.isReferenceType());
      
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(referenceType2, referenceType2, referenceType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(mapLikeType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isConcrete());
      assertTrue(referenceType1.isReferenceType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType2.useStaticType());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isEnumType());
      assertFalse(referenceType2.hasHandlers());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isInterface());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isAbstract());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) mapLikeType0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(objectReader0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" for format ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" for format ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isConcrete());
      assertTrue(referenceType1.isReferenceType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType2.useStaticType());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isEnumType());
      assertFalse(referenceType2.hasHandlers());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isInterface());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isAbstract());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      SimpleType simpleType1 = SimpleType.constructUnsafe(class1);
      assertNotSame(simpleType1, simpleType0);
      assertFalse(simpleType1.equals((Object)simpleType0));
      assertNotNull(simpleType1);
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.isFinal());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.isArrayType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isAbstract());
      
      byte[] byteArray0 = new byte[0];
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a Value deserializer for type [map-like type; class com.fasterxml.jackson.databind.type.SimpleType, [reference type, class com.fasterxml.jackson.databind.type.SimpleType<com.fasterxml.jackson.databind.type.SimpleType><[simple type, class com.fasterxml.jackson.databind.type.SimpleType]>] -> [reference type, class com.fasterxml.jackson.databind.type.SimpleType<com.fasterxml.jackson.databind.type.SimpleType><[simple type, class com.fasterxml.jackson.databind.type.SimpleType]>]]
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      Version version0 = objectReader0.version();
      assertSame(objectReader0, objectReader1);
      assertNotNull(version0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(10, version0.getMinorVersion());
      assertTrue(version0.isSnapshot());
      assertFalse(version0.isUknownVersion());
      assertEquals(2, version0.getMajorVersion());
      assertFalse(version0.isUnknownVersion());
      assertEquals(0, version0.getPatchLevel());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      StringReader stringReader0 = new StringReader("rxx.#~hLU<8");
      assertNotNull(stringReader0);
      
      Version version0 = objectReader1.version();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(version0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertFalse(version0.isUnknownVersion());
      assertTrue(version0.isSnapshot());
      assertEquals(10, version0.getMinorVersion());
      assertFalse(version0.isUknownVersion());
      assertEquals(2, version0.getMajorVersion());
      assertEquals(0, version0.getPatchLevel());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      
      try { 
        objectReader1.readTree((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'rxx': was expecting ('true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Fe`W{i.X:9y]s");
      assertFalse(boolean0);
      
      TextNode textNode0 = jsonNodeFactory0.textNode(";'[R*$bw");
      assertNotNull(textNode0);
      assertFalse(textNode0.isBigDecimal());
      assertTrue(textNode0.isEmpty());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isFloatingPointNumber());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isLong());
      assertEquals(";'[R*$bw", textNode0.asText());
      assertEquals(";'[R*$bw", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isDouble());
      
      // Undeclared exception!
      try { 
        objectReader0.writeTree((JsonGenerator) null, textNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      char[] charArray0 = new char[3];
      ContextAttributes contextAttributes0 = objectReader0.getAttributes();
      assertNotNull(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory1 = new JsonFactory();
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      
      NullNode nullNode0 = NullNode.instance;
      assertNotNull(nullNode0);
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.booleanValue());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isArray());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isLong());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isObject());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isBigDecimal());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isBigInteger());
      
      // Undeclared exception!
      try { 
        objectReader0.writeTree((JsonGenerator) null, nullNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<FloatNode> class0 = FloatNode.class;
      Class<BooleanNode> class1 = BooleanNode.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      assertNotNull(collectionLikeType0);
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.useStaticType());
      
      String string0 = collectionLikeType0.getErasedSignature();
      assertNotNull(string0);
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals("Lcom/fasterxml/jackson/databind/node/FloatNode;", string0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) collectionLikeType0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.useStaticType());
      
      ObjectReader objectReader1 = objectReader0.forType((JavaType) collectionLikeType0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.useStaticType());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      String string1 = "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0._inputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      
      ObjectMapper objectMapper1 = new ObjectMapper((JsonFactory) null);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(jsonNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      
      TypeReference<BinaryNode> typeReference0 = (TypeReference<BinaryNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.readValues(jsonParser0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isIntegralNumber());
      assertTrue(jsonNode0.isEmpty());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isMissingNode());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isFloat());
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader1.with((TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.BaseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo((JsonSetter.Value) null);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      
      StringReader stringReader0 = new StringReader("JSON");
      assertNotNull(stringReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((Reader) stringReader0);
      assertSame(objectMapper0, objectMapper1);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      
      try { 
        objectReader0._bindAsTree(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = 'R';
      charArray0[2] = ';';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0, 2, 2885);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'4', 'R', ';'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'4', 'R', ';'}, charArray0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findTreeDeserializer(defaultDeserializationContext_Impl0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'4', 'R', ';'}, charArray0);
      assertNotNull(jsonDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[9];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      objectReaderArray0[7] = objectReader0;
      objectReaderArray0[8] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(9, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with(objectReaderArray0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals(9, objectReaderArray0.length);
      assertNotNull(dataFormatReaders1);
      
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertEquals(9, objectReaderArray0.length);
      assertNotNull(dataFormatReaders2);
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(9, objectReaderArray0.length);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      try { 
        objectReader0._bindAsTree(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (';' (code 59)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (char[])\"4R;\"; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      JsonNode jsonNode0 = objectReader1.readTree((InputStream) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isIntegralNumber());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature1;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature1, deserializationFeatureArray0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      try { 
        objectReader1.readValues("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      assertNotNull(booleanNode0);
      assertFalse(booleanNode0.isBigInteger());
      assertNull(booleanNode0.textValue());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isFloat());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isLong());
      assertTrue(booleanNode0.asBoolean());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isShort());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isArray());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(booleanNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(booleanNode0.isBigInteger());
      assertNull(booleanNode0.textValue());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isFloat());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isLong());
      assertTrue(booleanNode0.asBoolean());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isShort());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isArray());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      
      ObjectReader objectReader2 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      deserializationFeatureArray0[5] = deserializationFeature1;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader3 = objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotNull(objectReader3);
      assertEquals(0, objectMapper0.mixInCount());
      
      try { 
        objectReader0.readValues("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        objectReader0.readValues((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      ObjectReader objectReader2 = objectReader1.forType(class0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        objectReader2.readTree((InputStream) bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      JsonNode jsonNode0 = objectReader1.readTree((InputStream) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertEquals("", jsonNode0.asText());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      try { 
        objectReader0.readValue((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (ByteArrayInputStream); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      
      try { 
        objectReader0.readValues((JsonParser) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      System.setCurrentTimeMillis(228L);
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      
      ObjectNode objectNode1 = objectNode0.put("", (short) (-1319));
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      
      Double double0 = new Double((-1100.9));
      assertNotNull(double0);
      assertEquals((-1100.9), (double)double0, 0.01);
      
      DoubleNode doubleNode0 = (DoubleNode)jsonNodeFactory0.numberNode(double0);
      assertNotNull(doubleNode0);
      assertEquals((short) (-1100), doubleNode0.shortValue());
      assertFalse(doubleNode0.booleanValue());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isObject());
      assertEquals((-1100), doubleNode0.intValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isBigInteger());
      assertEquals((-1100.9F), doubleNode0.floatValue(), 0.01F);
      assertEquals((-1100L), doubleNode0.longValue());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertEquals((-1100.9), doubleNode0.doubleValue(), 0.01);
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isFloat());
      
      ObjectNode objectNode2 = objectNode1.putObject("JSON");
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertNotNull(objectNode2);
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(2, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode2.isBigInteger());
      assertTrue(objectNode2.isEmpty());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertEquals(0, objectNode2.size());
      assertEquals("", objectNode2.asText());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      
      ArrayNode arrayNode0 = objectNode2.withArray("JSON");
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertNotNull(arrayNode0);
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(2, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(1, objectNode2.size());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(arrayNode0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertNotNull(objectReader0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(2, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(1, objectNode2.size());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertNotNull(objectReader1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(2, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(1, objectNode2.size());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.getEmpty();
      assertNotNull(contextAttributes_Impl0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1388.6965163924));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1388), bigDecimal0.shortValue());
      assertEquals((byte) (-108), bigDecimal0.byteValue());
      
      DecimalNode decimalNode0 = (DecimalNode)jsonNodeFactory0.numberNode(bigDecimal0);
      assertNotNull(decimalNode0);
      assertEquals((short) (-1388), bigDecimal0.shortValue());
      assertEquals((byte) (-108), bigDecimal0.byteValue());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isShort());
      assertEquals(0, decimalNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isNaN());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isArray());
      assertTrue(decimalNode0.isBigDecimal());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isBigInteger());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isInt());
      
      Object object0 = contextAttributes_Impl0.getAttribute(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNull(object0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      
      ObjectReader objectReader2 = objectReader0.with((ContextAttributes) contextAttributes_Impl0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertNotNull(objectReader2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(2, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(1, objectNode2.size());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      
      ObjectReader objectReader3 = objectReader1.forType((JavaType) null);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader1, objectReader3);
      assertSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(2, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(1, objectNode2.size());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      MappingIterator<BeanDeserializer> mappingIterator0 = objectReader2.readValues("");
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertNotNull(mappingIterator0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(2, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(1, objectNode2.size());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = '2';
      charArray0[2] = 'u';
      charArray0[3] = 'B';
      charArray0[4] = 'r';
      charArray0[5] = 'H';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0, 7307, (-2175));
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'p', '2', 'u', 'B', 'r', 'H'}, charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      
      MappingIterator<BinaryNode> mappingIterator1 = objectReader0.readValues((JsonParser) readerBasedJsonParser0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'p', '2', 'u', 'B', 'r', 'H'}, charArray0);
      assertNotNull(mappingIterator1);
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(2, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(1, objectNode2.size());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertNotNull(nioPathDeserializer0);
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(nioPathDeserializer0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      MappingIterator<BeanDeserializer> mappingIterator0 = objectReader1.readValues("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(mappingIterator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[1];
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      try { 
        objectReader0._findRootDeserializer(deserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertNotNull(objectMapper0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)23;
      Class<MapLikeType> class0 = MapLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(objectReader0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      try { 
        objectReader0._findRootDeserializer(defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      // Undeclared exception!
      try { 
        objectReader0.with(deserializationFeature0, (DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.withType((Type) class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectReader objectReader2 = objectMapper0.reader();
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      
      MockFile mockFile0 = new MockFile("t)oW@L1");
      assertNotNull(mockFile0);
      
      try { 
        objectReader2.readValue((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection((ObjectReader[]) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute((Object) null);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotNull(contextAttributes1);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      // Undeclared exception!
      try { 
        objectReader0.without(deserializationFeature0, (DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte) (-1));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1), byteArrayInputStream0.available());
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals((-1), byteArrayInputStream0.available());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(filteringParserDelegate0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals((-1), byteArrayInputStream0.available());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)3}, byteArray0);
      assertNull(formatSchema0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals((-1), byteArrayInputStream0.available());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[8];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(1, jsonReadFeature0.getMask());
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature0);
      
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES;
      assertNotSame(jsonReadFeature1, jsonReadFeature0);
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature1.enabledByDefault());
      assertEquals(8, jsonReadFeature1.getMask());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature1.mappedFeature());
      assertEquals(0, jsonReadFeature1.collectDefaults());
      assertEquals(JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature1);
      
      formatFeatureArray0[1] = (FormatFeature) jsonReadFeature1;
      JsonReadFeature jsonReadFeature2 = JsonReadFeature.ALLOW_SINGLE_QUOTES;
      assertNotSame(jsonReadFeature2, jsonReadFeature1);
      assertNotSame(jsonReadFeature2, jsonReadFeature0);
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature0));
      assertEquals(0, jsonReadFeature2.collectDefaults());
      assertFalse(jsonReadFeature2.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_SINGLE_QUOTES, jsonReadFeature2.mappedFeature());
      assertEquals(4, jsonReadFeature2.getMask());
      assertEquals(JsonReadFeature.ALLOW_SINGLE_QUOTES, jsonReadFeature2);
      
      formatFeatureArray0[2] = (FormatFeature) jsonReadFeature2;
      JsonReadFeature jsonReadFeature3 = JsonReadFeature.ALLOW_YAML_COMMENTS;
      assertNotSame(jsonReadFeature3, jsonReadFeature2);
      assertNotSame(jsonReadFeature3, jsonReadFeature0);
      assertNotSame(jsonReadFeature3, jsonReadFeature1);
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature3.enabledByDefault());
      assertEquals(0, jsonReadFeature3.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_YAML_COMMENTS, jsonReadFeature3.mappedFeature());
      assertEquals(2, jsonReadFeature3.getMask());
      assertEquals(JsonReadFeature.ALLOW_YAML_COMMENTS, jsonReadFeature3);
      
      formatFeatureArray0[3] = (FormatFeature) jsonReadFeature3;
      JsonReadFeature jsonReadFeature4 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertNotSame(jsonReadFeature4, jsonReadFeature2);
      assertNotSame(jsonReadFeature4, jsonReadFeature0);
      assertNotSame(jsonReadFeature4, jsonReadFeature3);
      assertNotSame(jsonReadFeature4, jsonReadFeature1);
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature3));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature1));
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature4.mappedFeature());
      assertEquals(512, jsonReadFeature4.getMask());
      assertEquals(0, jsonReadFeature4.collectDefaults());
      assertFalse(jsonReadFeature4.enabledByDefault());
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature4);
      
      formatFeatureArray0[4] = (FormatFeature) jsonReadFeature4;
      JsonReadFeature jsonReadFeature5 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      assertNotSame(jsonReadFeature5, jsonReadFeature2);
      assertNotSame(jsonReadFeature5, jsonReadFeature1);
      assertNotSame(jsonReadFeature5, jsonReadFeature0);
      assertNotSame(jsonReadFeature5, jsonReadFeature3);
      assertNotSame(jsonReadFeature5, jsonReadFeature4);
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature3));
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature4));
      assertEquals(64, jsonReadFeature5.getMask());
      assertFalse(jsonReadFeature5.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS, jsonReadFeature5.mappedFeature());
      assertEquals(0, jsonReadFeature5.collectDefaults());
      assertEquals(JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS, jsonReadFeature5);
      
      formatFeatureArray0[5] = (FormatFeature) jsonReadFeature5;
      JsonReadFeature jsonReadFeature6 = JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      assertNotSame(jsonReadFeature6, jsonReadFeature2);
      assertNotSame(jsonReadFeature6, jsonReadFeature0);
      assertNotSame(jsonReadFeature6, jsonReadFeature5);
      assertNotSame(jsonReadFeature6, jsonReadFeature3);
      assertNotSame(jsonReadFeature6, jsonReadFeature1);
      assertNotSame(jsonReadFeature6, jsonReadFeature4);
      assertFalse(jsonReadFeature6.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature6.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature6.equals((Object)jsonReadFeature5));
      assertFalse(jsonReadFeature6.equals((Object)jsonReadFeature3));
      assertFalse(jsonReadFeature6.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature6.equals((Object)jsonReadFeature4));
      assertEquals(32, jsonReadFeature6.getMask());
      assertFalse(jsonReadFeature6.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER, jsonReadFeature6.mappedFeature());
      assertEquals(0, jsonReadFeature6.collectDefaults());
      assertEquals(JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER, jsonReadFeature6);
      
      formatFeatureArray0[6] = (FormatFeature) jsonReadFeature6;
      JsonReadFeature jsonReadFeature7 = JsonReadFeature.ALLOW_MISSING_VALUES;
      assertNotSame(jsonReadFeature7, jsonReadFeature5);
      assertNotSame(jsonReadFeature7, jsonReadFeature6);
      assertNotSame(jsonReadFeature7, jsonReadFeature4);
      assertNotSame(jsonReadFeature7, jsonReadFeature2);
      assertNotSame(jsonReadFeature7, jsonReadFeature0);
      assertNotSame(jsonReadFeature7, jsonReadFeature3);
      assertNotSame(jsonReadFeature7, jsonReadFeature1);
      assertFalse(jsonReadFeature7.equals((Object)jsonReadFeature5));
      assertFalse(jsonReadFeature7.equals((Object)jsonReadFeature6));
      assertFalse(jsonReadFeature7.equals((Object)jsonReadFeature4));
      assertFalse(jsonReadFeature7.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature7.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature7.equals((Object)jsonReadFeature3));
      assertFalse(jsonReadFeature7.equals((Object)jsonReadFeature1));
      assertEquals(JsonParser.Feature.ALLOW_MISSING_VALUES, jsonReadFeature7.mappedFeature());
      assertFalse(jsonReadFeature7.enabledByDefault());
      assertEquals(0, jsonReadFeature7.collectDefaults());
      assertEquals(256, jsonReadFeature7.getMask());
      assertEquals(JsonReadFeature.ALLOW_MISSING_VALUES, jsonReadFeature7);
      
      formatFeatureArray0[7] = (FormatFeature) jsonReadFeature7;
      ObjectReader objectReader1 = objectReader0.withFeatures(formatFeatureArray0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(8, formatFeatureArray0.length);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.withFeatures((FormatFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      byte byte0 = (byte) (-1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte) (-1));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1), byteArrayInputStream0.available());
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals((-1), byteArrayInputStream0.available());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals((-1), byteArrayInputStream0.available());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNull(formatSchema0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals((-1), byteArrayInputStream0.available());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      int int0 = 3862;
      int int1 = (-1772);
      int int2 = (-1016);
      int int3 = 0;
      // Undeclared exception!
      try { 
        objectReader0.withFeatures((FormatFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte) (-1));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1), byteArrayInputStream0.available());
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals((-1), byteArrayInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals((-1), byteArrayInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNull(formatSchema0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals((-1), byteArrayInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      try { 
        objectReader0._reportUndetectableSource(objectMapper1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type com.fasterxml.jackson.databind.ObjectMapper with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      assertNotNull(booleanNode0);
      assertFalse(booleanNode0.isBigInteger());
      assertTrue(booleanNode0.isEmpty());
      assertEquals("true", booleanNode0.asText());
      assertNull(booleanNode0.textValue());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isArray());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isMissingNode());
      assertNull(booleanNode0.numberType());
      assertEquals(0, booleanNode0.size());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isShort());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      
      try { 
        objectReader0._reportUndetectableSource(arrayNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type com.fasterxml.jackson.databind.node.ArrayNode with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      
      // Undeclared exception!
      try { 
        objectReader0.withFeatures((DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">bpj3:aKE(D(]");
      assertFalse(boolean0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      deserializationFeatureArray0[1] = deserializationFeature1;
      ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      try { 
        objectReader0.readTree("'7}`^>eQ20'25U3 B");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (''' (code 39)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (String)\"'7}`^>eQ20'25U3 B\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 64, 64);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-64), byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals((-64), byteArrayInputStream0.available());
      
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ArrayDeque<ObjectReader> arrayDeque0 = new ArrayDeque<ObjectReader>();
      assertFalse(arrayDeque0.contains(objectReader0));
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(arrayDeque0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(arrayDeque0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(arrayDeque0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      // Undeclared exception!
      try { 
        objectReader1.readValue((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte) (-1));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1), byteArrayInputStream0.available());
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals((-1), byteArrayInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(filteringParserDelegate0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals((-1), byteArrayInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNull(formatSchema0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals((-1), byteArrayInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      
      byteArrayInputStream0.reset();
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertEquals((-1), byteArrayInputStream0.available());
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1), (byte)3}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals((-1), byteArrayInputStream0.available());
      
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        objectReader1.readValue((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type java.io.PipedReader with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      System.setCurrentTimeMillis(228L);
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertNotNull(objectMapper0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      
      short short0 = (short) (-1319);
      ObjectNode objectNode1 = objectNode0.put("", (short) (-1319));
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      
      Double double0 = new Double((-1100.9));
      assertNotNull(double0);
      assertEquals((-1100.9), (double)double0, 0.01);
      
      DoubleNode doubleNode0 = (DoubleNode)jsonNodeFactory0.numberNode(double0);
      assertNotNull(doubleNode0);
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertNull(doubleNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isArray());
      assertEquals((short) (-1100), doubleNode0.shortValue());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(0, doubleNode0.size());
      assertTrue(doubleNode0.canConvertToInt());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isNaN());
      assertEquals((-1100.9), doubleNode0.doubleValue(), 0.01);
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isFloat());
      assertEquals((-1100.9F), doubleNode0.floatValue(), 0.01F);
      assertEquals((-1100), doubleNode0.intValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertTrue(doubleNode0.isEmpty());
      assertEquals((-1100L), doubleNode0.longValue());
      assertTrue(doubleNode0.canConvertToLong());
      
      ObjectNode objectNode2 = objectNode1.putObject("JSON");
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertNotNull(objectNode2);
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isIntegralNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.booleanValue());
      assertTrue(objectNode2.isEmpty());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertEquals(0, objectNode2.size());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      
      ArrayNode arrayNode0 = objectNode2.withArray("JSON");
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertNotNull(arrayNode0);
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(arrayNode0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertNotNull(objectReader0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertNotNull(objectReader1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.getEmpty();
      assertNotNull(contextAttributes_Impl0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1388.6965163924));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1388), bigDecimal0.shortValue());
      assertEquals((byte) (-108), bigDecimal0.byteValue());
      
      DecimalNode decimalNode0 = (DecimalNode)jsonNodeFactory0.numberNode(bigDecimal0);
      assertNotNull(decimalNode0);
      assertEquals((short) (-1388), bigDecimal0.shortValue());
      assertEquals((byte) (-108), bigDecimal0.byteValue());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isFloat());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isLong());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isIntegralNumber());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isBigInteger());
      assertFalse(decimalNode0.isMissingNode());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isNaN());
      
      Object object0 = contextAttributes_Impl0.getAttribute(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNull(object0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      
      ObjectReader objectReader2 = objectReader0.with((ContextAttributes) contextAttributes_Impl0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertNotNull(objectReader2);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      
      ObjectReader objectReader3 = objectReader1.forType((JavaType) null);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader3);
      assertSame(objectReader1, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_LONG_FOR_INTS;
      ObjectReader objectReader4 = objectReader2.without(deserializationFeature1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertSame(objectReader0, objectReader4);
      assertSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertSame(objectReader2, objectReader4);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader4, objectReader3);
      assertSame(objectReader4, objectReader1);
      assertSame(objectReader4, objectReader2);
      assertSame(objectReader4, objectReader0);
      assertFalse(objectNode0.equals((Object)objectNode2));
      assertFalse(objectNode1.equals((Object)objectNode2));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertNotNull(objectReader4);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        objectReader1.readValue((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        objectReader0.readValue((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.withType((JavaType) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      try { 
        objectReader0.readValues((Reader) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper2 = new ObjectMapper();
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectMapper2);
      assertEquals(0, objectMapper2.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertNotNull(jsonFactoryBuilder0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes((CharacterEscapes) null);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      
      JsonFactory jsonFactory4 = jsonFactory3.setRootValueSeparator("JSON");
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory4);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertEquals("JSON", jsonFactory4.getRootValueSeparator());
      
      ObjectMapper objectMapper3 = new ObjectMapper(jsonFactory4);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(objectMapper3.equals((Object)objectMapper2));
      assertFalse(objectMapper3.equals((Object)objectMapper1));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertNotNull(objectMapper3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertEquals("JSON", jsonFactory4.getRootValueSeparator());
      assertEquals(0, objectMapper3.mixInCount());
      
      ObjectReader objectReader0 = objectMapper3.reader((FormatSchema) null);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertNotSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper1);
      assertNotSame(objectMapper3, objectMapper0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(objectMapper3.equals((Object)objectMapper2));
      assertFalse(objectMapper3.equals((Object)objectMapper1));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertEquals("JSON", jsonFactory4.getRootValueSeparator());
      assertEquals(0, objectMapper3.mixInCount());
      
      ObjectMapper objectMapper4 = new ObjectMapper(jsonFactory1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper4.equals((Object)objectMapper2));
      assertFalse(objectMapper4.equals((Object)objectMapper1));
      assertFalse(objectMapper4.equals((Object)objectMapper3));
      assertFalse(objectMapper4.equals((Object)objectMapper0));
      assertNotNull(objectMapper4);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper4.mixInCount());
      
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      ObjectReader objectReader1 = objectMapper4.readerFor(class0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(objectMapper4, objectMapper2);
      assertNotSame(objectMapper4, objectMapper1);
      assertNotSame(objectMapper4, objectMapper3);
      assertNotSame(objectMapper4, objectMapper0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper4.equals((Object)objectMapper2));
      assertFalse(objectMapper4.equals((Object)objectMapper1));
      assertFalse(objectMapper4.equals((Object)objectMapper3));
      assertFalse(objectMapper4.equals((Object)objectMapper0));
      assertNotNull(objectReader1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper4.mixInCount());
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.disable(jsonReadFeature0);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertNotNull(jsonFactoryBuilder1);
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        objectReader1._findTreeDeserializer(defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValue((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValue((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(jsonFactory2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-424), (byte) (-1));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1), byteArrayInputStream0.available());
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1)}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals((-1), byteArrayInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1)}, byteArray0);
      assertNotNull(filteringParserDelegate0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals((-1), byteArrayInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1)}, byteArray0);
      assertNull(formatSchema0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals((-1), byteArrayInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      
      MissingNode missingNode0 = (MissingNode)objectReader1._bindAsTree(uTF8StreamJsonParser0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-1)}, byteArray0);
      assertNotNull(missingNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isBigDecimal());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isShort());
      assertEquals(0, missingNode0.size());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.booleanValue());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals((-1), byteArrayInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertTrue(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 3);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)53}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>(1731, 1731, 1);
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertNotNull(objectNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ObjectNode objectNode1 = objectNode0.put("8w2`Nh(r_>_3%", float0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      
      ArrayNode arrayNode0 = objectNode1.putArray("8w2`Nh(r_>_3%");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(arrayNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.overrideStdFeatures(2226, 1731);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(filteringParserDelegate1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(130, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(130, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertEquals(130, filteringParserDelegate1.getFeatureMask());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNull(formatSchema0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(130, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(130, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ArrayNode arrayNode1 = (ArrayNode)objectReader0._bind(filteringParserDelegate1, objectNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertNotSame(arrayNode1, arrayNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(130, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(4, jsonParser0.currentTokenId());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(130, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertEquals(130, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate1.getLastClearedToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isMissingNode());
      assertNull(arrayNode1.textValue());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.isDouble());
      assertTrue(arrayNode1.isEmpty());
      assertEquals("", arrayNode1.asText());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isShort());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertFalse(arrayNode1.isBigDecimal());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      objectReader0._verifyNoTrailingTokens(jsonParser0, defaultDeserializationContext_Impl0, (JavaType) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(130, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertTrue(jsonParser0.isClosed());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(4, jsonParser0.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.with((JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>(1731, 1731, 1);
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertNotNull(objectNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ObjectNode objectNode1 = objectNode0.put("8w2`Nh(r_>_3%", float0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isLong());
      
      ArrayNode arrayNode0 = objectNode1.putArray("8w2`Nh(r_>_3%");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(arrayNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertNull(filteringParserDelegate0.currentToken());
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.overrideStdFeatures(2226, 1731);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(filteringParserDelegate1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(130, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(130, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertNull(filteringParserDelegate0.currentToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertEquals(130, filteringParserDelegate1.getFeatureMask());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      
      int int0 = filteringParserDelegate1.nextIntValue(32768);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(JsonToken.START_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(jsonParser0.isExpectedStartArrayToken());
      assertEquals(JsonToken.START_ARRAY, jsonParser0.currentToken());
      assertEquals(3, jsonParser0.currentTokenId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(3, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(130, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(JsonToken.START_ARRAY, filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(JsonToken.START_ARRAY, filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(3, filteringParserDelegate0.currentTokenId());
      assertEquals(3, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertTrue(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(130, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertTrue(filteringParserDelegate0.hasCurrentToken());
      assertEquals(3, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertTrue(filteringParserDelegate1.hasCurrentToken());
      assertTrue(filteringParserDelegate1.isExpectedStartArrayToken());
      assertEquals(JsonToken.START_ARRAY, filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertEquals(3, filteringParserDelegate1.currentTokenId());
      assertEquals(JsonToken.START_ARRAY, filteringParserDelegate1.currentToken());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertEquals(130, filteringParserDelegate1.getFeatureMask());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertEquals(32768, int0);
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNull(formatSchema0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(JsonToken.START_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(jsonParser0.isExpectedStartArrayToken());
      assertEquals(JsonToken.START_ARRAY, jsonParser0.currentToken());
      assertEquals(3, jsonParser0.currentTokenId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(3, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(130, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(JsonToken.START_ARRAY, filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertEquals(JsonToken.START_ARRAY, filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(3, filteringParserDelegate0.currentTokenId());
      assertEquals(3, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertTrue(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(130, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertTrue(filteringParserDelegate0.hasCurrentToken());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ArrayNode arrayNode1 = (ArrayNode)objectReader0._bind(filteringParserDelegate1, objectNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertNotSame(arrayNode1, arrayNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(4, jsonParser0.currentTokenId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(130, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(130, filteringParserDelegate0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate1.getLastClearedToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertEquals(130, filteringParserDelegate1.getFeatureMask());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isShort());
      assertNull(arrayNode1.textValue());
      assertEquals(0, arrayNode1.size());
      assertTrue(arrayNode1.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isMissingNode());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.booleanValue());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>(1731, 1731, 1);
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertNotNull(objectNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isLong());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      
      ObjectMapper objectMapper2 = new ObjectMapper();
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectMapper2);
      assertEquals(0, objectMapper2.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_MISSING_VALUES;
      assertEquals(256, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_MISSING_VALUES, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonReadFeature.ALLOW_MISSING_VALUES, jsonReadFeature0);
      
      ObjectReader objectReader1 = objectReader0.without((FormatFeature) jsonReadFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(256, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_MISSING_VALUES, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertFalse(jsonReadFeature0.enabledByDefault());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectMapper0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectMapper2);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertNotNull(baseSettings0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      BaseSettings baseSettings1 = baseSettings0.withAppendedAnnotationIntrospector(annotationIntrospector0);
      assertNotSame(baseSettings0, baseSettings1);
      assertNotSame(baseSettings1, baseSettings0);
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertNotNull(baseSettings1);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      assertNotNull(simpleMixInResolver0);
      assertEquals(0, simpleMixInResolver0.localSize());
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      ConfigOverrides configOverrides1 = configOverrides0.copy();
      assertNotSame(configOverrides0, configOverrides1);
      assertNotSame(configOverrides1, configOverrides0);
      assertFalse(configOverrides1.equals((Object)configOverrides0));
      assertNotNull(configOverrides1);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(configOverrides1.getDefaultMergeable());
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings1, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertFalse(configOverrides0.equals((Object)configOverrides1));
      assertFalse(configOverrides1.equals((Object)configOverrides0));
      assertNotNull(deserializationConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(configOverrides1.getDefaultMergeable());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, deserializationConfig0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertFalse(configOverrides0.equals((Object)configOverrides1));
      assertFalse(configOverrides1.equals((Object)configOverrides0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(configOverrides1.getDefaultMergeable());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      
      try { 
        objectReader1.readTree("p");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'p': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"p\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      
      ObjectReader objectReader2 = objectMapper0.reader();
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNull(deserializationConfig0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        objectReader2.with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      StringReader stringReader0 = new StringReader("*F8NKbGdolI;s`NDX&.");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readValues((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('*' (code 42)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isLong());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      // Undeclared exception!
      try { 
        objectReader1.readValues((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      StringReader stringReader0 = new StringReader("=)*]}?N2gz");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readValues((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('=' (code 61)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(false);
      assertNotNull(booleanNode0);
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals("false", booleanNode0.asText());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isLong());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isMissingNode());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isInt());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isDouble());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isArray());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(booleanNode0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals("false", booleanNode0.asText());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isLong());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isMissingNode());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isInt());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isDouble());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isArray());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      
      DeserializationConfig deserializationConfig0 = objectReader0.getConfig();
      assertNotNull(deserializationConfig0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals("false", booleanNode0.asText());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isLong());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isMissingNode());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isInt());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isDouble());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isArray());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>(1717, 1717, 1);
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertNotNull(objectNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigIntegerNode bigIntegerNode0 = (BigIntegerNode)jsonNodeFactory0.numberNode(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bigIntegerNode0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.booleanValue());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isShort());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isFloat());
      assertFalse(bigIntegerNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isLong());
      assertTrue(bigIntegerNode0.isEmpty());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isDouble());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ObjectNode objectNode1 = objectNode0.put("8w2`Nh(r_>_3%", float0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      
      ArrayNode arrayNode0 = objectNode1.putArray("8w2`Nh(r_>_3%");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(arrayNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectReader0.treeAsTokens(arrayNode0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(treeTraversingParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.canParseAsync());
      
      ObjectNode objectNode2 = objectNode1.putNull("8w2`Nh(r_>_3%");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertNotNull(objectNode2);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.booleanValue());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isDouble());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isArray());
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertNotNull(nioPathDeserializer0);
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(nioPathDeserializer0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      DeserializationConfig deserializationConfig0 = objectReader1.getConfig();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(deserializationConfig0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add(objectReader0);
      assertTrue(hashSet0.contains(objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean0);
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader1));
      assertTrue(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        objectReader1.readValue((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      PipedReader pipedReader0 = new PipedReader(4887);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2252, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(2252, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.disable(jsonParser_Feature0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(readerBasedJsonParser1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(2252, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(2252, readerBasedJsonParser1.getFeatureMask());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentName());
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertNotNull(typeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<HashMap> class0 = HashMap.class;
      Class<NioPathDeserializer> class1 = NioPathDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      assertNotNull(mapType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      
      try { 
        objectReader0._bind(readerBasedJsonParser1, mapType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0, 0, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isObject());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      boolean boolean0 = objectReader0.isEnabled(mapperFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      TSFBuilder<?, ?> tSFBuilder0 = JsonFactory.builder();
      assertNotNull(tSFBuilder0);
      assertEquals(15, tSFBuilder0.factoryFeaturesMask());
      assertEquals(31, tSFBuilder0.streamWriteFeatures());
      assertEquals(8193, tSFBuilder0.streamReadFeatures());
      
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(concurrentHashMap0);
      assertNotNull(injectableValues_Std0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSON", true);
      assertNotNull(mockFileWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((Writer) mockFileWriter0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(writerBasedJsonGenerator0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      
      Class<ObjectReader> class0 = ObjectReader.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) objectMapper1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(injectableValues_Std1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      assertNotNull(tokenFilterContext0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertTrue(tokenFilterContext0.inRoot());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertFalse(tokenFilterContext0.inArray());
      assertFalse(tokenFilterContext0.inObject());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      
      JsonPointer jsonPointer0 = tokenFilterContext0.pathAsPointer(false);
      assertEquals('/', JsonPointer.SEPARATOR);
      assertNotNull(jsonPointer0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertTrue(tokenFilterContext0.inRoot());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertFalse(tokenFilterContext0.inArray());
      assertFalse(tokenFilterContext0.inObject());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("", jsonPointer0.toString());
      assertTrue(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.mayMatchElement());
      
      ObjectReader objectReader1 = objectReader0.at(jsonPointer0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals('/', JsonPointer.SEPARATOR);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertTrue(tokenFilterContext0.inRoot());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertFalse(tokenFilterContext0.inArray());
      assertFalse(tokenFilterContext0.inObject());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("", jsonPointer0.toString());
      assertTrue(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.mayMatchElement());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
      assertNotNull(filteringParserDelegate0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      
      InjectableValues.Std injectableValues_Std2 = injectableValues_Std1.addValue("", (Object) filteringParserDelegate0);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(injectableValues_Std2);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      
      MapperFeature mapperFeature0 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
      boolean boolean0 = objectReader0.isEnabled(mapperFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      try { 
        objectReader0.readValue((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        objectReader0.readValue((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_LONG_FOR_INTS;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      deserializationFeatureArray0[8] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertEquals(9, deserializationFeatureArray0.length);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)3, (byte)3);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-2), byteArrayInputStream0.available());
      
      try { 
        objectReader0.readValue((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (ByteArrayInputStream); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectReader objectReader1 = objectReader0.withFeatures(jsonParser_FeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(2, jsonParser_FeatureArray0.length);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      System.setCurrentTimeMillis((-1L));
      int int0 = 10;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertNotNull(nioPathDeserializer0);
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, nioPathDeserializer0, false);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      PipedReader pipedReader0 = new PipedReader(2);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals((-1), charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals((-1), charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals((-1), charsToNameCanonicalizer1.hashSeed());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader1, charsToNameCanonicalizer1);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(2, jsonParser_FeatureArray0.length);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals((-1), charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals((-1), charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.disable(jsonParser_Feature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(2, jsonParser_FeatureArray0.length);
      assertNotNull(readerBasedJsonParser1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals((-1), charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals((-1), charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(2, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      
      try { 
        objectReader1._bindAndReadValues((JsonParser) readerBasedJsonParser1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>(1717, 1717, 1);
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertNotNull(objectNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigIntegerNode bigIntegerNode0 = (BigIntegerNode)jsonNodeFactory0.numberNode(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bigIntegerNode0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertEquals(0, bigIntegerNode0.size());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isInt());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.booleanValue());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertNull(bigIntegerNode0.textValue());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ObjectNode objectNode1 = objectNode0.put("8w2`Nh(r_>_3%", float0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      
      ArrayNode arrayNode0 = objectNode1.putArray("8w2`Nh(r_>_3%");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(arrayNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectReader0.treeAsTokens(arrayNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(treeTraversingParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isClosed());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertNull(treeTraversingParser0.currentToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertNotNull(nioPathDeserializer0);
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      ObjectReader objectReader1 = objectMapper1.readerForUpdating(nioPathDeserializer0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(treeTraversingParser0, tokenFilter0, true, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(filteringParserDelegate0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isClosed());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertNull(treeTraversingParser0.currentToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.overrideStdFeatures(2226, 1717);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(filteringParserDelegate1);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(176, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertEquals(176, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isClosed());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(176, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertNull(treeTraversingParser0.currentToken());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNull(formatSchema0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(176, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isClosed());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(176, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertNull(treeTraversingParser0.currentToken());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      objectReader1._verifySchemaType((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      ArrayNode arrayNode1 = (ArrayNode)objectReader0._bind(filteringParserDelegate1, objectNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertNotSame(arrayNode1, arrayNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertTrue(treeTraversingParser0.hasCurrentToken());
      assertEquals(JsonToken.END_ARRAY, treeTraversingParser0.currentToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertEquals(4, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(176, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(4, treeTraversingParser0.getCurrentTokenId());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(176, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertEquals(176, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate1.getLastClearedToken());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isDouble());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isInt());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isShort());
      assertEquals(0, arrayNode1.size());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isMissingNode());
      
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader2 = objectReader0.withHandler(deserializationProblemHandler0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.withHandler((DeserializationProblemHandler) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((byte[]) null, 57, 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      ObjectReader objectReader1 = objectReader0.with(locale0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>(1717, 1717, 1);
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertNotNull(objectNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigIntegerNode bigIntegerNode0 = (BigIntegerNode)jsonNodeFactory0.numberNode(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bigIntegerNode0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertTrue(bigIntegerNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isNaN());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.booleanValue());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isLong());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertTrue(bigIntegerNode0.isBigInteger());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ObjectNode objectNode1 = objectNode0.put("8w2`Nh(r_>_3%", float0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      
      ArrayNode arrayNode0 = objectNode1.putArray("8w2`Nh(r_>_3%");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(arrayNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectReader0.treeAsTokens(arrayNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(treeTraversingParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertNull(treeTraversingParser0.currentToken());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.isClosed());
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertNotNull(nioPathDeserializer0);
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      
      ObjectReader objectReader1 = objectMapper1.readerForUpdating(nioPathDeserializer0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      
      ObjectReader objectReader2 = objectReader1.with(locale0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(treeTraversingParser0, tokenFilter0, true, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertNull(treeTraversingParser0.currentToken());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.isClosed());
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.overrideStdFeatures(2226, 2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNotNull(filteringParserDelegate1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(2, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertEquals(2, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertNull(treeTraversingParser0.currentToken());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(2, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isClosed());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNull(formatSchema0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(2, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertNull(treeTraversingParser0.currentToken());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(2, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isClosed());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      objectReader1._verifySchemaType((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      
      ArrayNode arrayNode1 = (ArrayNode)objectReader0._bind(filteringParserDelegate1, objectNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertNotSame(arrayNode1, arrayNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(4, treeTraversingParser0.getCurrentTokenId());
      assertEquals(4, treeTraversingParser0.currentTokenId());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, treeTraversingParser0.currentToken());
      assertTrue(treeTraversingParser0.hasCurrentToken());
      assertEquals(2, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.isClosed());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(2, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate1.getLastClearedToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertEquals(2, filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isMissingNode());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertNull(arrayNode1.textValue());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      FloatNode floatNode0 = (FloatNode)jsonNodeFactory0.numberNode(float0);
      assertNotNull(floatNode0);
      assertFalse(floatNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(1, floatNode0.intValue());
      assertEquals(1.0, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isEmpty());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertNull(floatNode0.textValue());
      assertEquals(1L, floatNode0.longValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isObject());
      assertEquals(1.0F, floatNode0.floatValue(), 0.01F);
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isShort());
      assertEquals((short)1, floatNode0.shortValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "abstract type to map");
      assertFalse(boolean0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[1] = jsonParser_Feature0;
      // Undeclared exception!
      try { 
        objectReader0.withFeatures(jsonParser_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.withoutFeatures((JsonParser.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(jsonParser_FeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(9, jsonParser_FeatureArray0.length);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((byte[]) null, (int)  (-6), 1467);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertNotNull(jsonFactory0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectMapper0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectReader0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNode jsonNode0 = objectReader0.readTree((byte[]) null, 2125, 0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(jsonNode0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isMissingNode());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ShortNode> class0 = ShortNode.class;
      Class<SimpleType> class1 = SimpleType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      Class<ShortNode> class2 = ShortNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      assertSame(class2, class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      Class<ArrayType> class3 = ArrayType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 0);
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, false);
      assertNotNull(filteringParserDelegate0);
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(filteringParserDelegate0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertNotNull(javaType0);
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isJavaLangObject());
      assertTrue(javaType0.isFinal());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      javaTypeArray0[4] = javaType0;
      JavaType javaType1 = resolvedRecursiveType0.getSelfReferencedType();
      assertSame(resolvedRecursiveType0, javaType0);
      assertNull(javaType1);
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      javaTypeArray0[5] = null;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0]);
      assertSame(class2, class0);
      assertEquals(6, javaTypeArray0.length);
      assertNotNull(referenceType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) referenceType0, javaTypeArray0[4]);
      assertSame(class0, class2);
      assertSame(class2, class0);
      assertEquals(6, javaTypeArray0.length);
      assertNotNull(mapLikeType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isEnumType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      
      Class<CoreXMLDeserializers.Std> class4 = CoreXMLDeserializers.Std.class;
      JavaType javaType2 = TypeFactory.unknownType();
      assertNotSame(javaType2, simpleType0);
      assertFalse(javaType2.equals((Object)simpleType0));
      assertNotNull(javaType2);
      assertFalse(javaType2.isAbstract());
      assertFalse(javaType2.isEnumType());
      assertEquals(0, javaType2.containedTypeCount());
      assertFalse(javaType2.isCollectionLikeType());
      assertTrue(javaType2.isJavaLangObject());
      assertTrue(javaType2.isConcrete());
      assertFalse(javaType2.isPrimitive());
      assertFalse(javaType2.isArrayType());
      assertFalse(javaType2.hasContentType());
      assertFalse(javaType2.isFinal());
      assertFalse(javaType2.useStaticType());
      assertFalse(javaType2.hasHandlers());
      assertFalse(javaType2.hasValueHandler());
      assertFalse(javaType2.isContainerType());
      assertFalse(javaType2.isInterface());
      assertFalse(javaType2.isMapLikeType());
      
      MapType mapType0 = MapType.construct((Class<?>) class4, typeBindings0, (JavaType) null, javaTypeArray0, javaType2, (JavaType) referenceType0);
      assertNotSame(javaType2, simpleType0);
      assertSame(class2, class0);
      assertNotSame(simpleType0, javaType2);
      assertFalse(javaType2.equals((Object)simpleType0));
      assertFalse(simpleType0.equals((Object)javaType2));
      assertEquals(6, javaTypeArray0.length);
      assertNotNull(mapType0);
      assertFalse(javaType2.isAbstract());
      assertFalse(javaType2.isEnumType());
      assertEquals(0, javaType2.containedTypeCount());
      assertFalse(javaType2.isCollectionLikeType());
      assertTrue(javaType2.isJavaLangObject());
      assertTrue(javaType2.isConcrete());
      assertFalse(javaType2.isPrimitive());
      assertFalse(javaType2.isArrayType());
      assertFalse(javaType2.hasContentType());
      assertFalse(javaType2.isFinal());
      assertFalse(javaType2.useStaticType());
      assertFalse(javaType2.hasHandlers());
      assertFalse(javaType2.hasValueHandler());
      assertFalse(javaType2.isContainerType());
      assertFalse(javaType2.isInterface());
      assertFalse(javaType2.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      
      ArrayType arrayType0 = ArrayType.construct(javaType2, typeBindings0);
      assertNotSame(javaType2, simpleType0);
      assertFalse(javaType2.equals((Object)simpleType0));
      assertNotNull(arrayType0);
      assertFalse(javaType2.isAbstract());
      assertFalse(javaType2.isEnumType());
      assertEquals(0, javaType2.containedTypeCount());
      assertFalse(javaType2.isCollectionLikeType());
      assertTrue(javaType2.isJavaLangObject());
      assertTrue(javaType2.isConcrete());
      assertFalse(javaType2.isPrimitive());
      assertFalse(javaType2.isArrayType());
      assertFalse(javaType2.hasContentType());
      assertFalse(javaType2.isFinal());
      assertFalse(javaType2.useStaticType());
      assertFalse(javaType2.hasHandlers());
      assertFalse(javaType2.hasValueHandler());
      assertFalse(javaType2.isContainerType());
      assertFalse(javaType2.isInterface());
      assertFalse(javaType2.isMapLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertNotNull(placeholderForType0);
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(arrayType0, placeholderForType0);
      assertNotSame(javaType2, simpleType0);
      assertNotSame(referenceType1, referenceType0);
      assertFalse(javaType2.equals((Object)simpleType0));
      assertFalse(referenceType1.equals((Object)referenceType0));
      assertNotNull(referenceType1);
      assertFalse(javaType2.isAbstract());
      assertFalse(javaType2.isEnumType());
      assertEquals(0, javaType2.containedTypeCount());
      assertFalse(javaType2.isCollectionLikeType());
      assertTrue(javaType2.isJavaLangObject());
      assertTrue(javaType2.isConcrete());
      assertFalse(javaType2.isPrimitive());
      assertFalse(javaType2.isArrayType());
      assertFalse(javaType2.hasContentType());
      assertFalse(javaType2.isFinal());
      assertFalse(javaType2.useStaticType());
      assertFalse(javaType2.hasHandlers());
      assertFalse(javaType2.hasValueHandler());
      assertFalse(javaType2.isContainerType());
      assertFalse(javaType2.isInterface());
      assertFalse(javaType2.isMapLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isConcrete());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isAbstract());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      MapType mapType1 = mapType0.withContentValueHandler(referenceType1);
      assertNotSame(javaType2, simpleType0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(mapType1, mapType0);
      assertSame(class2, class0);
      assertNotSame(simpleType0, javaType2);
      assertNotSame(referenceType0, referenceType1);
      assertFalse(javaType2.equals((Object)simpleType0));
      assertFalse(referenceType1.equals((Object)referenceType0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(simpleType0.equals((Object)javaType2));
      assertFalse(referenceType0.equals((Object)referenceType1));
      assertEquals(6, javaTypeArray0.length);
      assertNotNull(mapType1);
      assertFalse(javaType2.isAbstract());
      assertFalse(javaType2.isEnumType());
      assertEquals(0, javaType2.containedTypeCount());
      assertFalse(javaType2.isCollectionLikeType());
      assertTrue(javaType2.isJavaLangObject());
      assertTrue(javaType2.isConcrete());
      assertFalse(javaType2.isPrimitive());
      assertFalse(javaType2.isArrayType());
      assertFalse(javaType2.hasContentType());
      assertFalse(javaType2.isFinal());
      assertFalse(javaType2.useStaticType());
      assertFalse(javaType2.hasHandlers());
      assertFalse(javaType2.hasValueHandler());
      assertFalse(javaType2.isContainerType());
      assertFalse(javaType2.isInterface());
      assertFalse(javaType2.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isConcrete());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isAbstract());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler(mapType1);
      assertNotSame(javaType2, simpleType0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertSame(class0, class2);
      assertSame(class2, class0);
      assertNotSame(simpleType0, javaType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertFalse(javaType2.equals((Object)simpleType0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertFalse(referenceType1.equals((Object)referenceType0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertFalse(simpleType0.equals((Object)javaType2));
      assertFalse(referenceType0.equals((Object)referenceType1));
      assertEquals(6, javaTypeArray0.length);
      assertNotNull(mapLikeType1);
      assertFalse(javaType2.isAbstract());
      assertFalse(javaType2.isEnumType());
      assertEquals(0, javaType2.containedTypeCount());
      assertFalse(javaType2.isCollectionLikeType());
      assertTrue(javaType2.isJavaLangObject());
      assertTrue(javaType2.isConcrete());
      assertFalse(javaType2.isPrimitive());
      assertFalse(javaType2.isArrayType());
      assertFalse(javaType2.hasContentType());
      assertFalse(javaType2.isFinal());
      assertFalse(javaType2.useStaticType());
      assertFalse(javaType2.hasHandlers());
      assertFalse(javaType2.hasValueHandler());
      assertFalse(javaType2.isContainerType());
      assertFalse(javaType2.isInterface());
      assertFalse(javaType2.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isConcrete());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isAbstract());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isPrimitive());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isEnumType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isFinal());
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isInterface());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isAbstract());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isArrayType());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isEnumType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      
      MapLikeType mapLikeType2 = mapLikeType1.withStaticTyping();
      assertNotSame(javaType2, simpleType0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapLikeType1, mapLikeType2);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotSame(mapLikeType2, mapLikeType0);
      assertNotSame(mapLikeType2, mapLikeType1);
      assertSame(class0, class2);
      assertSame(class2, class0);
      assertNotSame(simpleType0, javaType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType0, mapLikeType2);
      assertFalse(javaType2.equals((Object)simpleType0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertFalse(referenceType1.equals((Object)referenceType0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertTrue(mapLikeType2.equals((Object)mapLikeType1));
      assertTrue(mapLikeType2.equals((Object)mapLikeType0));
      assertFalse(simpleType0.equals((Object)javaType2));
      assertFalse(referenceType0.equals((Object)referenceType1));
      assertTrue(mapLikeType0.equals((Object)mapLikeType1));
      assertEquals(6, javaTypeArray0.length);
      assertNotNull(mapLikeType2);
      assertFalse(javaType2.isAbstract());
      assertFalse(javaType2.isEnumType());
      assertEquals(0, javaType2.containedTypeCount());
      assertFalse(javaType2.isCollectionLikeType());
      assertTrue(javaType2.isJavaLangObject());
      assertTrue(javaType2.isConcrete());
      assertFalse(javaType2.isPrimitive());
      assertFalse(javaType2.isArrayType());
      assertFalse(javaType2.hasContentType());
      assertFalse(javaType2.isFinal());
      assertFalse(javaType2.useStaticType());
      assertFalse(javaType2.hasHandlers());
      assertFalse(javaType2.hasValueHandler());
      assertFalse(javaType2.isContainerType());
      assertFalse(javaType2.isInterface());
      assertFalse(javaType2.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isConcrete());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isAbstract());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isPrimitive());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isEnumType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isFinal());
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isInterface());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isAbstract());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isArrayType());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertTrue(mapLikeType2.isMapLikeType());
      assertTrue(mapLikeType2.useStaticType());
      assertFalse(mapLikeType2.hasValueHandler());
      assertFalse(mapLikeType2.isFinal());
      assertFalse(mapLikeType2.isInterface());
      assertFalse(mapLikeType2.isCollectionLikeType());
      assertTrue(mapLikeType2.isContainerType());
      assertFalse(mapLikeType2.isEnumType());
      assertFalse(mapLikeType2.isPrimitive());
      assertTrue(mapLikeType2.hasContentType());
      assertFalse(mapLikeType2.isArrayType());
      assertTrue(mapLikeType2.hasHandlers());
      assertFalse(mapLikeType2.isJavaLangObject());
      assertEquals(0, mapLikeType2.containedTypeCount());
      assertTrue(mapLikeType2.isConcrete());
      assertFalse(mapLikeType2.isAbstract());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isEnumType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      
      MapLikeType mapLikeType3 = mapLikeType2.withContentValueHandler(javaType1);
      assertNotSame(javaType2, simpleType0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapLikeType1, mapLikeType2);
      assertNotSame(mapLikeType1, mapLikeType3);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotSame(mapLikeType2, mapLikeType0);
      assertNotSame(mapLikeType2, mapLikeType1);
      assertNotSame(mapLikeType2, mapLikeType3);
      assertNotSame(mapLikeType3, mapLikeType2);
      assertNotSame(mapLikeType3, mapLikeType0);
      assertNotSame(mapLikeType3, mapLikeType1);
      assertSame(class0, class2);
      assertSame(class2, class0);
      assertNotSame(simpleType0, javaType2);
      assertSame(resolvedRecursiveType0, javaType0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType0, mapLikeType3);
      assertNotSame(mapLikeType0, mapLikeType2);
      assertFalse(javaType2.equals((Object)simpleType0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertFalse(referenceType1.equals((Object)referenceType0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertTrue(mapLikeType1.equals((Object)mapLikeType2));
      assertTrue(mapLikeType2.equals((Object)mapLikeType1));
      assertTrue(mapLikeType2.equals((Object)mapLikeType0));
      assertTrue(mapLikeType3.equals((Object)mapLikeType2));
      assertTrue(mapLikeType3.equals((Object)mapLikeType1));
      assertTrue(mapLikeType3.equals((Object)mapLikeType0));
      assertFalse(simpleType0.equals((Object)javaType2));
      assertFalse(referenceType0.equals((Object)referenceType1));
      assertTrue(mapLikeType0.equals((Object)mapLikeType2));
      assertTrue(mapLikeType0.equals((Object)mapLikeType1));
      assertEquals(6, javaTypeArray0.length);
      assertNotNull(mapLikeType3);
      assertFalse(javaType2.isAbstract());
      assertFalse(javaType2.isEnumType());
      assertEquals(0, javaType2.containedTypeCount());
      assertFalse(javaType2.isCollectionLikeType());
      assertTrue(javaType2.isJavaLangObject());
      assertTrue(javaType2.isConcrete());
      assertFalse(javaType2.isPrimitive());
      assertFalse(javaType2.isArrayType());
      assertFalse(javaType2.hasContentType());
      assertFalse(javaType2.isFinal());
      assertFalse(javaType2.useStaticType());
      assertFalse(javaType2.hasHandlers());
      assertFalse(javaType2.hasValueHandler());
      assertFalse(javaType2.isContainerType());
      assertFalse(javaType2.isInterface());
      assertFalse(javaType2.isMapLikeType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isConcrete());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isAbstract());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isPrimitive());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isEnumType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isFinal());
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isInterface());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isAbstract());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isArrayType());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertTrue(mapLikeType2.isMapLikeType());
      assertTrue(mapLikeType2.useStaticType());
      assertFalse(mapLikeType2.hasValueHandler());
      assertFalse(mapLikeType2.isFinal());
      assertFalse(mapLikeType2.isInterface());
      assertFalse(mapLikeType2.isCollectionLikeType());
      assertTrue(mapLikeType2.isContainerType());
      assertFalse(mapLikeType2.isEnumType());
      assertFalse(mapLikeType2.isPrimitive());
      assertTrue(mapLikeType2.hasContentType());
      assertFalse(mapLikeType2.isArrayType());
      assertTrue(mapLikeType2.hasHandlers());
      assertFalse(mapLikeType2.isJavaLangObject());
      assertEquals(0, mapLikeType2.containedTypeCount());
      assertTrue(mapLikeType2.isConcrete());
      assertFalse(mapLikeType2.isAbstract());
      assertTrue(mapLikeType3.isConcrete());
      assertFalse(mapLikeType3.isInterface());
      assertFalse(mapLikeType3.isPrimitive());
      assertFalse(mapLikeType3.isArrayType());
      assertEquals(0, mapLikeType3.containedTypeCount());
      assertTrue(mapLikeType3.hasHandlers());
      assertTrue(mapLikeType3.useStaticType());
      assertFalse(mapLikeType3.hasValueHandler());
      assertTrue(mapLikeType3.isContainerType());
      assertFalse(mapLikeType3.isAbstract());
      assertFalse(mapLikeType3.isEnumType());
      assertFalse(mapLikeType3.isJavaLangObject());
      assertFalse(mapLikeType3.isCollectionLikeType());
      assertTrue(mapLikeType3.hasContentType());
      assertTrue(mapLikeType3.isMapLikeType());
      assertFalse(mapLikeType3.isFinal());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isEnumType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._prefetchRootDeserializer(mapLikeType3);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(class0, class2);
      assertSame(class2, class0);
      assertNotSame(simpleType0, javaType2);
      assertSame(resolvedRecursiveType0, javaType0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType0, mapLikeType3);
      assertNotSame(mapLikeType0, mapLikeType2);
      assertNotSame(javaType2, simpleType0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapLikeType1, mapLikeType2);
      assertNotSame(mapLikeType1, mapLikeType3);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotSame(mapLikeType2, mapLikeType0);
      assertNotSame(mapLikeType2, mapLikeType1);
      assertNotSame(mapLikeType2, mapLikeType3);
      assertNotSame(mapLikeType3, mapLikeType2);
      assertNotSame(mapLikeType3, mapLikeType0);
      assertNotSame(mapLikeType3, mapLikeType1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(simpleType0.equals((Object)javaType2));
      assertFalse(referenceType0.equals((Object)referenceType1));
      assertTrue(mapLikeType0.equals((Object)mapLikeType2));
      assertTrue(mapLikeType0.equals((Object)mapLikeType1));
      assertTrue(mapLikeType0.equals((Object)mapLikeType3));
      assertFalse(javaType2.equals((Object)simpleType0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertFalse(referenceType1.equals((Object)referenceType0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertTrue(mapLikeType1.equals((Object)mapLikeType2));
      assertTrue(mapLikeType1.equals((Object)mapLikeType3));
      assertTrue(mapLikeType2.equals((Object)mapLikeType3));
      assertTrue(mapLikeType2.equals((Object)mapLikeType1));
      assertTrue(mapLikeType2.equals((Object)mapLikeType0));
      assertTrue(mapLikeType3.equals((Object)mapLikeType2));
      assertTrue(mapLikeType3.equals((Object)mapLikeType1));
      assertTrue(mapLikeType3.equals((Object)mapLikeType0));
      assertEquals(6, javaTypeArray0.length);
      assertNull(jsonDeserializer0);
      assertFalse(javaType2.isAbstract());
      assertFalse(javaType2.isEnumType());
      assertEquals(0, javaType2.containedTypeCount());
      assertFalse(javaType2.isCollectionLikeType());
      assertTrue(javaType2.isJavaLangObject());
      assertTrue(javaType2.isConcrete());
      assertFalse(javaType2.isPrimitive());
      assertFalse(javaType2.isArrayType());
      assertFalse(javaType2.hasContentType());
      assertFalse(javaType2.isFinal());
      assertFalse(javaType2.useStaticType());
      assertFalse(javaType2.hasHandlers());
      assertFalse(javaType2.hasValueHandler());
      assertFalse(javaType2.isContainerType());
      assertFalse(javaType2.isInterface());
      assertFalse(javaType2.isMapLikeType());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isConcrete());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isAbstract());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isPrimitive());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isEnumType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isFinal());
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isInterface());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isAbstract());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isArrayType());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertTrue(mapLikeType2.isMapLikeType());
      assertTrue(mapLikeType2.useStaticType());
      assertFalse(mapLikeType2.hasValueHandler());
      assertFalse(mapLikeType2.isFinal());
      assertFalse(mapLikeType2.isInterface());
      assertFalse(mapLikeType2.isCollectionLikeType());
      assertTrue(mapLikeType2.isContainerType());
      assertFalse(mapLikeType2.isEnumType());
      assertFalse(mapLikeType2.isPrimitive());
      assertTrue(mapLikeType2.hasContentType());
      assertFalse(mapLikeType2.isArrayType());
      assertTrue(mapLikeType2.hasHandlers());
      assertFalse(mapLikeType2.isJavaLangObject());
      assertEquals(0, mapLikeType2.containedTypeCount());
      assertTrue(mapLikeType2.isConcrete());
      assertFalse(mapLikeType2.isAbstract());
      assertTrue(mapLikeType3.isConcrete());
      assertFalse(mapLikeType3.isInterface());
      assertFalse(mapLikeType3.isPrimitive());
      assertFalse(mapLikeType3.isArrayType());
      assertEquals(0, mapLikeType3.containedTypeCount());
      assertTrue(mapLikeType3.hasHandlers());
      assertTrue(mapLikeType3.useStaticType());
      assertFalse(mapLikeType3.hasValueHandler());
      assertTrue(mapLikeType3.isContainerType());
      assertFalse(mapLikeType3.isAbstract());
      assertFalse(mapLikeType3.isEnumType());
      assertFalse(mapLikeType3.isJavaLangObject());
      assertFalse(mapLikeType3.isCollectionLikeType());
      assertTrue(mapLikeType3.hasContentType());
      assertTrue(mapLikeType3.isMapLikeType());
      assertFalse(mapLikeType3.isFinal());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isEnumType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNode jsonNode0 = objectReader0.createArrayNode();
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloat());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isArray());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2769);
      assertNotNull(placeholderForType0);
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      
      // Undeclared exception!
      try { 
        objectReader0.writeValue((JsonGenerator) null, placeholderForType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, byteArrayBuilder0, byteArray0, 0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-6), (byte) (-6), (byte)1, (byte) (-6), (byte) (-6), (byte) (-6)}, byteArray0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(756);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-6), (byte) (-6), (byte)1, (byte) (-6), (byte) (-6), (byte) (-6)}, byteArray0);
      assertNotNull(uTF8JsonGenerator1);
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(1, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(756, uTF8JsonGenerator1.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(756, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      
      IntNode intNode0 = IntNode.valueOf((byte) (-6));
      assertNotNull(intNode0);
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-6.0), intNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.isEmpty());
      assertEquals((-6L), intNode0.longValue());
      assertEquals((-6.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.canConvertToLong());
      assertEquals((short) (-6), intNode0.shortValue());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertEquals(0, intNode0.size());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertNull(intNode0.textValue());
      assertEquals((-6), intNode0.intValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isArray());
      
      // Undeclared exception!
      try { 
        objectReader0.writeValue(uTF8JsonGenerator1, intNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertNotNull(jsonFactory0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl2, (DefaultDeserializationContext) null);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectMapper0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl2, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl2, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectReader0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0, 2, 0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl2, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl2, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jsonNode0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertEquals(0, jsonNode0.size());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders((ObjectReader[]) null);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.WEAK_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertSame(dataFormatReaders0, dataFormatReaders1);
      assertSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders1);
      
      LinkedHashSet<ObjectReader> linkedHashSet0 = new LinkedHashSet<ObjectReader>();
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders2 = new DataFormatReaders(linkedHashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertNotNull(dataFormatReaders2);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders3 = dataFormatReaders2.withMaxInputLookahead(0);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertNotNull(dataFormatReaders3);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders3.findFormat(byteArray0);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders3));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        objectReader0._reportUnkownFormat(dataFormatReaders1, dataFormatReaders_Match0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DataFormatReaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0._inputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      try { 
        objectReader0._inputStream(mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TypeReference<ResolvedRecursiveType> typeReference0 = (TypeReference<ResolvedRecursiveType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.withType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      
      ObjectReader objectReader2 = new ObjectReader(objectReader0, jsonFactory3);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      assertFalse(boolean0);
      
      JsonNode jsonNode0 = objectReader2.readTree("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals("", jsonNode0.asText());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      
      ObjectReader objectReader3 = objectReader1.withView(class0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertNotNull(objectReader3);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader4 = objectMapper0.reader();
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader3);
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertNotNull(objectReader4);
      assertEquals(0, objectMapper0.mixInCount());
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue(">?<whI>g)a=Q2:<C5", (Object) class0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotNull(injectableValues_Std1);
      
      ObjectReader objectReader5 = new ObjectReader(objectReader0, jsonFactory0);
      assertFalse(objectReader5.equals((Object)objectReader3));
      assertFalse(objectReader5.equals((Object)objectReader0));
      assertFalse(objectReader5.equals((Object)objectReader1));
      assertFalse(objectReader5.equals((Object)objectReader4));
      assertFalse(objectReader5.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader4));
      assertNotNull(objectReader5);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      
      TypeReference<Integer> typeReference0 = (TypeReference<Integer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader3.withType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader2 = objectReader1.withAttribute(hashSet0, hashSet0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      // Undeclared exception!
      try { 
        objectReader2.withType((TypeReference<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1744);
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      
      ArrayNode arrayNode1 = (ArrayNode)objectReader0._bind(jsonParser0, jsonParser0);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.textValue());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isShort());
      assertTrue(arrayNode1.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isLong());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>(1717, 1717, 1);
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertNotNull(objectNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigIntegerNode bigIntegerNode0 = (BigIntegerNode)jsonNodeFactory0.numberNode(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bigIntegerNode0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isNaN());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isFloat());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.booleanValue());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isLong());
      assertEquals(0, bigIntegerNode0.size());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ObjectNode objectNode1 = objectNode0.put("8w2`Nh(r_>_3%", float0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      
      ArrayNode arrayNode0 = objectNode1.putArray("8w2`Nh(r_>_3%");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(arrayNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectReader0.treeAsTokens(arrayNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(treeTraversingParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertNotNull(nioPathDeserializer0);
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      
      ObjectReader objectReader1 = objectMapper1.readerForUpdating(nioPathDeserializer0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(treeTraversingParser0, tokenFilter0, true, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(filteringParserDelegate0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)filteringParserDelegate0.overrideStdFeatures(2226, 2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(filteringParserDelegate1);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(2, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals(2, filteringParserDelegate1.getFeatureMask());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(2, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNull(formatSchema0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(2, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(2, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      objectReader1._verifySchemaType((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      
      ArrayNode arrayNode1 = (ArrayNode)objectReader0._bind(filteringParserDelegate1, objectNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertNotSame(arrayNode1, arrayNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.END_ARRAY, treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, treeTraversingParser0.currentToken());
      assertEquals(4, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(2, treeTraversingParser0.getFeatureMask());
      assertTrue(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(4, treeTraversingParser0.currentTokenId());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(2, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertNull(filteringParserDelegate1.currentToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, filteringParserDelegate1.getLastClearedToken());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertEquals(2, filteringParserDelegate1.getFeatureMask());
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertTrue(arrayNode1.isArray());
      assertEquals(0, arrayNode1.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isShort());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isFloat());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((byte[]) null, (-214), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertNotNull(jsonFactory0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory2);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      DefaultSerializerProvider defaultSerializerProvider0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectMapper0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      assertNotNull(mapLikeType0);
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(mapLikeType0.isEnumType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isContainerType());
      
      ObjectReader objectReader0 = objectMapper1.readerFor((JavaType) mapLikeType0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(mapLikeType0.isEnumType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isContainerType());
      
      IOContext iOContext0 = null;
      int int0 = (-2945);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      byte byte0 = (byte) (-6);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        objectReader0.readValues((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertNotNull(jsonFactory0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory2 = jsonFactory0.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      
      JsonFactory jsonFactory3 = jsonFactory1.setRootValueSeparator((String) null);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotNull(jsonFactory3);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNull(jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNull(jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertNull(jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertNotNull(simpleMixInResolver0);
      assertEquals(0, simpleMixInResolver0.localSize());
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertNotNull(deserializationConfig0);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, contextAttributes0);
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertNotNull(deserializationConfig1);
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertEquals(0, deserializationConfig1.mixInCount());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      
      ObjectReader objectReader0 = objectMapper0._newReader(deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertNotNull(objectReader0);
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertEquals(0, deserializationConfig1.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertNotNull(objectReader1);
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertEquals(0, deserializationConfig1.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      
      StringReader stringReader0 = new StringReader("JSON");
      assertNotNull(stringReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree((Reader) null);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertNotNull(jsonNode0);
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getRootName());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertEquals(0, deserializationConfig1.mixInCount());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "JSON");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      Class<ArrayType> class0 = ArrayType.class;
      // Undeclared exception!
      try { 
        objectReader1.withType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      try { 
        objectReader0.readValues("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertNotNull(jsonFactory0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectMapper0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      try { 
        objectReader0.readValues("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      
      ObjectReader objectReader2 = new ObjectReader(objectReader0, jsonFactory3);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      
      JsonNode jsonNode0 = objectReader2.readTree("");
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isShort());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      
      ObjectReader objectReader3 = objectReader1.withView(class0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader3);
      assertSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader4 = objectReader0.with(contextAttributes0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader3);
      assertSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertNotNull(objectReader4);
      assertEquals(0, objectMapper0.mixInCount());
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue(">?<whI>g)a=Q2:<C5", (Object) class0);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertNotNull(injectableValues_Std1);
      
      ObjectReader objectReader5 = objectReader2.with((InjectableValues) injectableValues_Std0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader5);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader5);
      assertNotSame(objectReader1, objectReader4);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(objectReader2, objectReader4);
      assertNotSame(objectReader2, objectReader5);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertNotSame(objectReader5, objectReader2);
      assertNotSame(objectReader5, objectReader0);
      assertNotSame(objectReader5, objectReader3);
      assertNotSame(objectReader5, objectReader1);
      assertNotSame(objectReader5, objectReader4);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader4));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader4));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader5.equals((Object)objectReader2));
      assertFalse(objectReader5.equals((Object)objectReader0));
      assertFalse(objectReader5.equals((Object)objectReader3));
      assertFalse(objectReader5.equals((Object)objectReader1));
      assertFalse(objectReader5.equals((Object)objectReader4));
      assertNotNull(objectReader5);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      
      InjectableValues injectableValues0 = objectReader4.getInjectableValues();
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader5);
      assertNotSame(objectReader4, objectReader5);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader3);
      assertSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader5));
      assertFalse(objectReader4.equals((Object)objectReader5));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertNull(injectableValues0);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[0];
      ObjectReader[] objectReaderArray0 = new ObjectReader[3];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader1 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      objectReaderArray0[2] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(3, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader2 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(3, objectReaderArray0.length);
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      
      InjectableValues injectableValues0 = objectReader0.getInjectableValues();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNull(injectableValues0);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader1 = objectReader0.withView(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      try { 
        objectReader0.readValue((Reader) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      NullNode nullNode0 = NullNode.instance;
      assertNotNull(nullNode0);
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isArray());
      assertTrue(nullNode0.isEmpty());
      assertEquals("null", nullNode0.asText());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isBigInteger());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isObject());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.booleanValue());
      assertNull(nullNode0.numberType());
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader2 = objectReader1.with((InjectableValues) injectableValues_Std0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[1];
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      try { 
        objectReader1.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2, defaultSerializerProvider0, defaultDeserializationContext0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      deserializationFeatureArray0[2] = deserializationFeature2;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertEquals(3, deserializationFeatureArray0.length);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertEquals(3, deserializationFeatureArray0.length);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      
      // Undeclared exception!
      try { 
        objectReader0._findTreeDeserializer((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertNotNull(jsonFactory0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      defaultSerializerProvider_Impl1.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectMapper2);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      
      ObjectMapper objectMapper3 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper1));
      assertFalse(objectMapper3.equals((Object)objectMapper2));
      assertNotNull(objectMapper3);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      
      ObjectReader objectReader1 = objectMapper3.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper3, objectMapper0);
      assertNotSame(objectMapper3, objectMapper1);
      assertNotSame(objectMapper3, objectMapper2);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper1));
      assertFalse(objectMapper3.equals((Object)objectMapper2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((char[]) null, 967, 566);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      assertNotNull(bigIntegerNode0);
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isShort());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.booleanValue());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(0, bigIntegerNode0.size());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isFloat());
      assertFalse(bigIntegerNode0.isDouble());
      assertTrue(bigIntegerNode0.isEmpty());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isArray());
      
      // Undeclared exception!
      try { 
        objectReader1._bind(readerBasedJsonParser0, readerBasedJsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      assertNotNull(objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1744);
      assertNotNull(arrayNode0);
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      
      IntNode intNode0 = IntNode.valueOf(1744);
      assertNotNull(intNode0);
      assertEquals(1744L, intNode0.longValue());
      assertFalse(intNode0.isDouble());
      assertEquals(0, intNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isMissingNode());
      assertEquals(1744.0F, intNode0.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isArray());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isShort());
      assertEquals(1744.0, intNode0.doubleValue(), 0.01);
      assertEquals(1744, intNode0.intValue());
      assertTrue(intNode0.isEmpty());
      assertEquals((short)1744, intNode0.shortValue());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isIntegralNumber());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isBigDecimal());
      
      ArrayNode arrayNode1 = (ArrayNode)objectReader0._bind(jsonParser0, jsonParser0);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isBigDecimal());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertEquals(0, arrayNode1.size());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isShort());
      assertTrue(arrayNode1.isArray());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isBigInteger());
      
      MissingNode missingNode0 = (MissingNode)objectReader0._bindAndCloseAsTree(jsonParser0);
      assertNotSame(arrayNode0, arrayNode1);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertNotNull(missingNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertTrue(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isArray());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isLong());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isFloat());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      
      // Undeclared exception!
      try { 
        objectReader0.readValues(jsonParser0, (TypeReference<FloatNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte) (-17);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(byteArray0, (int) (byte)0, 1784);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-65), (byte)83, (byte)0, (byte)75, (byte)0, (byte)1, (byte)120, (byte) (-17)}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((JsonParser) uTF8StreamJsonParser0, (TypeReference<DeserializationConfig>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0._findTreeDeserializer(defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertNotNull(jsonFactory0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory2);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectReader0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0._findTreeDeserializer(defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<NullNode> class0 = NullNode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>(1717, 1717, 1);
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertNotNull(objectNode0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isShort());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigIntegerNode bigIntegerNode0 = (BigIntegerNode)jsonNodeFactory0.numberNode(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bigIntegerNode0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloat());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.booleanValue());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ObjectNode objectNode1 = objectNode0.put("8w2`Nh(r_>_3%", float0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      
      ArrayNode arrayNode0 = objectNode1.putArray("8w2`Nh(r_>_3%");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(arrayNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectReader0.treeAsTokens(arrayNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(treeTraversingParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertFalse(treeTraversingParser0.isClosed());
      assertNull(treeTraversingParser0.currentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      
      ObjectNode objectNode2 = objectNode1.putNull("8w2`Nh(r_>_3%");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertNotNull(objectNode2);
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertEquals(1, objectNode2.size());
      assertTrue(objectNode2.isObject());
      
      Class<ObjectNode> class1 = ObjectNode.class;
      MappingIterator<ObjectNode> mappingIterator0 = objectMapper1.readValues((JsonParser) treeTraversingParser0, class1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(mappingIterator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertFalse(treeTraversingParser0.isClosed());
      assertNull(treeTraversingParser0.currentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertNotNull(nioPathDeserializer0);
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      ObjectReader objectReader1 = objectMapper1.readerForUpdating(nioPathDeserializer0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(treeTraversingParser0, tokenFilter0, true, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(filteringParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertFalse(treeTraversingParser0.isClosed());
      assertNull(treeTraversingParser0.currentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNull(formatSchema0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isShort());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertFalse(treeTraversingParser0.isClosed());
      assertNull(treeTraversingParser0.currentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      
      objectReader1._verifySchemaType((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<DeserializationConfig> class0 = DeserializationConfig.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      FloatNode floatNode0 = new FloatNode(0.75F);
      assertNotNull(floatNode0);
      assertFalse(floatNode0.isDouble());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isLong());
      assertEquals(0, floatNode0.intValue());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(0, floatNode0.size());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0.75F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isBigDecimal());
      assertNull(floatNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.canConvertToInt());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isObject());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(0.75, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertEquals(0L, floatNode0.longValue());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isNaN());
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      try { 
        objectReader0.treeToValue((TreeNode) floatNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.core.filter.FilteringParserDelegate` (no Creators, like default construct, exist): no double/Double-argument constructor/factory method to deserialize from Number value (0.75)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(arrayNode0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      
      Class<MapType> class0 = MapType.class;
      try { 
        objectReader0.treeToValue((TreeNode) arrayNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.type.MapType` out of START_ARRAY token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)63;
      try { 
        objectReader0.readTree(byteArray0, 1, (int) (byte)37);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: (byte[])\"%\uFFFD\uFFFD\u0000?\"; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      byte[] byteArray0 = new byte[0];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory3);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      
      ObjectReader objectReader2 = new ObjectReader(objectReader0, jsonFactory3);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      
      ObjectReader objectReader3 = objectReader1.with(jsonFactory2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertNotNull(objectReader3);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      
      // Undeclared exception!
      try { 
        objectReader1._detectBindAndClose((DataFormatReaders.Match) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      try { 
        objectReader0.readValue("[ClassStack (self-refs: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (String)\"[ClassStack (self-refs: \"; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertNotNull(jsonFactoryBuilder0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertNotNull(jsonFactory0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<MapLikeType> class0 = MapLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      
      ObjectNode objectNode0 = arrayNode0.addObject();
      assertNotNull(objectNode0);
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      
      ObjectNode objectNode1 = objectNode0.put((String) null, true);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigInteger());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      try { 
        objectReader0.readTree("r,k=S%n{Ry-");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'r': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"r,k=S%n{Ry-\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertNotNull(dataFormatReaders0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(hashSet0.contains(objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      try { 
        objectReader1.readTree("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type java.lang.String with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2, defaultSerializerProvider0, defaultDeserializationContext0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      deserializationFeatureArray0[2] = deserializationFeature2;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(deserializationFeature0, deserializationFeature2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertEquals(3, deserializationFeatureArray0.length);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      
      try { 
        objectReader0.readTree("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      
      ObjectReader objectReader2 = new ObjectReader(objectReader0, jsonFactory3);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      
      Class<ArrayNode> class1 = ArrayNode.class;
      ObjectReader objectReader3 = objectReader2.withType(class1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertNotNull(objectReader3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      
      try { 
        objectReader0.readValue("O0wAIsZ6{)/");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'O0wAIsZ6': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"O0wAIsZ6{)/\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectMapper objectMapper1 = objectMapper0.copy();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      
      ObjectReader objectReader2 = new ObjectReader(objectReader0, jsonFactory3);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      
      Class<ArrayNode> class1 = ArrayNode.class;
      ObjectReader objectReader3 = objectReader2.withType(class1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertNotNull(objectReader3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      
      JsonFactory jsonFactory4 = objectReader1.getFactory();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonFactory4);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "JSON");
      objectReader1.with((TimeZone) simpleTimeZone0);
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader1);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonFactory0.configure(jsonGenerator_Feature1, true);
      ObjectReader objectReader2 = new ObjectReader(objectReader0, jsonFactory3);
      tokenFilter0.includeProperty("fbL\"Dqck$u");
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        objectReader2.readValue(byteArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      ObjectReader objectReader1 = objectReader0.with(timeZone0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      jsonFactory1.setRootValueSeparator("JSON");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      StringReader stringReader0 = new StringReader("rxx.#~LU<8");
      try { 
        objectReader1.readTree((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'rxx': was expecting ('true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      byte[] byteArray0 = new byte[0];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      try { 
        objectReader1.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      objectMapper1.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper3 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper3.reader();
      byte[] byteArray0 = new byte[3];
      try { 
        objectReader0.readValue(byteArray0, 2, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      MockURL.getFileExample();
      Boolean boolean0 = new Boolean(false);
      objectReader0._considerFilter((JsonParser) null, false);
      // Undeclared exception!
      try { 
        objectReader0._bind((JsonParser) null, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.withType((Type) class0);
      assertSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      objectMapper0.disable(serializationFeature0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(987);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      objectMapper0.createArrayNode();
      TypeReference<Integer> typeReference0 = (TypeReference<Integer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(placeholderForType0).when(typeReference0).getType();
      objectReader0.forType(typeReference0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      try { 
        MockURL.URL("H", "H", (-2449), "Q,~", uRLStreamHandler0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-2449
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      byte[] byteArray0 = new byte[0];
      objectReader0.readTree(byteArray0);
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      boolean boolean1 = objectReader0.isEnabled(jsonParser_Feature0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)1;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.WRAP_EXCEPTIONS;
      deserializationFeatureArray0[7] = deserializationFeature1;
      deserializationFeatureArray0[8] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      objectReader0.isEnabled(jsonParser_Feature0);
      try { 
        objectReader0.readValues("]7;'=Z.wnVvW%/");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for root starting at [Source: (String)\"]7;'=Z.wnVvW%/\"; line: 1, column: 0])
         //  at [Source: (String)\"]7;'=Z.wnVvW%/\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.databind.util.JSONWrappedObject");
      try { 
        objectReader0.readTree((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'com': was expecting ('true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      objectReader1.forType(class0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        objectReader1.readTree((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type java.io.PipedReader with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      deserializationFeatureArray0[7] = deserializationFeature1;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      String string0 = "`6U+9*Rm3+?gTz";
      MockFile mockFile0 = new MockFile("`6U+9*Rm3+?gTz");
      StringReader stringReader0 = new StringReader("rxx.#~LU<8");
      try { 
        objectReader0.readTree((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'rxx': was expecting ('true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      MockFile mockFile0 = new MockFile("");
      mockFile0.toURL();
      try { 
        objectReader1.readValues("85?d5;8_hZ8,3w M");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type java.lang.String with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      try { 
        objectReader0.readValues("Current token not FIELD_NAME (to contain expected root name '%s'), but %s");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Current': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"Current token not FIELD_NAME (to contain expected root name '%s'), but %s\"; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper3 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader1 = objectMapper3.reader();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)121;
      objectReader0.readTree(byteArray0, 1, 0);
      try { 
        objectReader1.readValues("com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'com': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder\"; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      try { 
        objectReader0.readValues((Reader) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      try { 
        objectReader0.readValue((JsonNode) booleanNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<MapLikeType> class0 = MapLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.addObject();
      ObjectNode objectNode1 = objectNode0.put("|DV}Y9", false);
      objectNode0.setAll(objectNode1);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertFalse(jsonParser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      try { 
        objectReader0.readValue((byte[]) null, (-214), (-214));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader();
      ObjectReader objectReader1 = objectReader0.at("");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("[sQ");
      MockFile.createTempFile("JSON", "", (File) mockFile0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory0, defaultSerializerProvider0, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper3 = new ObjectMapper(objectMapper0);
      objectMapper2.reader();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-28);
      int int0 = 353;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("lM6]_5bY0-q3q", "JSON", 1267);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) objectReader1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte)63;
      objectArray0[3] = (Object) "[sQ";
      objectArray0[4] = (Object) defaultSerializerProvider0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) objectMapper0;
      objectArray0[7] = (Object) defaultSerializerProvider_Impl0;
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) sQLNonTransientConnectionException0, "[sQ", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [sQ
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      // Undeclared exception!
      try { 
        objectReader0.at(")NMe1) OU'-zt:-9n]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \")NMe1) OU'-zt:-9n]\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      // Undeclared exception!
      try { 
        objectReader0.readTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        objectReader0.readTree((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("[sQ");
      File file0 = MockFile.createTempFile("JSON", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3049), objectMapper0, mockPrintStream0);
      uTF8JsonGenerator0.setRootValueSeparator(jsonFactory0.DEFAULT_ROOT_VALUE_SEPARATOR);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0, (char[]) null, 0, 33, false);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      JsonParser jsonParser0 = objectReader0._considerFilter(readerBasedJsonParser0, true);
      // Undeclared exception!
      try { 
        objectReader0.readTree(jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = null;
      try {
        objectReader1 = new ObjectReader(objectReader0, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      byte[] byteArray0 = new byte[1];
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      int int0 = 1703;
      // Undeclared exception!
      try { 
        objectReader0.with((FormatFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
      assertSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute((Object) null);
      ConcurrentHashMap<SimpleType, MissingNode> concurrentHashMap0 = new ConcurrentHashMap<SimpleType, MissingNode>();
      ContextAttributes contextAttributes2 = contextAttributes1.withSharedAttributes(concurrentHashMap0);
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      BiFunction<SimpleType, Object, MapLikeType> biFunction0 = (BiFunction<SimpleType, Object, MapLikeType>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.search(0L, (BiFunction<? super SimpleType, ? super MissingNode, ? extends MapLikeType>) biFunction0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      concurrentHashMap0.values();
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ToDoubleFunction<SimpleType> toDoubleFunction0 = (ToDoubleFunction<SimpleType>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceKeysToDouble(0L, toDoubleFunction0, 0L, doubleBinaryOperator0);
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
      objectReader1.getAttributes();
      contextAttributes1.withSharedAttributes(concurrentHashMap0);
      // Undeclared exception!
      try { 
        objectReader0.with((FormatFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_YAML_COMMENTS;
      objectReader0.with((FormatFeature) jsonReadFeature0);
      // Undeclared exception!
      try { 
        objectReader0.readValues((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      objectReader0.getAttributes();
      JsonNode jsonNode0 = objectReader0.createArrayNode();
      assertFalse(jsonNode0.isBigInteger());
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TypeReference<CollectionType> typeReference0 = (TypeReference<CollectionType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.forType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<NullNode> class0 = NullNode.class;
      objectReader0.withType(class0);
      // Undeclared exception!
      try { 
        objectReader0.forType((TypeReference<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      objectMapper0.disable(serializationFeature0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(987);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      objectMapper0.createArrayNode();
      TypeReference<Integer> typeReference0 = (TypeReference<Integer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.forType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      Class<String> class0 = String.class;
      ObjectReader objectReader2 = objectReader0.withType(class0);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader1);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader((ObjectReader) null, tokenFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader((ObjectReader) null, tokenFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNode jsonNode0 = null;
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader(objectMapper0, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader(objectMapper0, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, deserializationFeature0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 140, dataInputStream0, objectReader0, byteQuadsCanonicalizer0, (byte) (-116));
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(uTF8DataInputJsonParser0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory3, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader1 = objectMapper1.reader(contextAttributes0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      PipedReader pipedReader0 = new PipedReader();
      JsonNode jsonNode0 = objectReader0.createArrayNode();
      assertFalse(jsonNode0.isFloat());
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      deserializationFeatureArray0[1] = deserializationFeature1;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      deserializationFeatureArray0[8] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      objectReader0.createArrayNode();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      objectReader0.with(jsonParser_Feature0);
      MockFile mockFile0 = new MockFile("");
      mockFile0.deleteOnExit();
      mockFile0.toPath();
      try { 
        objectReader0.readValues((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      String string0 = " with format auto-detection: must be byte- not char-based";
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue(" with format auto-detection: must be byte- not char-based", (Object) nioPathDeserializer0);
      objectMapper1.reader((InjectableValues) injectableValues_Std1);
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(0, 0, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockURL.getHttpExample();
      ObjectReader objectReader0 = objectMapper0.reader();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        objectReader0.readValue(byteArray0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      ObjectReader objectReader1 = objectReader0.at(jsonPointer0);
      assertNotSame(objectReader0, objectReader1);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ObjectNode> class0 = ObjectNode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      Nulls nulls0 = Nulls.FAIL;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls0);
      objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonPointer jsonPointer0 = tokenFilterContext0.pathAsPointer(true);
      JsonPointer jsonPointer1 = JsonPointer.forPath(tokenFilterContext0, true);
      tokenFilter0.includeElement((-6937));
      jsonPointer0.append(jsonPointer1);
      objectReader0.at(jsonPointer0);
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, (ConfigOverrides) null);
      DeserializationConfig deserializationConfig1 = null;
      try {
        deserializationConfig1 = new DeserializationConfig(deserializationConfig0, simpleMixInResolver0, rootNameLookup0, (ConfigOverrides) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.BaseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      // Undeclared exception!
      try { 
        objectReader0.readValue(byteArray0, 2932, (int) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2932
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockURL.getHttpExample();
      objectMapper0.reader();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory jsonFactory1 = new JsonFactory();
      try { 
        objectReader0.readValue("[ClassStack (self-refs: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (String)\"[ClassStack (self-refs: \"; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNodeFactory.withExactBigDecimals(true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectMapper0.getDeserializationContext();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        objectReader1.readValue(byteArray0, 139, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 139
         //
         verifyException("com.fasterxml.jackson.core.format.InputAccessor$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      // Undeclared exception!
      try { 
        objectReader0.readValue((byte[]) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(objectMapper1, objectMapper0);
      ContextAttributes contextAttributes2 = contextAttributes1.withPerCallAttribute(contextAttributes0, (Object) null);
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes2);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)73;
      // Undeclared exception!
      try { 
        objectReader0.readValue(byteArray0, (int) 0, 1476);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[2];
      JsonFactory jsonFactory0 = null;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      objectReaderArray0[0] = objectReader0;
      ObjectMapper objectMapper1 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectReader objectReader1 = objectMapper1.reader(jsonNodeFactory0);
      objectReaderArray0[1] = objectReader1;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with(objectReaderArray0);
      // Undeclared exception!
      try { 
        dataFormatReaders1.findFormat((byte[]) null, 1658, 1658);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.format.InputAccessor$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory jsonFactory0 = objectReader0.getFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 48);
      JsonParser jsonParser0 = arrayNode0.traverse();
      try { 
        objectReader0._bind(jsonParser0, arrayNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      try { 
        objectReader0.readValue((Reader) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      ObjectReader objectReader1 = objectReader0.withType((Type) class0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory jsonFactory0 = new JsonFactory();
      try { 
        objectReader0.readValue("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      objectReader0.readTree("");
      FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(formatFeatureArray0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader objectReader1 = objectReader0.with((ContextAttributes) null);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      FormatFeature[] formatFeatureArray0 = new FormatFeature[8];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_SINGLE_QUOTES;
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      formatFeatureArray0[1] = (FormatFeature) jsonReadFeature1;
      JsonReadFeature jsonReadFeature2 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      formatFeatureArray0[2] = (FormatFeature) jsonReadFeature2;
      JsonReadFeature jsonReadFeature3 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      formatFeatureArray0[3] = (FormatFeature) jsonReadFeature3;
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.ESCAPE_NON_ASCII;
      formatFeatureArray0[4] = (FormatFeature) jsonWriteFeature0;
      JsonWriteFeature jsonWriteFeature1 = JsonWriteFeature.ESCAPE_NON_ASCII;
      formatFeatureArray0[5] = (FormatFeature) jsonWriteFeature1;
      JsonReadFeature jsonReadFeature4 = JsonReadFeature.ALLOW_SINGLE_QUOTES;
      formatFeatureArray0[6] = (FormatFeature) jsonReadFeature4;
      JsonWriteFeature jsonWriteFeature2 = JsonWriteFeature.QUOTE_FIELD_NAMES;
      formatFeatureArray0[7] = (FormatFeature) jsonWriteFeature2;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(formatFeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      objectReader0.with(jsonParser_Feature0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      objectReader1.with(contextAttributes0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = ':';
      charArray0[2] = ';';
      charArray0[3] = '\'';
      charArray0[4] = 'F';
      charArray0[5] = 'Y';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, (-1), (-1));
      try { 
        objectReader1._bind(jsonParser0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (char[])\"E:;'FY\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      MockFile mockFile0 = new MockFile("5#Gon(E|q&?8GH", "5#Gon(E|q&?8GH");
      try { 
        objectReader0.readValues((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      HashSet<ObjectReader> hashSet0 = new HashSet<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(hashSet0);
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      File file0 = null;
      // Undeclared exception!
      try { 
        objectReader1.readValues((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      // Undeclared exception!
      try { 
        objectReader0.readValues((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      deserializationFeatureArray0[7] = deserializationFeature1;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      MockFile mockFile0 = new MockFile("`6U+9*Rm3+?gTz");
      MockFile mockFile1 = new MockFile(mockFile0, "`6U+9*Rm3+?gTz");
      try { 
        objectReader0.readValues((File) mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        objectReader0.readTree(byteArray0, 2661, 2661);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2661
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        objectReader0.readTree(byteArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        objectReader0.readTree(byteArray0, 92, 92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 92
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader objectReader1 = null;
      try {
        objectReader1 = new ObjectReader(objectReader0, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
      assertSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES;
      ObjectReader objectReader1 = objectReader0.without((FormatFeature) jsonReadFeature0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      MockURL.getFileExample();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      ObjectReader objectReader1 = objectReader0.withFeatures(jsonParser_FeatureArray0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base");
      try { 
        objectReader1.readValues((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'com': was expecting ('true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }
}
